Id,body,Score
65106591,"const initObject = { 
  value: 5,
  next: {
   value: 10,
   next: {
     value: 15,
     next: null
   }
  }
}

const getValues = ({ value, next }) =>
  next 
    ? [value, ...getValues(next)] 
    : [value]

const createObject = values => 
  values.reduce((next, value) => ({ value, next }), null)

const output = createObject(getValues(initObject))

console.log(output)",8
65124087,"import React from ""react"";
import fire from ""./firebase"";
import firebase from ""firebase""
import { useState } from ""react""

    
const UserPage = ({ match }) => {
    const [user, setUser] = useState(null)
    const { params: { userId } } = match;

    useEffect(()=>{
        //Put your Firebase staff here
     },[])
    
    return(
        <>
        <h1>Hey {user}</h1>
        </>
    )
    }
   
export default UserPage
",6
65132253,"let s = [];
for (let j = 0; j < 9999; j++)
{
  let m = [[22,0],[53,0],[64,0],[45,0],[34,0]];
  let l = m.length;
  for(let i = 0; i < m.length; i++)
  {
    let x = Math.floor(Math.random()*l);
    m[i][1] = x; 
  }
  s.push(m);
}
",6
65118160,"class App extends Component {
  state = {
    persons: [
      { name: 'test1', num: randomNum()},
      { name: 'test2', num: randomNum()}
    ]
  }

  randomPerson =() =>{
    return Math.floor(Math.random()* this.state.persons.length)
  }

  render(){
    return (
      <React.Fragment>
        <button onClick={this.randomPerson}>Switch Person</button>
        {/* ^-- I changed this and removed the num declaration */}
        <div>
          <Person name={this.state.persons[num].name} randomNum={this.state.persons[num].num} />
        </div>
      </React.Fragment>
    
    );
  }
}

export default App;

function App() {
    const randomPerson = () => Math.floor(Math.random() * this.state.persons.length);

    const [person, setPerson] = useState([
        { name: 'test1', num: randomNum()},
        { name: 'test2', num: randomNum()}
    ]);
    const [currentPerson, setCurrentPerson] = useState(randomPerson());

    const switchPerson = () => {
        setCurrentPerson(randomPerson());
    };

    return (
        <React.Fragment>
            <button onClick={switchPerson}>Switch Person</button>
            <div>
                <Person name={person[currentPerson].name} randomNum={person[currentPerson].num} />
            </div>
        </React.Fragment>
    );
}
",0
65142244,"<!doctype html>
<html>

<head>
  <title>Load images</title>
  <script>
    function myFunction(numImages) {
      const html = Array.from(Array(numImages).keys()).slice(1).map(key => {
        const id = String(key).padStart(2, '0');
        return `<div class='col-sm-4 more crop col-xs-6 col-md-3 col-lg-3'>
    <a class=""thumbnail fancybox"" rel=""ligthbox"" href=""images/image${id}.jpg"">
      <img class=""img-responsive"" alt="""" src=""images/image${id}.jpg"" title=""Here would be image${id}"" />Here would be img ${id}
    </a>
  </div>`
      })
      document.querySelector('#images').innerHTML = html.join("""");
    }

    window.addEventListener(""load"", function() {
      myFunction(5); /* change to 50 when you are happy */
    });

  </script>
</head>

<body>
  <div id=""images""></div>
</body>",0
65162308,"const fetchData = async() => {
  const response = await fetch('https://jsonplaceholder.typicode.com/todos')
  const json = await response.json()
  return json
}

const thead1 = document.querySelector('#table > thead')
const tbody1 = document.querySelector('#table > tbody')

const headerHtml = (items) => {
  let html = ''
  html += '<tr><th></th>'
  Object.keys(items[0]).forEach(header => {
    html += `<th>${ header }</th>`
  })
  html += '</tr>'
  return html
}

const bodyHtml = (items) => {
  let html = ''
  items.forEach(item => {
    html += '<tr>'
    html += '<td></td>'
    for (let key in item) {
      html += `<td>${ item[key] }</td>`
    }
    html += '</tr>'
  })
  return html

}

(async function() {
  // get data from the API
  const response = await fetchData()

  // transform data for our requirements
  let transformed = response.reduce((a, c) => {
    if (typeof a[c.userId] === ""undefined"") a[c.userId] = 0
    a[c.userId] += 1
    return a
  }, {})

  let data = Object.entries(transformed).map(([id, val]) => ({
    id,
    val
  }))

  thead1.innerHTML = headerHtml(data)
  tbody1.innerHTML = bodyHtml(data)

  // create chart:
  Highcharts.chart('container', {
    data: {
      table: 'table'
    },
    chart: {
      type: 'column'
    },
    title: {
      text: 'Data extracted from a HTML table in the page'
    },
    yAxis: {
      allowDecimals: false,
      title: {
        text: 'Units'
      }
    },
    tooltip: {
      formatter: function() {
        return `
          <b>${ this.series.name }</b>
        `
      }
    }
  });

})();
#table {
  border-collapse: collapse;
  border: 1px solid #cacaca;
  width: 200px;
}

#table tr,
#table th,
#table td {
  border: 1px solid #6f6f6f;
}

#table th {
  background: #cacaca;
}
<script src=""https://code.jquery.com/jquery-3.4.1.min.js""></script>
<script src=""https://code.highcharts.com/highcharts.js""></script>
<script src=""https://code.highcharts.com/modules/data.js""></script>
<script src=""https://code.highcharts.com/modules/exporting.js""></script>

<script src=""https://code.highcharts.com/modules/export-data.js""></script>
<table id=""table"">
  <thead>
  </thead>
  <tbody>
  </tbody>
</table>
<hr />
<div id=""container""></div>",0
65084387,"<!DOCTYPE html>
<html>
<head>
    <script>
        var timerid;
        var secs = 30;
        var randomNumber;
        var mclics = 0;
        var mcorrect = 0;



        function begin() {
            randomNumber = Math.round(Math.random() * 9);

            var atable = document.getElementById(""atable"");
            for (i = 0; i < atable.rows.length; i++) {
                for (j = 0; j < atable.rows[i].cells.length; j++) {
                    var a = Math.ceil(Math.random() * 100);
                    atable.rows[i].cells[j].innerHTML = a;

                    // NEW CODE LINE
                    atable.rows[i].cells[j].addEventListener(""click"", function () {
                        getNumbers(this.innerText);
                        this.removeEventListener(""click"", arguments.callee);
                    });
                    // END NEW CODE LINE
                }
            }

        }

        function check(trgt) {
            if (trgt.tagName == ""TD"") {
                mclics++
                trgt.onclick = false;                 //for not happen again click//
                if ((trgt.innerHTML % randomNumber) == 0) {
                    mcorrect++                          //right clicks
                    trgt.style.backgroundColor = ""green"";
                }
                else {
                    trgt.style.backgroundColor = ""red"";
                }
            }

        }

        // NEW CODE LINE
        function getNumbers(x) {
            var target = document.getElementById('second').getElementsByTagName('td');
            for (var i = 0; i < target.length; i++) {
                if (target[i].innerText.length === 0) {
                    target[i].innerText = x;
                    break;
                }
            }
        }
        // END NEW CODE LINE

    </script>
</head>

<body>
    <input type=""button"" value=""Start"" onclick=""begin()"" style=""width: 30%""><br>
    <p id=""anumber""></p>
    <table id=""atable"" border=""1"" onclick=""check(event.target)"">
        <tr>
            <td style=""width: 292px; height: 39px;""> </td>
            <td style=""width: 332px; height: 39px;""></td>
            <td style=""width: 260px; height: 39px;"">

        </tr>
        <tr>
            <td style=""width: 292px; height: 46px;""></td>
            <td style=""width: 332px; height: 46px;""></td>
            <td style=""width: 260px; height: 46px;"">
        </tr>
        <tr>
            <td style=""width: 292px; height: 172px;""></td>
            <td style=""width: 332px; height: 172px;""></td>
            <td style=""width: 260px; height: 172px;"">
        </tr>

    </table>

    <p>Remaining time: </p>
    <p id=""atimer""></p>

    <table id=""second"" border=""1"">
        <tr>
            <td style=""width: 292px; height: 39px;""> </td>
        </tr>
        <tr>
            <td style=""width: 332px; height: 39px;""></td>
        </tr>

        <tr>
            <td style=""width: 292px; height: 46px;""></td>
        </tr>
        <tr>
            <td style=""width: 332px; height: 46px;""></td>
        </tr>

        <tr>
            <td style=""width: 332px; height: 39px;""></td>
        </tr>
        <tr>
            <td style=""width: 332px; height: 39px;""></td>
        </tr>
        <tr>
            <td style=""width: 332px; height: 39px;""></td>
        </tr>
        <tr>
            <td style=""width: 332px; height: 39px;""></td>
        </tr>
        <tr>
            <td style=""width: 332px; height: 39px;""></td>
        </tr>

    </table>
</body>
</html>
<!DOCTYPE html>
<html>
<head>
    <script>
        var timerid;
        var secs = 30;
        var randomNumber;
        // var mclics = 0;
        var mcorrect = 0;

        function begin() {

            // NEW CODE LINE
            mcorrect = 0;

            var tableA = document.getElementById('atable').getElementsByTagName('td');
            for (var i = 0; i < tableA.length; i++) {
                tableA[i].style.backgroundColor = '';
                tableA[i].removeEventListener(""click"", getClick);
            }

            var tableB = document.getElementById('second').getElementsByTagName('td');
            for (var i = 0; i < tableB.length; i++) {
                tableB[i].innerText = '';
            }
            // END NEW CODE LINE

            randomNumber = Math.round(Math.random() * 9);

            var atable = document.getElementById(""atable"");
            for (i = 0; i < atable.rows.length; i++) {
                for (j = 0; j < atable.rows[i].cells.length; j++) {
                    var a = Math.ceil(Math.random() * 100);
                    atable.rows[i].cells[j].innerHTML = a;

                    // NEW CODE LINE
                    atable.rows[i].cells[j].addEventListener(""click"", getClick);
                    // END NEW CODE LINE
                }
            }

        }

        // function check(trgt) {
        //     if (trgt.tagName == ""TD"") {
        //         mclics++
        //         trgt.onclick = false;                 //for not happen again click//
        //         if ((trgt.innerHTML % randomNumber) == 0) {
        //             mcorrect++                          //right clicks
        //             trgt.style.backgroundColor = ""green"";
        //         }
        //         else {
        //             trgt.style.backgroundColor = ""red"";
        //         }
        //     }
        // }

        // NEW CODE LINE
        function getClick() {
            getNumbers(this.innerText, this);
            this.removeEventListener(""click"", getClick);
        }

        function getNumbers(x, y) {

            if ((y.innerHTML % randomNumber) == 0) {
                mcorrect++                          //right clicks
                y.style.backgroundColor = ""green"";
            }
            else {
                y.style.backgroundColor = ""red"";
            }

            var target = document.getElementById('second').getElementsByTagName('td');
            for (var i = 0; i < target.length; i++) {
                if (target[i].innerText.length === 0) {
                    target[i].innerText = x;
                    break;
                }
            }
        }
        // END NEW CODE LINE

    </script>
</head>

<body>
    <input type=""button"" value=""Start"" onclick=""begin()"" style=""width: 30%"">
    <br>

    <p id=""anumber""></p>
    <table id=""atable"" border=""1"">
        <tr>
            <td style=""width: 292px; height: 39px;""> </td>
            <td style=""width: 332px; height: 39px;""></td>
            <td style=""width: 260px; height: 39px;"">

        </tr>
        <tr>
            <td style=""width: 292px; height: 46px;""></td>
            <td style=""width: 332px; height: 46px;""></td>
            <td style=""width: 260px; height: 46px;"">
        </tr>
        <tr>
            <td style=""width: 292px; height: 172px;""></td>
            <td style=""width: 332px; height: 172px;""></td>
            <td style=""width: 260px; height: 172px;"">
        </tr>

    </table>

    <p>Remaining time: </p>
    <p id=""atimer""></p>

    <table id=""second"" border=""1"">
        <tr>
            <td style=""width: 292px; height: 39px;""> </td>
        </tr>
        <tr>
            <td style=""width: 332px; height: 39px;""></td>
        </tr>

        <tr>
            <td style=""width: 292px; height: 46px;""></td>
        </tr>
        <tr>
            <td style=""width: 332px; height: 46px;""></td>
        </tr>

        <tr>
            <td style=""width: 332px; height: 39px;""></td>
        </tr>
        <tr>
            <td style=""width: 332px; height: 39px;""></td>
        </tr>
        <tr>
            <td style=""width: 332px; height: 39px;""></td>
        </tr>
        <tr>
            <td style=""width: 332px; height: 39px;""></td>
        </tr>
        <tr>
            <td style=""width: 332px; height: 39px;""></td>
        </tr>

    </table>
</body>
</html>",0
65103187,"<style>
  .butt {
    background:blue;
  }
  .butt.toggled {
    background:lightblue;
  }
</style>

<script>
  export let toggled = false

  function toggle() {
    toggled = !toggled
  }
</script>

<div
  on:click={toggle}
  class=""butt""
  class:toggled
>sample button</div>
",0
65085875,"{item.titleName && (
  <li onClick={() => { this.setState({ indexDescription: index }) }}>
    <div className={less.sidebar_list}>
      <div>
        <FontAwesomeIcon className={less.item_icon} icon={item.iconName} />
      </div>
      <div className={less.titleName}>
        <div>
          <p>{item.titleName}</p>
        </div>
      </div>
    </div>
  </li>
)}
",0
65092440,"$(document).ready(function(){
    $(""#normal"").keyup(function(){

        var r = $(""#normal"").val();
      let d= """";
          let c = 'bcdfghjklmnpqrstvwxz';
          for(let letter of r){
            let smallLetter = letter.toLowerCase();
            d = d + letter;
            if(c.includes(smallLetter)){

              d = d + 'o' + smallLetter;  
           }
          }

        $(""#pirate"").val(d);

    });
});
<!-- Av Karwan Maryame Azar.-->


<html lang=""en"">
<head>
  <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js""></script>

  
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
  <title></title>
</head>
<body>
  
  <h2>Normal</h2>
<textarea id=""normal""></textarea>

<h2>Pirates</h2>
<textarea id=""pirate""></textarea>

<p>
  
<input type='button' value=' Talk like a pirate' />
  

</body>
</html>",0
65153572,"    var colors = [""#2D2D2D""]; // dont know why you have an array of color but
    // i could get this to be much simpler without using array but i fallowed your example to make simpler for you
    var colorIndex = 0;
    function changeColor() {
        var col = document.getElementById(""body"");          
        if( colorIndex >= colors.length ) {
            colorIndex = 0;
        }
        
        
        if (colors[colorIndex] == col.getAttribute(""currentColor"")){
            col.style.backgroundColor = null; // take the css color
            col.setAttribute(""currentColor"",col.style.backgroundColor);
          }
            else {
            col.style.backgroundColor = colors[colorIndex];
            col.setAttribute(""currentColor"",colors[colorIndex]);
          }
        
        colorIndex++;   
    } ",0
65098905,"handleSubmit(event) {
  var requestOptions = {}

  const params = new URLSearchParams({
    'name': this.state.name,
    'birth': this.state.birth,
    'oscars': this.state.oscars
  });

  if (this.state.movies.length > 0) {
    params.append(""movies"", this.state.movies)
  }

  requestOptions.method = ""POST"";
  requestOptions.body = params;
}
",0
65083226,"let money = 0;
let running = false;

// when clicking the button
function onClickButton(time, val) {
  if(running) {
    console.log(""Already Growing!"");
  } else {
    running = true;
    start(time, val);
  }
}

// timer function
function start(time, val) {
  let bar = document.getElementById('progressBar1');
  bar.value = time;
  time++;
  let sim = setTimeout(() => start(time), 30);
  if (time == 100) {
    bar.value = 0;
    let id = val;
    money++;
    document.getElementById(""moneyValue"").innerHTML = money;
    clearTimeout(sim);
    running = false;
  }
}",0
65107368,"<div *ngFor=""let form of myForm.controls;"">
    <ng-container [formGroup]=""form"">
      <div>
        <label>Name</label
        ><input type=""text"" required formControlName=""firstName"" />
      </div>
      <span class=""text-danger"" *ngIf=""isInValidFormControl(form,'firstName')"">
        Name is required
      </span>
      <div>
        <label>Value</label><input type=""text"" formControlName=""value"" />
      </div>
    </ng-container>
</div>
",0
65105645,"const email = document.getElementById('email');
const label =  document.getElementById('lblemail');

email.addEventListener('input', function(e) {
  if (!e.target.value.trim()) {
    email.style.border = 'solid 1px red';
    label.style.visibility = 'visible';
  } else {
    email.style.border = 'solid 1px black';
    label.style.visibility = 'hidden';
  }
})
",0
65131138,"export default function App() {
  const titleArray = []

  const recursive = (children) => {
    children.map((newChild) => {
      newChild.title && titleArray.push(newChild.title)
      if(newChild.children) {
        recursive(newChild.children)
      }
    })
  }
  recursive(parent.children)
  return (
    <div className=""App"">
      {titleArray.map((title, index) => (
         <div key={index}>{title}</div>
      ))}
    </div>
  );
}
",0
65132628,"import { Component } from '@angular/core';
import { products } from './products';
import { GridDataResult, PageChangeEvent, SelectAllCheckboxState } from '@progress/kendo-angular-grid';

@Component({
    selector: 'my-app',
    template: `
        {{isBoxEnabled}}
        <kendo-grid
            [data]=""gridView""
            [pageSize]=""pageSize""
            [skip]=""skip""
            [pageable]=""true""
            (pageChange)=""pageChange($event)""
            [height]=""500""
            [selectable]=""{enabled: true, checkboxOnly: true }""
            (selectionChange)=""selectionChange($event)""
            kendoGridSelectBy=""ProductID"">
            <kendo-grid-checkbox-column [width]=""80"">
                <ng-template kendoGridHeaderTemplate>
                    <input class=""k-checkbox"" id=""selectAllCheckboxId"" kendoGridSelectAllCheckbox >
                    <label class=""k-checkbox-label"" for=""selectAllCheckboxId"">Text</label>
                </ng-template>
            </kendo-grid-checkbox-column>
            <kendo-grid-column field=""ProductName"" title=""Product Name"" [width]=""300""></kendo-grid-column>
            <kendo-grid-column field=""UnitsInStock"" title=""Units In Stock""></kendo-grid-column>
            <kendo-grid-column field=""UnitsOnOrder"" title=""Units On Order""></kendo-grid-column>
            <kendo-grid-column field=""ReorderLevel"" title=""Reorder Level""></kendo-grid-column>
        </kendo-grid>
    `
})
export class AppComponent {
    public gridView: GridDataResult;
    public items: any[] = products;
    public mySelection: number[] = [];
    public selectAllState: SelectAllCheckboxState = 'unchecked';
    public pageSize = 10;
    public skip = 0;

    public isBoxEnabled = false;

    constructor() {
        this.loadItems();
    }


    public pageChange(event: PageChangeEvent): void {
        this.skip = event.skip;
        this.loadItems();
    }

    private loadItems(): void {
        this.gridView = {
            data: this.items.slice(this.skip, this.skip + this.pageSize),
            total: this.items.length
        };
    }
    
    public selectionChange(e) {
      const selectedRowIndices = e.selectedRows.map(row => row.index)
      const deselectedRowIndices = e.deselectedRows.map(row => row.index)
      this.mySelection = this.mySelection.concat(selectedRowIndices)
      this.mySelection = this.mySelection.filter(selection => !deselectedRowIndices.includes(selection))
      this.isBoxEnabled = this.mySelection.length > 0
    }
}
",0
65106132,"const hamburger = document.querySelector("".hamburger"");
const navbar = document.querySelector("".nav__list"");

hamburger.addEventListener(""click"", ()=> {
    navbar.classList.toggle(""open"");
});


const hamburgerBtn = document.querySelector('.hamburger');
let hamburgerOpen = false;

hamburgerBtn.addEventListener('click', () => {
    if (!hamburgerOpen) {
        hamburgerBtn.classList.add('open');
        hamburgerOpen = true;
    } else {
        hamburgerBtn.classList.remove('open');
        hamburgerOpen = false;
    }
});
:root {
    --fw-normal: 400;
    --fw-dark: 600;
    --fw-bold: 700;

    /***Colors***/
    --clr-primary: #333;
    --clr-text: #fafafa;
    --clr-blue: #22a7ff;
    --clr-purple: #871e5f;
    --clr-green: #19a356;
    --clr-yellow: #ffff2e;
    --clr-red: #cd1a21; 
    --clr-orange: #ff4500;

    /*** Font and Typography ***/
    --ff-body: Georgia, ""Times New Roman"", Times, serif;
    --ff-header: Verdana, Arial, Helvetica, sans-serif;
    --fs-header: 4.5rem;
    --fs-header1: 2.5rem;
    --fs-header2: 1.5rem;
    --fs-header3: 1.2rem;
    --fs-lg-para: 1.1rem;
    --fs-md-para: 1rem;
    --fs--sm-para: .938rem;

    /*** z index ***/
    --z-index: 99;
}





/***************************************************
2. #Global Styles
***************************************************/

*, ::before, ::after {
    box-sizing: border-box;
}

html {
    scroll-behavior: smooth;
}

body {
    margin: 0;
    padding: 0;
    font-family: var(--ff-body);
    background: var(--clr-text);
    color: var(--clr-primary);
    font-size: var(--fs-para);
    line-height: 1.6;
}

a {
    text-decoration: none;
    cursor: pointer;
    letter-spacing: 2px;
    padding:  1.25em;
    display: inline-block;
    width: 100%;
    text-align: center;
    transition:all .5s;
}

h1, h2, h3, h4, h5, h6 {
    font-family: var(--ff-header);
    margin: 0;
}

p {
    margin: 0;
}

ul {
    margin: 0;
    padding: 0;
    list-style: none;
}

/* img {
    max-width: 100%;
    width: 100%;
    height: auto;
} */





/************************************************
3. #Typography
************************************************/

    /* Navigation Bar & Hero Section*/
.bg-hero {
    position: relative;
    width: 100%;
    min-height: 100vh;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: var(--clr-blue);
    transition: .5s;
}

.navbar {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    padding-right: 2.5em;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.nav__list {
        right: -100%;
        opacity: 0;
    }
.open{
  
        right: 0;
  opacity:1;
}

@media screen and (max-width: 48em) {
    .nav__list {
        position: fixed;
        top: 0;
        right: -100%;
        width: 80%;
        height: 80%;
        background: rgba(255,255,255, 0.3);
        backdrop-filter: blur(10px);
        z-index: var(--z-index);
        flex-direction: column;
        align-items: center;
        justify-content: center;
        transition: .2s;
        opacity: 0;
    }
}

html .open {
    right: 0;
  opacity:1;
}

.nav__link {
    color: var(--clr-text);
    font-weight: var(--fw-normal);
    font-size: var(--fs-lg-para);
}

.nav__link:hover {
    color: var(--clr-purple);
}

.shopping-cart {
    margin-right: 2em;
    color: var(--clr-text);
}

.social__media {
    display: flex;
    justify-content: center;
    align-items: center;
    padding-left: 3em;
    margin-top: 3em;
}

.sm__link {
    background: var(--clr-text);
    width: 2.7em;
    height: 2.7em;
    margin: 1em .625em;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
}

.sm__link i {
    transition: .1s linear;
}

.sm__link:hover i {
    transform: scale(1.5);
}

.sm__facebook {
    font-size: 1.5rem;
    color: #4267b2;
}

.sm__twitter {
    font-size: 1.5rem;
    color: #1da1f2;
}

.sm__instagram {
    font-size: 1.5rem;
    color: #000;
}

.social__contact {
    display: none;
}





/*****************************************************
4. #Components
*****************************************************/

/*4.1 Cart Basket*/
.cart-item {
    background: linear-gradient(-270deg, #ff7800 8.6%, #ff5000 99.58%, #ff5000 100%);
    border-radius: 50%;
    padding: 1px 3px 2px;
}
 /*4.2 Buttons*/
 .btn-main {
    display: inline-block;
    width: 18em;
    max-width: 100%;
    height: 3em;
    padding: .5em 1.25em;
    border-radius: 1.563em;
    margin-top: 2.5em;
    background: linear-gradient(-270deg, #ff7800 8.6%, #ff5000 99.58%, #ff5000 100%);
    color: var(--clr-text);
    font-weight: 600;
    font-size: .88rem;
}

.fa-angle-right {
    color: #ff7800;
    background: var(--clr-text);
    border-radius: 50%;
    padding: .438em;
    margin-right: -.938em;
}

.btn-main:focus,
.fa-arrow-right:focus {
    color: var(--clr-primary);
    opacity: 0.1;
}

.btn-main:hover,
.fa-arrow-right:hover {
    color: var(--clr-primary);
}

/*4.3 Hamburger*/
.hamburger {
    position: absolute;
    cursor: pointer;
    right: 2%;
    top: 50%;
    transform: translate(-5%,-50%);
    z-index: var(--z-index);
}

.hamburger-btn {
    width: 20px;
    height: 3px;
    background: var(--clr-text);
    margin: .625em;
    transition: all .5s ease-in-out;
}

.hamburger-btn::before,
.hamburger-btn::after {
    content: '';
    position: absolute;
    width:20px;
    height: 3px;
    background: var(--clr-text);
    border-radius: 5px;
    transition: all .5s ease-in-out;
}

.hamburger-btn::before {
    transform: translateY(-7px);
}

.hamburger-btn::after {
    transform: translateY(7px);
}

.hamburger.open .hamburger-btn {
    transform: translateX(-50px);
    background: transparent;
}

.hamburger.open .hamburger-btn::before {
    transform: rotate(45deg) translate(35px, -35px);
}

.hamburger.open .hamburger-btn::after {
    transform: rotate(-45deg) translate(35px, 35px);
}
<section class=""bg-hero"">
         <nav class=""navbar"">
            <a href=""#"" class=""company-brand""><img src=""#"" alt=""#"" class=""#""><span>X&L Limited</span></a>
            <ul class=""nav__list"">
               <li class=""nav__list-item""><a href="""" class=""nav__link""></a></li>
               <li class=""nav__list-item""><a href="""" class=""nav__link"">Products</a></li>
               <li class=""nav__list-item""><a href="""" class=""nav__link"">Our Story</a></li>
               <li class=""nav__list-item""><a href="""" class=""nav__link"">Blog</a></li>
               <li class=""nav__list-item""><a href="""" class=""nav__link"">Contact Us</a></li>
               <div class=""social__media"">
                  <a href=""#"" class=""sm__link""><i class=""fab fa-facebook-f sm__facebook""></i></a>
                  <a href=""#"" class=""sm__link""><i class=""fab fa-twitter sm__twitter""></i></a>
                  <a href=""#"" class=""sm__link""><i class=""fab fa-instagram sm__instagram""></i></a>
               </div>
            </ul>
            <div>
               <i class=""fas fa-shopping-cart fa-lg shopping-cart"">&nbsp;<span class=""cart-item"">0</span></i>
            </div>
            <div class=""hamburger"">
               <div class=""hamburger-btn""></div>
            </div>
         </nav>
         <div class=""hero"">
            <div class=""contentBox"">
               <h1 class=""hero-title"">Do you like <br><span>Smooth Skin?</span></h1>
               <p class=""hero-para"">Naturally, the skin is supposed to be smooth and soft, however, the only insurance for dry and oily skin is skincare products that consistently offer effective skin protection. To protect dry and oily skin, make the smart choice, because the choice is yours, and it's simple.</p>
               <a class=""btn-main"" href=""#"">View Our Products &nbsp;&nbsp;&nbsp;<i class=""fas fa-angle-right fa-lg""></i></a>
            </div>
         </div>
      </section>",0
65129997,"const SearchMusic = ({keyword, setKeyword}) => {

    const BarStyling = {width: ""20rem"", background: ""#F2F1F9"", border: ""none"", padding: ""0.5rem""};

    return (
        <input
            type=""text""
            style={BarStyling}
            key='random1'
            value={keyword}
            placeholder={'Search a song'}
            onChange={(e => setKeyword(e.target.value))}
        />
    );
};
",0
65159982,"function textVerify(item) {

  var word = document.getElementById(($('#questionNumber').text() + 'a'));

  if (item.value.toUpperCase() === $(word).text().toUpperCase()) {
    item.style.color = ""green"";
    $(item).replaceWith(""<div style='color:green;'>"" + $(word).text() + ""</div>"");
    //main()
  } else {
    item.style.color = ""black"";
  }
}",0
65119203,"foreach(var item in Model){
  <form>
    <input type=""text"" id=""id"" name=""id"" value=""item.id""/>
    <input type=""button"" class=""btn"" data-id=""item.id"" name=""submit"" value=""Delete""/>
  </form>
}

<script>
  $("".btn"").click(function(){
    // alert the id value
    alert($(this).attr(""data-id""))
  });
</script>
",0
65133157,"const copyTextToClipboard = (text) => {
  const textArea = document.createElement('textarea')

  //
  // *** This styling is an extra step which is likely not required. ***
  //
  // Why is it here? To ensure:
  // 1. the element is able to have focus and selection.
  // 2. if element was to flash render it has minimal visual impact.
  // 3. less flakyness with selection and copying which **might** occur if
  //    the textarea element is not visible.
  //
  // The likelihood is the element won't even render, not even a flash,
  // so some of these are just precautions. However in IE the element
  // is visible whilst the popup box asking the user for permission for
  // the web page to copy to the clipboard.
  //

  // Place in top-left corner of screen regardless of scroll position.
  textArea.style.position = 'fixed'
  textArea.style.top = '0'
  textArea.style.left = '0'

  // Ensure it has a small width and height. Setting to 1px / 1em
  // doesn't work as this gives a negative w/h on some browsers.
  textArea.style.width = '2em'
  textArea.style.height = '2em'

  // We don't need padding, reducing the size if it does flash render.
  textArea.style.padding = 0

  // Clean up any borders.
  textArea.style.border = 'none'
  textArea.style.outline = 'none'
  textArea.style.boxShadow = 'none'

  // Avoid flash of white box if rendered for any reason.
  textArea.style.background = 'transparent'

  textArea.value = text

  document.body.appendChild(textArea)

  textArea.select()

  try {
    const successful = document.execCommand('copy')
    const msg = successful ? 'successful' : 'unsuccessful'
    console.log('Copying text command was ' + msg)
  } catch (err) {
    console.log('Oops, unable to copy')
  }

  document.body.removeChild(textArea)
}
",0
65144743,"const defaults = (project: string) => {
  return {
    name: basename(cwd()),
    project,
    path: ""."",
    ignore: defaultIgnores(project).ignore,
  };
};

export let config: any = {
  version,
};

export const initializeConfig = (project: string, ...args: boolean[]) => {
  prompt([
    {
      type: ""input"",
      name: ""name"",
      message: ""What is the name of the project?"",
      default: defaults(project).name,
      when: () => args.every((arg) => arg === false),
    },
    {
      type: ""list"",
      name: ""project"",
      message: ""What is the type of the project?"",
      choices: [""Node"", ""Python""],
      default: defaults(project).project,
      when: () => args.every((arg) => arg === false),
    },
  ])
    .then((answers: Answers) => {
      const { name, project: projectName } = defaults(project);

      config = setConfig({ name: answers.name || name });
      config = setConfig({ project: answers.project || projectName });
    })
    .then(() =>
      prompt([
        {
          type: ""input"",
          name: ""path"",
          message: ""Where is your project root located?"",
          default: defaults(project).path,
          when: () => args.every((arg) => arg === false),
        },
        {
          type: ""input"",
          name: ""ignore"",
          message: ""What do you want to ignore? (comma separated)"",
          default: defaults(project).ignore,
          when: () => args.every((arg) => arg === false),
        },
      ]).then((answers: Answers) => {
        const { ignore, path } = defaults(project);

        config = setConfig(
          ignoreFiles(config.project, (answers.ignore || ignore)!)
        );
        createConfig(answers.path || path, config);
      })
    );
};
",0
65122266,"const handlestartChange = (date) => {
  setStartDate(date);
};
const handleendChange = (date) => {
  setEndDate(date);
};
const applyDateFilter = () => {
  const newLabels = [],
    newDatas = [];
  initialLevelsArr.forEach((item, index) => {
    if (item >= startDate && item <= endDate) {
      newLabels.push(item);
      newDatas.push(initialData[index]);
    }
  });
  setLabels(newLabels);
  setDatas(newDatas);
};
",0
65138229,"await new Promise((resolve) => {
  page.on('request', async (request) => {
    if(request.url().includes(baseUrl)){
      const downloadUrl = fixUrl(request.url());
      const info = await getSongInfo(page);
      downloadSong(downloadUrl, info.title);
      await tagSong(info);
      await request.abort();
      await page.close();
      resolve();
    } else {
      request.continue();
    }
  });
})
",0
65145507,"const meals = [
    { calorie: 10,
      diet: 'Chicken',
      day: 1
    },
    { calorie: 15,
      diet: 'Soya',
      day: 2
    },
    { calorie: 20,
       diet: 'Chicken',
       day: 3
    },
    { calorie: 25,
        diet: 'Soya',
        day: 4
      }
  ];
const res = meals.reduce((acc,{calorie, diet})=>
     (acc[diet]=(acc[diet] || 0) + calorie, acc),{});
for(const key in res){
  console.log(key,'=',res[key]);
}",0
65088386,"const images = [{
    ""url"": ""https://picsum.photos/id/1020/367/267"",
    ""title"": ""Bear on a mountain"",
    ""description"" : ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.""
  },
  {
    ""url"": ""https://picsum.photos/id/1024/367/267"",
    ""title"": ""Eagle in flight"",
    ""description"" : ""Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.""
  },
  {
    ""url"": ""https://picsum.photos/id/1025/367/267"",
    ""title"": ""Doggie in a blanket"",
    ""description"" : ""Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.""    
  }
];
const html = images.map((img, i) => `<img src=""${img.url}"" title=""${img.title}"" data-idx=""${i}""/>`);
const container = document.getElementById(""container"");
const modal = document.getElementById(""modal"");
container.innerHTML = html.join("" "");
container.addEventListener(""click"", function(e) {
  const tgt = e.target;
  if (tgt.tagName == ""IMG"") {
    const idx = tgt.dataset.idx; console.log(idx, images[idx].title)
    modal.querySelector("".title"").innerHTML = images[idx].title;
    modal.querySelector("".desc"").innerHTML = images[idx].description;
    modal.classList.remove(""hide"");
  }
})
modal.querySelector("".close"").addEventListener(""click"",function() { modal.classList.add(""hide"") })
#modal {
  position: absolute;
  top: 100px;
  left: 100px;
  border: 1px solid red;
  height: 200px;
  overflow: auto;
  width: 300px;
  background-color: white;
  padding: 3px;
}

.hide {
  display: none;
}

#container img { cursor: pointer; }

.close { float:right; }",0
65119535,"// match cluster icon to markers
var calc = function(markers, numStyles) {
    // default to blue
    var highestPriorityColor = 1;
    for (var i = 0; i < markers.length; i++) {
        if (markers[i].getIcon().indexOf(""red.png"") > -1) {
            // if any markers are red, will be red, can return result
            return {text: markers.length, index: 3}; // index of red
        } else if (markers[i].getIcon().indexOf(""yellow.png"") > -1) {
            // if any markers are yellow, update it to yellow if it is blue
            if (highestPriorityColor < 2)
                highestPriorityColor = 2; // index of yellow
        } /* else if (markers[i].getIcon().indexOf(""green.png"") > -1) {
            // ignore green markers (leave it whatever color it is, defaults to blue)
        } */
    }
    // return result once complete processing all the markers
    return {text: markers.length, index: highestPriorityColor}; // index of chosen cluster
}

function initMap() {
  var map = new google.maps.Map(document.getElementById('map'), {
    center: new google.maps.LatLng(51, 4),
    zoom: 6,
    mapTypeControlOptions: ""roadmap""
  });

  var markers = [];

  // make random red, yellow, blue markers
  for (var i = 0; i < 50; i++) {
    var latLng = new google.maps.LatLng(51.11 - Math.random(), 4.11 - Math.random());
    var marker = new google.maps.Marker({
      position: latLng,
      icon: 'http://maps.google.com/mapfiles/ms/micons/green.png',
      label: """" + i,
      map: map
    });
    markers.push(marker);
  }
  for (var i = 0; i < 20; i++) {
    var latLng = new google.maps.LatLng(51.11 - Math.random(), 4.11 - Math.random());
    var marker = new google.maps.Marker({
      position: latLng,
      icon: 'http://maps.google.com/mapfiles/ms/micons/yellow.png',
      label: """" + i,
      map: map
    });
    markers.push(marker);
  }
  for (var i = 0; i < 5; i++) {
    var latLng = new google.maps.LatLng(51.11 - Math.random(), 4.11 - Math.random());
    var marker = new google.maps.Marker({
      position: latLng,
      icon: 'http://maps.google.com/mapfiles/ms/micons/red.png',
      label: """" + i,
      map: map
    });
    markers.push(marker);
  }

  // match cluster icon to markers
  var calc = function(markers, numStyles) {
    // default to blue
    var highestPriorityColor = 1;
    for (var i = 0; i < markers.length; i++) {
      if (markers[i].getIcon().indexOf(""red.png"") > -1) {
        // if any markers are red, will be red, can return result
        return {
          text: markers.length,
          index: 3
        }; // index of red
      } else if (markers[i].getIcon().indexOf(""yellow.png"") > -1) {
        // if any markers are yellow, update it to yellow if it is blue
        if (highestPriorityColor < 2)
          highestPriorityColor = 2; // index of yellow
      }
      /* else if (markers[i].getIcon().indexOf(""green.png"") > -1) {
                 // ignore green markers (leave it whatever color it is, defaults to blue)
             } */
    }
    // return result once complete processing all the markers
    return {
      text: markers.length,
      index: highestPriorityColor
    }; // index of chosen cluster
  }

  // define cluster icons
  var mcOptions = {
    gridSize: 50,
    maxZoom: 15,
    styles: [{
        height: 50,
        url: ""https://raw.githubusercontent.com/googlearchive/js-marker-clusterer/gh-pages/images/m1.png"",
        width: 50
      },
      {
        height: 50,
        url: ""https://raw.githubusercontent.com/googlearchive/js-marker-clusterer/gh-pages/images/m2.png"",
        width: 50
      },
      {
        height: 50,
        url: ""https://raw.githubusercontent.com/googlearchive/js-marker-clusterer/gh-pages/images/m3.png"",
        width: 50
      }
    ]
  };
  var markerCluster = new MarkerClusterer(map, markers, mcOptions);
  markerCluster.setCalculator(calc);
}
#map {
  height: 80%;
}


/* Optional: Makes the sample page fill the window. */

html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
}",0
65112156,"<td>
    input  type=""checkbox"" id=""vehicle2"" name=""vehicle2"" 
      (change)=""addCheckValue(i,list.isTicked)""
      [checked]=""list.isTicked""
      [disabled]=""list.isDisabled"">
  </td>


  <td *ngIf=""list.isDisabled"">
            Already disabled
    </td>



addCheckValue(index,isChecked){
    if(isChecked === undefined){
      isChecked = true
    }
    this.listes[index].isTicked = isChecked;

  }



//disabled checked boxes on close 
this.listes = this.listes.map(e => {
      if (e.isTicked === true) {
        e.isDisabled = true;
      }
      return e;
});
",0
65095449,"const items = 
  [ { group: ""group_1"", text: ""Text 1"",  value: ""1""  } 
  , { group: ""group_2"", text: ""Text 1"",  value: ""21"" } 
  , { group: ""group_1"", text: ""Text 2"",  value: ""2""  } 
  , { group: ""group_1"", text: ""Text 3"",  value: ""3""  } 
  , {                   text: ""Text 30"", value: ""30"" } 
  ] 

const groups = items.reduce((r,{group,...other})=>
  {
  if (!group) return r
  let grp = r.find(x=>x.some(z=>z.group===group))
  if (!grp) r.push([{group,...other}])
  else grp.push( {group,...other} )
  return r
  }
  ,[])

console.log( groups ) 
const items = 
  [ { group: ""group_1"", text: ""Text 1"",  value: ""1""  } 
  , { group: ""group_2"", text: ""Text 1"",  value: ""21"" } 
  , { group: ""group_1"", text: ""Text 2"",  value: ""2""  } 
  , { group: ""group_1"", text: ""Text 3"",  value: ""3""  } 
  , {                   text: ""Text 30"", value: ""30"" } 
  ] 
       
const groups = items.reduce((r, { group, ...other})=>
  {
  if (!group) return r
  let grp = r.find(x=>x.group===group)
  if (!grp) 
    {
    grp = { group, elements:[] }
    r.push(grp)
    }
  grp.elements.push({...other})
  return r
  }
  ,[]);

console.log(  groups )",0
65134419,"var graphs = [
  {
    graph: {
      name: ""Praveen Kumar"",
      age: 27,
      space: ""YouTube""
    }
  }, {
    graph: {
      name: ""Cat Techie"",
      age: 25,
      gender: ""Female""
    }
  }
];
console.log(graphs.map(item => {
  return `The value of ${item.graph.name}'s values are:
` + Object.keys(item.graph).map(key => {
    return `- ${key}: ${item.graph[key]}`;
  }).join(""\n"");
}));",0
65117650,"let someArray = [
[1,""a"",2.3],
[2,""b"",7.8],
[3,""c"",4.5],
]

// if you want to change the items inside the array

//Array.map

someArray = someArray.map(innerArray =>{
  return innerArray.map(element => {
    //Do any thing to the element lets say that we want to convert all values to strings
    
    return String(element);
  })
})

console.log(someArray);

console.log('##################################');
//if you don't want to change the items inside the arreay you can:
// 1. remove the return statement from the Array.map function above

// 2. use any type of loop for, while loop

for(let i = 0; i < someArray.length; i++){
  for(let j = 0; j < someArray[i].length; j++){
      // Do any thing with the array item lets say you want to print it
      console.log(someArray[i][j]);
      
  }

}",0
65085750,"var to_json_linebyline = function to_json_linebyline(wb){
    var sheet = wb.Sheets['Sheet1'];
    var results = [];
    var range = XLSX.utils.decode_range(sheet['!ref']);
    for(let rowNum = (range.s.r+1); rowNum <= range.e.r; rowNum++){
       let thisRow = {},
           thisNode = '';
       
       for(let colNum=range.s.c; colNum<=range.e.c; colNum++){
          var thisHeader = sheet[XLSX.utils.encode_cell({r: 0, c: colNum})].w
          var thisCell = sheet[XLSX.utils.encode_cell({r: rowNum, c: colNum})].w
          if(colNum === 0){ 
            thisNode = thisCell;
          }
          thisRow[thisHeader] = thisCell;
       }
       thisResult = {};
       thisResult[thisNode] = [thisRow]
       results.push(thisResult)
    }
    return JSON.stringify(results);
}
",0
65158300,"  createTimestamp(timestampTimeInput: any, timestampNameInput: any){
    this.timestamp_model.time = this.stringToTime(timestampTimeInput.value);
    this.timestamp_model.name = timestampNameInput.value;
    //session_audio is set during initialization of this.timestamp_model

    this.timestampService.createTimestamp(this.timestamp_model).pipe(first()).subscribe(timestamp => {
      this.timestamps.unshift(timestamp);
      this.timestampCreateState = false;
    }, error => console.log(error));
  }
",0
65142351,"new RGraph.Bar({
    id: 'cvs',
    data: '12,18,10,9,6,20,18'.split(','),
    options: {
        yaxisScaleUnitsPost: 'k',
        colors: ['red'],
        title: 'A basic Bar chart using accessible text',
        titleBold: true,
        xaxis: false,
        yaxis: false,
        marginLeft: 50,
        tooltips: '%{key}',
        tooltipsFormattedUnitsPost: '%',
        tooltipsCss: {
            fontSize: '26pt'
        },
        tooltipsFormattedKeyLabels: ['Dave','John'],
        tooltipsEvent: 'mousemove'
    }
}).draw().responsive([
    {maxWidth:900,width:400,height:150,options: {textSize:10,xaxisLabels:['Mon\n(yuck!)','Tue','Wed','Thu','Fri\n(woo!)','Sat','Sun'],marginInner: 10}},
    {maxWidth:null,width:750,height:250,options: {textSize:14,xaxisLabels: ['Monday\n(yuck!)','Tuesday','Wednesday','Thursday','Friday\n(woo!)','Saturday','Sunday'],marginInner: 20}}
]);
",0
65119797,"execute(client, connection, message, args) {
message.channel.send(client.helpers.get('CreateEmptyEmbed').execute(""Poll"", client, false)
    .setTitle('test')
    .addField(`0`)
).then(embedMessage => {
    embedMessage.react(`✅`)
    embedMessage.react(`❎`)
    const filter = (reaction, user) => user.bot!; //Ignores bot reactions
    collector = embedMessage.createReactionCollector(filter,{time:15000)) //The time parameter (in milliseconds) specified for how much time the reactionCollector collects reactions
    collector.on('collect',(reaction,user)=>{ //When a reaction is collected
         const embed = embedMessage.embeds[0] // Get the embed that you want to edit.
         embed.fields[0] = {name : 'The name of the new field' , value : 'Value of new field'}
         await embedMessage.edit(embed)
         })
    collector.on('end',()=>{ //When the time we specified earlier is over
        //Do stuff
         })
    
})
",0
65146420,"$('input:radio[name=""date-range""]').on('change', function () {

    alert(""test: "" + $(this).val());

    switch ($(this).val()) {
        case '30-days':
            //ajax GET function
            break;

        case '60-days':
            //ajax GET function
            break;

        case '90-days':
            //ajax GET function
            break;
    }
});
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<ul class=""choose-date-range"">
    <li>
        <input type=""radio"" id=""30-days"" name=""date-range"" value=""30-days"">
        <label for=""30-days"">30 days</label>
    </li>
    <li>
        <input type=""radio"" id=""60-days"" name=""date-range"" value=""60-days"">
        <label for=""60-days"">60 days</label>
    </li>
    <li>
       <input type=""radio"" id=""90-days"" name=""date-range"" value=""90-days"">
       <label for=""90-days"">90 days</label>
    </li>
</ul>",0
65154999,"function Tab({label, accessibilityState} ) //<== Destructed props.
{
        const active = accessibilityState.selected;
        const icon = !active ? Images.icons[label] : Images.icons[ `${label}Active` ];
        return(
            <Container>
                <Background>
                    <Icon source={icon}/>
                    <Label>{label}</Label>
                </Background>
            </Container>
        );
    }
    
    export default Tab;

function Tab(props ) //<== props.
{
        const active = props.accessibilityState.selected;
        const icon = !active ? Images.icons[label] : Images.icons[ `${props.label}Active` ];
        return(
            <Container>
                <Background>
                    <Icon source={icon}/>
                    <Label>{props.label}</Label>
                </Background>
            </Container>
        );
    }

    export default Tab;
",0
65157072,"var locationsCoordinates = [{lat: 12.84, lng: 122.89}, {lat: 12.80, lng: 122.93}, {lat: 12.74, lng: 122.85}];

var markers = [];

for (let i = 0; i < locationsCoordinates.length; i++) {
    var marker = new google.maps.Marker({
        position: locationsCoordinates[i],
        map
    });
    
    google.maps.event.addListenerOnce(marker, ""click"", () => {
        console.log(""marker"", i, ""clicked"");
    });
    
    markers.push(marker);
}

google.maps.event.addListener(map, 'zoom_changed', function() {
    let zoom = map.getZoom();
    if (zoom < 12) {
        for (let i = 0; i < markers.length; i++) {
            markers[i].setVisible(false);
        }
    } else {
        for (let i = 0; i < markers.length; i++) {
            markers[i].setVisible(true);
        }
    }
})
",0
65121942,"class Animal {
  constructor() {
    let privateAttribute = 'default';

    this.setPrivateAttribute = newValue => {
      privateAttribute = newValue
    }

    this.getPrivateAttribute = () => privateAttribute;
  }
}

let newAnimal = new Animal()
// get variable value
newAnimal.getPrivateAttribute()

// Set new Value
newAnimal.setPrivateAttribute('New Value')
",0
65088737,"function MenuBarGame(props) {
  const [click, setClick] = useState(false);
  const dropdown = useRef();
  const btn = useRef();

  useEffect(() => {
    if (click)
      btn.current.style.marginBottom = `${dropdown.current.offsetHeight}px`;
    else btn.current.style.marginBottom = 0;
  }, [click]);

  function handleDropdown() {
    setClick(!click);
  }

  return (
    <>
      <div>
        <li>
          <button className=""gameButton"" onClick={handleDropdown} ref={btn}>
            <img src={Logo} /> {props.data.name}
          </button>
          {click ? (
            <div className=""dropdown-content"" ref={dropdown}>
              <button>* Duel</button>
              <button>* Events</button>
              <button>* Leaderboard</button>
            </div>
          ) : null}
        </li>
      </div>
    </>
  );
}
export default MenuBarGame;
",0
65128473,"this.http.get(`/update`).pipe(
  timestamp(),
  switchMap(({ timestamp, value }) =>
    concat(
      of(value),
      EMPTY.pipe(delay(timeToNextHourInMs(timestamp)))
    )
  ),
  repeat()
);

const RETRY_DELAY = 2000;
const MAX_RETRY_FOR_ONE_HTTP_CALL = 3;

const automaticRetry = () => (obs$) =>
  obs$.pipe(
    retryWhen((error$) =>
      error$.pipe(
        concatMap((error, index) =>
          iif(
            () => index >= MAX_RETRY_FOR_ONE_HTTP_CALL,
            throwError(error),
            of(error).pipe(delay(RETRY_DELAY))
          )
        )
      )
    )
  );

this.http.get(`/update`).pipe(
  automaticRetry(),
  timestamp(),
  switchMap(({ timestamp, value }) =>
    concat(
      of(value),
      EMPTY.pipe(delay(timeToNextHourInMs(timestamp)))
    )
  ),
  repeat()
);
",0
65134139,"async function matchReport(shop, arr) {
    
    const matches = await Promise.all(arr.map(async filename => {
       
        const reportData = await csv().fromFile( filename );

        if( reportData[0]['Work'].match(shop.productRegex) ){
        
            return filename;
            
        }
        
    }));
    
    return {
        'shop': shop.name,
        'reports': matches.filter( Boolean )
    };
    
}",0
65131119,"if(!/\d/.test(r.newPassword)){
    console.log('A password must contain at least one number');
}
if(!/[a-z]/.test(r.newPassword)){
    console.log('A password must contain at least lower case letter');
}
if(!/[A-Z]/.test(r.newPassword)){
    console.log('A password must contain at least upper case letter');
}
if(!/[!#=@$%&*)(_-]/.test(r.newPassword)){
    console.log('A password must contain at least one special character');
}
if(r.newPassword.length < 8){
    console.log('A password must be at least 8 characters long');
}
",0
65104863,"const Radios = () => {
      const [value, setValue] = React.useState("""");
      return (
        <div>
          <div>
            <input
              type=""radio""
              id=""huey""
              name=""drone""
              value=""huey""
              onChange={(e) => setValue(e.target.value)}
            />
            <label for=""huey"">Huey</label>
          </div>
    
          <div>
            <input
              type=""radio""
              id=""dewey""
              name=""drone""
              value=""dewey""
              onChange={(e) => setValue(e.target.value)}
            />
            <label for=""dewey"">Dewey</label>
          </div>
    
          <div>
            <input
              type=""radio""
              id=""louie""
              name=""drone""
              value=""louie""
              onChange={(e) => setValue(e.target.value)}
            />
            <label for=""louie"">Louie</label>
          </div>
    
          {value === ""huey"" ? (
            <h1>Huey</h1>
          ) : value === ""dewey"" ? (
            <h1>Dewey</h1>
          ) : value === ""louie"" ? (
            <h1>Louie</h1>
          ) : null}
        </div>
      );
    };
",0
65105661,"import { sequelize } from '../../db';
import { Model, DataTypes } from 'sequelize';

class Service extends Model {}
Service.init(
  {
    id: {
      primaryKey: true,
      type: DataTypes.INTEGER,
      autoIncrement: true,
      allowNull: false,
    },
    name: DataTypes.STRING,
    slug: DataTypes.STRING,
  },
  { sequelize },
);

class Tag extends Model {}
Tag.init(
  {
    id: {
      primaryKey: true,
      type: DataTypes.INTEGER,
      autoIncrement: true,
      allowNull: false,
    },
    name: DataTypes.STRING,
  },
  { sequelize },
);

Service.belongsToMany(Tag, { through: 'Service_Tag', as: 'tags' });
Tag.belongsToMany(Service, { through: 'Service_Tag', as: 'services' });

(async function test() {
  try {
    await sequelize.sync({ force: true });
    //seed
    await Service.bulkCreate(
      [
        { name: 'Restaurant X', slug: 'a', tags: [{ name: 'restaurant' }, { name: 'b' }] },
        { name: 'Restaurant Y', slug: 'b', tags: [{ name: 'c' }] },
        { name: 'Restaurant Z', slug: 'c', tags: [{ name: 'restaurant' }] },
      ],
      { include: [{ model: Tag, as: 'tags' }] },
    );
  } catch (error) {
    console.log(error);
  }
})();

export { Service, Tag };

import { ApolloServer, gql } from 'apollo-server';
import * as models from './model';

const typeDefs = gql`
  type Tag {
    id: ID!
    name: String!
  }

  type Service {
    id: ID!
    name: String!
    slug: String!
    tags: [Tag!]!
  }

  type Query {
    findServicesByTag(tag: String!): [Service]!
  }
`;

const resolvers = {
  Query: {
    async findServicesByTag(_, { tag }, { models }) {
      const res = await models.Service.findAll({
        where: {
          '$tags.name$': tag,
        },
        include: [
          {
            model: models.Tag,
            as: 'tags',
          },
        ],
      });
      const data = res.map((v) => v.get({ plain: true }));
      return data;
    },
  },
};

const server = new ApolloServer({
  typeDefs,
  resolvers,
  context: {
    models,
  },
});

server.listen().then(({ url }) => {
  console.log(`  Server ready at ${url}`);
});

node-sequelize-examples=# select * from ""Service"";
 id |     name     | slug 
----+--------------+------
  1 | Restaurant X | a
  2 | Restaurant Y | b
  3 | Restaurant Z | c
(3 rows)

node-sequelize-examples=# select * from ""Tag"";
 id |    name    
----+------------
  1 | restaurant
  2 | b
  3 | c
  4 | restaurant
(4 rows)
node-sequelize-examples=# select * from ""Service_Tag"";
 ServiceId | TagId 
-----------+-------
         1 |     1
         1 |     2
         2 |     3
         3 |     4
(4 rows)
",0
65100878,"export const limitVideos = (videosList, index, limit = 3) => {
    let least = index - Math.floor(limit / 2);
    
    let len = videosList.length
    if(least + limit > len)
        least = len - limit

    least = (least < 0) ? 0 : least;
    
    return videosList.slice(least, least + limit);
};
",0
65164496,"import React, { Component } from ""react"";

class App extends Component {
  constructor() {
    super();
    this.state = {
      web3: """",
      number: 0
    };
    this.getNumber = this.getNumber.bind(this);
  }

  componentDidMount() {
    setInterval(this.getNumber, 10000);
  }

  getNumber() {
    this.setState({ number: this.state.number + 1 });
  }

  render() {
    return (
      <>
        <div>Number: {this.state.number}</div>
        <span>This will update every 10 seconds</span>
      </>
    );
  }
}

export default App;
",0
65123660,".img1{
  height: 150px;
  width: 150px;
}

@keyframes fade{ /*The animation*/
  0%{
    opacity: 1;
  }
  50%{
    opacity: 0.1;
  }
  100%{
    opacity: 1;
  }
}

.t1{ /*The class which has animation*/
  animation: fade 1 2s; /*Animation will only run once*/
}",0
65089760,"let button = document.getElementById('button');
let text = document.getElementById('text');
let body = document.querySelector('body');
let number = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F'];

button.addEventListener('click', colorChange);

function colorChange() {
  let hex = '#';

  for (let i = 0; i < 6; i++) {
    const index = Math.floor(Math.random() * number.length);
    hex += number[index];
  }
  text.textContent = hex;
  body.style.backgroundColor = hex;
}
<!DOCTYPE html>

<html lang=""en"">

<body>
    <h1 id=""text"">Background Color</h1>
    <button id=""button"">Change BG-Color</button>
    <script src=""script.js""></script>
</body>

</html>",0
65105559,"<!DOCTYPE html>
<html>

<head>
  <meta charset=""utf-8"">
  <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
  <title></title>
  <meta name=""description"" content="""">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
  <!-- <link rel=""stylesheet"" href=""./css/homestyle.css""> -->
  <!-- <link rel=""stylesheet"" href=""./css/content.css""> -->
  <link rel=""stylesheet"" href=""https://use.fontawesome.com/releases/v5.15.1/css/all.css"" integrity=""sha384-vp86vTRFVJgpjF9jiIGPEEqYqlDwgyBgEF109VFjmqGmIY/Y4HV4d3Gp2irVfcrp"" crossorigin=""anonymous"">
  <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"" integrity=""sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2"" crossorigin=""anonymous"">
</head>

<body onload=""myFunction()"">
  <!-- CONTENT-->
  <section class=""content"">
    <div class=""left-content"">
      <div class=""left-two"">
        <section class=""pt-5 pb-5"">
          <div class=""container"">
            <div class=""row"">
              <div class=""col-6"">
                <h3 class=""mb-3"">Carousel cards title </h3>
              </div>
              <div class=""col-6 text-right"">
                <a class=""btn btn-dark mb-3 mr-1"" href=""#carouselExampleIndicators2"" role=""button"" data-slide=""prev"">
                  <i class=""fa fa-arrow-left""></i>
                </a>
                <a class=""btn btn-dark mb-3 "" href=""#carouselExampleIndicators2"" role=""button"" data-slide=""next"">
                  <i class=""fa fa-arrow-right""></i>
                </a>
              </div>
              <div class=""col-12"">
                <div id=""carouselExampleIndicators2"" class=""carousel slide"" data-ride=""carousel"">

                  <div class=""carousel-inner"">
                    <div class=""carousel-item active"">
                      <div id=""row-one"" class=""row"">

                        <div class=""col-md-4 mb-3"">
                          <div class=""card"">
                            <img id=""ci1"" class=""img-fluid"" alt=""100%x280"">
                            <div class=""card-body"">
                              <h4 id=""ct1"" class=""card-title"">Image 1</h4>

                            </div>

                          </div>
                        </div>
                        <div class=""col-md-4 mb-3"">
                          <div class=""card"">
                            <img id=""ci2"" class=""img-fluid"" alt=""100%x280"">
                            <div class=""card-body"">
                              <h4 id=""ct2"" class=""card-title"">Image 2</h4>

                            </div>
                          </div>
                        </div>
                        <div class=""col-md-4 mb-3"">
                          <div class=""card"">
                            <img id=""ci3"" class=""img-fluid"" alt=""100%x280"">
                            <div class=""card-body"">
                              <h4 id=""ct3"" class=""card-title"">Image 3</h4>

                            </div>
                          </div>
                        </div>

                      </div>
                    </div>
                    <div class=""carousel-item"">
                      <div class=""row"">

                        <div class=""col-md-4 mb-3"">
                          <div class=""card"">
                            <img id=""ci4"" class=""img-fluid"" alt=""100%x280"">
                            <div class=""card-body"">
                              <h4 id=""ct4"" class=""card-title"">Image 4</h4>

                            </div>

                          </div>
                        </div>
                        <div class=""col-md-4 mb-3"">
                          <div class=""card"">
                            <img id=""ci5"" class=""img-fluid"" alt=""100%x280"">
                            <div class=""card-body"">
                              <h4 id=""ct5"" class=""card-title"">Image 5</h4>

                            </div>
                          </div>
                        </div>
                        <div class=""col-md-4 mb-3"">
                          <div class=""card"">
                            <img id=""ci6"" class=""img-fluid"" alt=""100%x280"">
                            <div class=""card-body"">
                              <h4 id=""ct6"" class=""card-title"">Image 6</h4>

                            </div>
                          </div>
                        </div>

                      </div>
                    </div>
                    <div class=""carousel-item"">
                      <div class=""row"">

                        <div class=""col-md-4 mb-3"">
                          <div class=""card"">
                            <img id=""ci7"" class=""img-fluid"" alt=""100%x280"">
                            <div class=""card-body"">
                              <h4 id=""ct7"" class=""card-title"">Image 7</h4>

                            </div>

                          </div>
                        </div>
                        <div class=""col-md-4 mb-3"">
                          <div class=""card"">
                            <img id=""ci8"" class=""img-fluid"" alt=""100%x280"">
                            <div class=""card-body"">
                              <h4 id=""ct8"" class=""card-title"">Image 8</h4>

                            </div>
                          </div>
                        </div>
                        <div class=""col-md-4 mb-3"">
                          <div class=""card"">
                            <img id=""ci9"" class=""img-fluid"" alt=""100%x280"">
                            <div class=""card-body"">
                              <h4 id=""ct9"" class=""card-title"">Image 9</h4>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>
    <div class=""right-content""></div>
  </section>

  <!-- <script src=""./myscript.js"" async defer></script> -->
  <!-- <script src=""./js/s-cards.js"" async defer></script> -->
  <script src=""https://code.jquery.com/jquery-3.5.1.slim.min.js"" integrity=""sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"" crossorigin=""anonymous""></script>
  <script src=""https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"" crossorigin=""anonymous""></script>
  <script>

  function myFunction(){
      var employees = '{ ""employees"" : [{ ""title"":""John"" , ""name"":""Doe"",""src"":""https://images.unsplash.com/photo-1532763303805-529d595877c5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;s=5ee4fd5d19b40f93eadb21871757eda6"" }, { ""title"":""Anna"" , ""name"":""Smith"", ""src"":""https://images.unsplash.com/photo-1532715088550-62f09305f765?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;s=ebadb044b374504ef8e81bdec4d0e840"" }, { ""title"":""Peter"" , ""name"":""Jones"",""src"":""https://images.unsplash.com/photo-1506197603052-3cc9c3a201bd?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;s=0754ab085804ae8a3b562548e6b4aa2e"" }, { ""title"":""Peter"" , ""name"":""Jones"",""src"":""https://images.unsplash.com/photo-1532771098148-525cefe10c23?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;s=3f317c1f7a16116dec454fbc267dd8e4"" }, { ""title"":""Peter"" , ""name"":""Jones"",""src"":""https://images.unsplash.com/photo-1532715088550-62f09305f765?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;s=ebadb044b374504ef8e81bdec4d0e840"" }, { ""title"":""Peter"" , ""name"":""Jones"",""src"":""https://images.unsplash.com/photo-1506197603052-3cc9c3a201bd?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;s=0754ab085804ae8a3b562548e6b4aa2e"" }, { ""title"":""Peter"" , ""name"":""Jones"",""src"":""https://images.unsplash.com/photo-1507525428034-b723cf961d3e?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;s=ee8417f0ea2a50d53a12665820b54e23"" }, { ""title"":""Peter"" , ""name"":""Jones"",""src"":""https://images.unsplash.com/photo-1532777946373-b6783242f211?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;s=8ac55cf3a68785643998730839663129"" }, { ""title"":""Peter"" , ""name"":""Jones"",""src"":""https://images.unsplash.com/photo-1532763303805-529d595877c5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;s=5ee4fd5d19b40f93eadb21871757eda6"" } ]}';

      var obj = JSON.parse(employees);
      var j=0;
      for(var i=1;i<=9;i++){
        document.getElementById(""ct""+i).innerHTML = obj.employees[j].title;
        document.getElementById(""ci""+i).innerHTML = obj.employees[j].name;
        document.getElementById(""ci""+i).src = obj.employees[j].src;
        console.log(obj.employees[j].src);
        j++;
      }


    };

    /*---Cards Homepage---*/

  </script>
</body>

</html>
",0
65100869,"<HTML>
<head>
<style> 

  body {
  background-image: url(""a2_page_3.JPG"");
  background-size: cover;
  background-attachment: fixed;
  margin: 0;
  padding: 0;
}
</style>
<script>
  function showImage() {
    document.getElementById(""stipends"").style.display="""";
  }
</script>
</head>
<body>
  <img id=""stipends"" src=""https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fgetwallpapers.com%2Fwallpaper%2Ffull%2Ff%2F3%2Fa%2F807159-download-funny-cats-wallpapers-1920x1200-meizu.jpg&f=1&nofb=1"" style=""display:none;""/>
  <input type=button value=""Produce Stipends"" onclick=""showImage()""/>
</body>
</html>",0
65143445,"<div class=""flex-container"">
  <div class=""download"">
    <span>Download</span>
    // your icon here
  </div>

 <div class=""print"">
    <span>Print</span>
    // your icon here
 </div>
</div>

flex-container {
    display: flex;
    }

    .download, 
    .print {
    border: 2px solid blue;
    display: inline-block;
    align-items: center;
    }
    .print{
      margin-left:-6px;
    }
",0
65115019,"$('.wf-btn').click(function() {
  $('.wf-btn').removeClass('active');  // we remove class for all btn
  $(this).addClass('active');  // we add class to the current btn
  
  // we set all img src btn with _blue.png to _grey.png
  $('.wf-btn').each(function() { 
    var SRCLoop = $(this).find('img').attr('src');
    
    if (SRCLoop.substr(SRCLoop.length-9) == '_blue.png') {
     var newSRCLoop = SRCLoop.replace('_blue.png','');
     $(this).find('img').attr('src', newSRCLoop + '_grey.png');
    }
  });

  var btnSRC = $(this).find('img').attr('src'); // we get the src of the current img btn
  
  // we change src img btn
  if (btnSRC.substr(btnSRC.length-9) != '_blue.png') {
   var newSRC = btnSRC.replace('_grey.png','');
   $(this).find('img').attr('src', newSRC + '_blue.png'); 
  } else {
   var newSRC = btnSRC.replace('_blue.png','');
   $(this).find('img').attr('src', newSRC + '_grey.png');   
  }
})
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<div id=""worldfilter"">
    <button class=""wf-btn active""><img src=""world_blue.png""> Welt </button>
    <button class=""wf-btn""><img src=""europe_grey.png""></button>
    <button class=""wf-btn""><img src=""north_america_grey.png""></button>
    <button class=""wf-btn""><img src=""south_america_grey.png""></button>
    <button class=""wf-btn""><img src=""africa_grey.png""></button>
    <button class=""wf-btn""><img src=""orient_grey.png""></button>
    <button class=""wf-btn""><img src=""asia_grey.png""></button>
    <button class=""wf-btn""><img src=""oceania_grey.png""></button>
  </div>",0
65122056,"const urls = [
  'https://localhost:8000/api/users/available/23342?name=john',
  'https://example.com/api/users/available/23342?name=john',
  'https://example.com/api/users/available/23342',
  'https://example.com/api/users/available?name=john',
];
const regex = /^[a-z]+:\/\/[^:\/]+(:[0-9]+)?\/(.*?)(\/[0-9]+)?(\?.*)?$/;
urls.forEach((url) => {
  var result = url.replace(regex, '$2');
  console.log(url + ' ==> ' + result);
});",0
65133016,"editUser.addEventListener('click', retrieveAndSendUpdate);

function retriveAndSendUpdate() {
  const username = document.getElementById('username');
  const phone = document.getElementById('editPhone');
  const city = document.getElementById('newCity');
  const zip = document.getElementById('newZip');
  const address = document.getElementById('newAddress');
  const email = document.getElementById('newEmail');
  const password = document.getElementById('newPassword');

  var data = {
    username: username.value,
    phone: phone.value,
    city: city.value,
    zip: zip.value,
    address: address.value,
    email: email.value,
    password: password.value,
  }

  sendUpdate(data);
}

function sendUpdate(data) {
  const xhr = new XMLHttpRequest();
  xhr.responseType = ""json""
  xhr.addEventListener(""readystatechange"", processResponse);
  xhr.open(""PUT"", ""http://localhost:2500/editProfile"", true);
  xhr.setRequestHeader(""Content-Type"", ""application/json"");
  xhr.send(JSON.stringify(data));
}

function processResponse(e) {
  if (e.readyState === 4) {
    var allUsers = e.response;
    for (i = 0; i < allUsers.length; i++) {
      if (allUsers[i].username === username) {
        allUsers.splice(i, 1);
        console.log(allUsers)
      }
    }
  }
}
",0
65092492,"let mountains = [
  { name: ""Monte Falco"", height: 1658, place: ""Parco Foreste Casentinesi"" },
  { name: ""Monte Falterona"", height: 1654, place: ""Parco Foreste Casentinesi"" },
  { name: ""Poggio Scali"", height: 1520, place: ""Parco Foreste Casentinesi"" },
  { name: ""Pratomagno"", height: 1592, place: ""Parco Foreste Casentinesi"" },
  { name: ""Monte Amiata"", height: 1738, place: ""Siena"" }
];

function generateTableHead(table, data) {
  let thead = table.createTHead();
  let row = thead.insertRow();
  for (let key of data) {
    let th = document.createElement(""th"");
    let text = document.createTextNode(key);
    th.appendChild(text);
    row.appendChild(th);
  }
}

function generateTable(table, data) {
  for (let element of data) {
    let row = table.insertRow();
    for (key in element) {
      let cell = row.insertCell();
      let text = document.createTextNode(element[key]);
      cell.appendChild(text);
    }
  }
}

let table = document.querySelector(""table"");
let data = Object.keys(mountains[0]);
generateTableHead(table, data);
generateTable(table, mountains);
",0
65087435,"add_filter('woocommerce_coupon_get_discount_amount', 'woocommerce_discount_from_the_original_price', 10, 5 );

function woocommerce_discount_from_the_original_price( $discount, $discounting_amount, $cart_item, $single, $coupon ) {

  if ($coupon->discount_type == 'percent' && $coupon->code == 'fifty') {

    $discount_percentage = $coupon->amount / 100;
    $item                = wc_get_product($cart_item['product_id']);

    if ($item) {
      if ( $item->is_type( 'simple' ) ) {
        $sale_price    = $item->sale_price;
        $regular_price = $item->regular_price;
        if ( ($sale_price && $regular_price) && ($sale_price !==  $regular_price) ) {
          $discount_from_regular_price = $regular_price * $discount_percentage; 
          $discount = $discounting_amount - ($discount_from_regular_price * $cart_item['quantity']); 
        }

      } elseif ( $item->is_type( 'variable' ) ) {
        $variable_product = new WC_Product_Variation( $cart_item[""variation_id""] );
        $sale_price    = $variable_product->sale_price;
        $regular_price = $variable_product->regular_price;
        
        if ( ($sale_price && $regular_price) && ($sale_price !==  $regular_price) ) {
          $discount_from_regular_price = $regular_price * $discount_percentage;
          $discount = $discounting_amount - ($discount_from_regular_price * $cart_item['quantity']);
        }

      }
    }

  }
  return $discount;
}
",0
65092502,"function checkUser() {
  // userField.setAttribute('class', 'user');
  let userText = userField.value.substring(0, userField.value.length);
  let expr = userText.match(regEx);
  if (expr && userText.length > 0) {
    userField.setAttribute('class', 'user test');
  } else {
    userField.setAttribute('class', 'user');
  }
}
",0
65100069,"var bannerImages= $("".slider_image"");
var position= 0;
var numberOfImages= bannerImages.length;
function NextImage(){
    if(position+1 >= brojSlika){
        bannerImages.eq(position).css('display', ""none"");
        position= 0;
        bannerImages.eq(position).css('display', ""block"");
    }
    else{
        bannerImages.eq(position).css('display', ""none"");
        position+= 1;
        bannerImages.eq(position).css('display', ""block"");
    }
}
",0
65130943,"  var ulList = document.getElementsByTagName(""li"");
  var i;
  for (i = 0; i < ulList.length; i++) {
    var span = document.createElement(""span"");
    var xBtn = document.createTextNode(""\u00D7"");
    span.className = ""Done"";
    span.appendChild(xBtn);

    ulList[i].appendChild(span);
  }

//Adds li element with input from a textbox
function btnFunction() {
  var cLi = document.createElement(""li"");
  var inpList = document.getElementById(""inputForList"").value;
  var txtNode = document.createTextNode(inpList);
  cLi.appendChild(txtNode);

  //Check to see if anything is filled in, otherwise send message. And 'appends' it to the list item
  if (inpList === '') {
    alert(""Voeg wat toe!"");
  } else {
    document.getElementById(""ulSection"").appendChild(cLi);
    var ulList = document.getElementsByTagName(""li"");
      var span = document.createElement(""span"");
      var xBtn = document.createTextNode(""\u00D7"");
      span.className = ""Done"";
      span.appendChild(xBtn);
      ulList[ulList.length-1].appendChild(span);
    }
    // Reset value of Textbox to """"
    document.getElementById(""inputForList"").value = """";
  }

  //Sets a 'x' on every element.
  var ulList = document.getElementsByTagName(""li"");
  var i;
  for (i = 0; i < ulList.length; i++) {
    var span = document.createElement(""span"");
    var xBtn = document.createTextNode(""\u00D7"");
    span.className = ""Done"";
    span.appendChild(xBtn);

    ulList[i].appendChild(span);
  }
<!DOCTYPE html>

<head>
  <title>To Do App!</title>
  <link rel=""stylesheet"" type=""text/css"" href=""CSS/stylesheet.css"">

</head>

<body>
  <div id=""h1Div"">
    <h1> To-do app! </h1>
    <input type=""text"" id=""inputForList"">
    <input type=""button"" id=""btnInput"" value=""Add me!"" onclick=""btnFunction()"">
  </div>

  <ul id=""ulSection"">
    <li>Test 1</li>
    <li>Test 2</li>
  </ul>
  <script src=""Scripts/javascript.js""></script>
</body>",0
65146263,"nav {
  overflow: hidden;
}

.nav-links {
  opacity: 1; /* only to show when class is added */
  background-color: orange;
  margin: 0;
  padding: 0;
  list-style: none;
  transition: transform 1s;
  transform: translateY(-100%);
}

.nav-links.is-active {
  opacity: 1; /* only to show when class is added */
  transform: translateY(0);
}
<header>
  <button class=""hamburger hamburger--squeeze"" type=""button"">
    <span class=""hamburger-box"">
        <span class=""hamburger-inner"">hamburger</span>
    </span>
  </button>
  <nav>
    <ul class=""nav-links"">
      <li><a href=""index.html"">home</a></li>
      <li><a href=""shop.html"">shop</a></li>
      <li><a href=""sport.html"">sport</a></li>
      <li><a href=""read.html"">read</a></li>
      <li><a href=""about.html"">about</a></li>
    </ul>
  </nav>
</header>",0
65147290,"case SELECT_VEHICLE.REPLACE:
      return {
        ...state,
        vehicleArray: state.vehicleArray.map((vehicle) => {
          if (vehicle.name === action.previousVehicleName) {
            // this mutates the existing object - don't do this!
            vehicle[""total_no""] += 1;
            vehicle.selected = false;
          } else if (vehicle.name === action.newVehicleName) {
            vehicle[""total_no""] -= 1;
            vehicle.selected = true;
          }
          return vehicle;
        })
      };
",0
65124296,"var boo = document.getElementById(""boo"");
function move() {
  boo.scrollLeft += 1;
  if(boo.scrollLeft >= (1600 - boo.offsetWidth)){
    clearInterval(interval);
    interval = setInterval(moveReverse,5);
  }
}
function moveReverse() {
  boo.scrollLeft -= 1;
  if(boo.scrollLeft <= 0){
    clearInterval(interval);
  }
}
interval = setInterval(move, 5)",0
65125724," const http = new XMLHttpRequest();
 http.open(""post"", ""https://example.com/auth/login"");
 http.setRequestHeader(""Content-type"", ""application/json"");
 http.onreadystatechange = function () {  // change this line
  if (http.readyState === 4 && http.status === 200) {
    console.log(http.responseText);
  }
  else {
    console.error(""Error in submitting or receiving response."");
  }
};
http.send(JSON.stringify({ username, password }));
",0
65094871,"var savestart = false;   
$(""#jqGrid"").jqGrid({
    beforeSubmitCell : function( id, name, val, irow,icol) {
        savestart = true;
    },
    afterSubmitCell : function() {
        savestart = false; 
        return [true,""""];
    },
    ....
 });
",0
65121827,"const x = {
        titleName: ""Indorction"",
        heading: 'Welcome to JavaScript',
        iconName: faDotCircle,
        description: [
            `
            Do we even need to introduce <p>HTML element</p>? It’s one of the most popular programming 
            languages on the planet!
            Ever visited a website that made you think…""Hey, this website is really cool and
            `
        ],
    },

",0
65099364,"function minX(integers) {
  let sum = 0;
  let min = 0;
  for (const integer of integers) {
    sum += integer;
    if (sum < min) min = sum;
  }
  return 1 - min;
}

console.log(minX([-2,3,1,5]));
console.log(minX([3,-2,-4,7]));",0
65094629,"    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('title', TextType::class, [
                'row_attr' => [
                    'class' => 'form-group'
                ],
                'attr' => [
                    'class' => 'form-control'
                ],
                'required' => false
            ])
            ->add('url', UrlType::class, [
                'row_attr' => [
                    'class' => 'form-group'
                ],
                'attr' => [
                    'class' => 'form-control'
                ],
                'required' => false
            ])
            ->add('file', FileType::class, [
                'row_attr' => [
                    'class' => 'form-group'
                ],
                'attr' => [
                    'class' => 'form-control'
                ]
            ]);
    }

{% block body %}
    <div class=""row"">
        <div class=""col-lg-12"">
            <div class=""card card-default"">
                <div class=""card-body"">
                    {{ form_start(form) }}
                        <div class=""slides"" data-prototype=""{{ form_widget(form.slides.vars.prototype)|e('html_attr') }}"">
                            {% for slide in form.slides %}
                                <div class=""slide"">
                                    {{ form_row(slide.title) }}
                                    {{ form_row(slide.url) }}
                                    {{ form_row(slide.file) }}
                                </div>
                            {% endfor %}
                        </div>

                    <button type=""button"" class=""btn btn-success add_item_link"" data-collection-holder-class=""slides"">+</button>
                    <button type=""button"" class=""btn btn-danger remove_item_link"" data-collection-holder-class=""slides"">-</button>

                    <div class=""form-footer pt-4 pt-5 mt-4 border-top"">
                        <button type=""submit"" class=""btn btn-primary btn-default"">Save</button>
                    </div>

                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
{% endblock %}
",0
65101664,"function apiCreate(url, product) {
      try {
        fetch(url, {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(product)
        })
        .then(response => response.json())
        .then(data => console.log(data))
        .catch(error => console.log(error))  
      } catch (err) {
        console.log(err)
      }
}
",0
65084042,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>

    <link rel=""preconnect"" href=""https://fonts.gstatic.com"">
    <link href=""https://fonts.googleapis.com/css2?family=Work+Sans&display=swap"" rel=""stylesheet"">

    <style>
        body,
        button {
            font-family: 'Work Sans', sans-serif;
        }

        /* The Modal (background) */
        .modal {
            display: none;
            /* Hidden by default */
            position: fixed;
            /* Stay in place */
            z-index: 1;
            /* Sit on top */
            padding-top: 7px;
            /* Location of the box */
            left: 0;
            top: 0;
            width: 100%;
            /* Full width */
            height: 100%;
            /* Full height */
            overflow: auto;
            /* Enable scroll if needed */
            background-color: rgb(0, 0, 0);
            /* Fallback color */
            background-color: rgba(0, 0, 0, 0.4);
            /* Black w/ opacity */
        }

        /* Modal Content */
        .modal-content {
            position: relative;
            background-color: #fefefe;
            margin: auto;
            padding: 0;
            border: 1px solid #888;
            width: 80%;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            -webkit-animation-name: animatetop;
            -webkit-animation-duration: 0.4s;
            animation-name: animatetop;
            animation-duration: 0.4s
        }

        /* Add Animation */
        @-webkit-keyframes animatetop {
            from {
                top: -300px;
                opacity: 0
            }

            to {
                top: 0;
                opacity: 1
            }
        }

        @keyframes animatetop {
            from {
                top: -300px;
                opacity: 0
            }

            to {
                top: 0;
                opacity: 1
            }
        }

        /* The Close Button */
        .close {
            color: black;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

        .modal-header {
            padding: 2px 16px;
            height: 30px;
            background-color: white;
            color: white;
        }

        .modal-body {
            padding: 2px 16px;
        }

        .modal-footer {
            padding: 2px 16px;
            background-color: #004F9E;
            color: white;
        }

        div.parent {
            text-align: center;
        }

        ul {
            display: inline-block;
            text-align: left;
        }

        button {
            background-color: #004F9E;
            /* Green */
            border: 2px solid #004F9E;
            border-radius: 5px;
            color: white;
            padding: 5px 10px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
        }

        button {
            transition-duration: 0.4s;
        }

        button:hover {
            background-color: white;
            color: black;
            border: 2px solid #004F9E;
        }

        /* #myBtn {
            display: flex;
            justify-content: center;
            border: none;
        } */
    </style>

</head>
<body>

    <h2 style='text-align:center'>Titulo</h2>

    <div class=""parent"">
        <ul>
            <li>order1.</li>

            <li>order2.</li>

            <li>orde3.</li>
        </ul>
    </div>

    <!-- Trigger/Open The Modal -->
    <div class=""parent"">
        <button id=""myBtn"">Ver Video</button>
    </div>

    <!-- The Modal -->
    <div id=""myModal"" class=""modal"">

        <!-- Modal content -->
        <div class=""modal-content"">
            <div class=""modal-body"">
                <span class=""close"">&times;</span>
                <div style='text-align:center'>
                    <video id=""myVideo"" width=""100%"" height=""95%"" controls>
                        <source src=""https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4""
                            type=""video/mp4"">
                        Your browser does not support the video tag.
                    </video>
                </div>
            </div>


        </div>
    </div>

    </div>

    <script>
        // Get the modal
        var modal = document.getElementById(""myModal"");

        // Get the button that opens the modal
        var btn = document.getElementById(""myBtn"");

        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName(""close"")[0];

        // When the user clicks the button, open the modal 
        btn.onclick = function () {
            modal.style.display = ""block""
            document.getElementById('myVideo').play(); // <-- PLAY
        }

        // When the user clicks on <span> (x), close the modal
        span.onclick = function () {
            modal.style.display = ""none"";
            document.getElementById('myVideo').pause(); // <-- PAUSE
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = ""none"";
                document.getElementById('myVideo').pause(); // <-- PAUSE
            }
        }
    </script>

</body>
</html>",0
65108907,"if (current) {
    const currentIndex = progress.indexOf(current);
    if (currentIndex < progress.length) {
      next = progress[currentIndex+1];
    }
    current.classList.remove('active');
    current.classList.add('passed');
    
    if (!next) {
     $('.progress-container div').addClass('passed');
      return;
   }
  } 
",0
65089236,"<template>
  <div id=""app"">
    <nav>navbar</nav>
    <main id=""listen"">main</main>
  </div>
</template>

<script>
export default {
  name: ""App"",
  created() {
    document.addEventListener(""scroll"", this.listenScroll);
  },
  destroyed() { // remember to remove the listener when destroy the components
    document.removeEventListener(""scroll"", this.listenScroll);
  },
  methods: {
    listenScroll() {
      let myScroll = document.querySelector(""#listen"").getBoundingClientRect()
        .top;
      console.log(myScroll);
    },
  },
};
</script>

<style>
nav {
  height: 100px;
}
main {
  height: 700px;
}
</style>

",0
65139459,"<script language=""js""><![CDATA[var log = mc.getServiceLog(); 
            log.info(""Logging inside Script Mediator""); 

            var startDate = '2020-12-01';
            var endDate = '2020-12-31';   
            var nextStartDate=addNextDay(startDate);
            mc.setProperty(""nextStartDate"", nextStartDate);
            var nextEndDate=addNextDay(endDate);
             mc.setProperty(""nextEndDate"", nextEndDate);
            log.info(""startDate:  "" + startDate);
            log.info(""endDate:  "" + endDate);
            function addNextDay(dateString) {
            var  simpleDateFormat = Packages.java.text.SimpleDateFormat;
            var fomatter = new simpleDateFormat(""yyyy-MM-dd"");
            var currentDate = dateString;
            
            var calendar = Packages.java.util.Calendar.getInstance();
            calendar.setTime(fomatter.parse(currentDate));
            var daysToAdd = mc.getProperty(""days"");
            calendar.add(Packages.java.util.Calendar.DATE, 1);
            var destDate = fomatter.format(calendar.getTime()); 
            log.info(""Destination date : "" + destDate );
            return destDate;
            }]]></script>",0
65122950,"let days = {
    1: 'Monday',
    2: 'Tuesday',
    3: 'Wednesday',
    4: 'Thursday',
    5: 'Friday',
    6: 'Saturday',
    7: 'Sunday'
}

function retunDay(params) {
    if (params < 1 || params > 7) {
        return null;
    }
    return days[params];
}
",0
65112383,"  const Cinemas = 
      [ { branchName: ""City Cinema - New York""
        , movies: 
          [ { id: 1, shows: 
              [ { index: 1, datetime: ""8 Nov, Sun - 9:00am"",   house: 3 } 
              , { index: 2, datetime: ""10 Nov, Tue - 11:00am"", house: 3 } 
              ] 
            } 
          , { id: 2, shows: 
              [ { index: 3, datetime: ""9 Nov, Mon - 2:00pm"",   house: 1 } 
          ] } ] 
        } 
      , { branchName: ""City Cinema - Los Angeles""
        , movies: 
          [ { id: 2, shows: 
              [ { index: 4, datetime: ""11 Nov, Wed - 9:00am"",  house: 4 } 
              , { index: 5, datetime: ""11 Nov, Wed - 11:00am"", house: 2 } 
          ] } ] 
        } 
      , { branchName: ""City Cinema - Wisconsin""
        , movies:
          [ { id: 1, shows: 
              [ { index: 6, datetime: ""11 Nov, Wed - 9:00am"", house: 4} 
      ] } ] } ] 


  const Movies = 
    [ { id        : 1
      , type      : ""now""
      , thumbnail : ""../xx.png""
      , src       : ""../yy.mp4""
      , name      : ""Casablanca""
      , cast      : ""Humphrey Bogart, Ingrid Bergmen""
      , director  : ""Michael Curtiz""
      , duration  : 120
      } 
    , { id        : 2
      , type      : ""now""
      , thumbnail : ""../xx.png""
      , src       : ""../xx.mp4""
      , name      : ""Chocalate""
      , cast      : ""Christiano Roland, Wayne Beckman""
      , director  : ""Alex Curtis""
      , duration  : 110
      } 
    , { id        : 3
      , type      : ""now""
      , thumbnail : ""../xx.png""
      , src       : ""../xx.mp4""
      , name      : ""Wildlife""
      , cast      : ""Marcus Randford""
      , director  : ""David De Geek""
      , duration  : 100
      } 
    , { id        : 4
      , type      : ""upcoming""
      , thumbnail : ""../xx.png""
      , src       : ""../xx.mp4""
      , name      : ""Barbecue""
      , cast      : ""Taylor Watson""
      , director  : ""Rolando Broom""
      , duration  : 105
      } 
    , { id        : 5
      , type      : ""upcoming""
      , thumbnail : ""../xx.png""
      , src       : ""../xx.mp4""
      , name      : ""BigBuck""
      , cast      : ""Mark Hughes""
      , director  : ""Tim Carlton""
      , duration  : 115
      } 
    , { id        : 6               // <--
      , type      : ""upcoming""
      , thumbnail : ""../xx.png""     // <--
      , src       : ""../xx.mp4""
      , name      : ""Nature""
      , cast      : ""Benjamin Crook""
      , director  : ""Memphis Delan""
      , duration  : 100
      } 
    ] 

const DomParser  = new DOMParser()
  ,   cinemaSlct = document.getElementById(""cinemaSelect"")
  ,   div_lm     = document.querySelector('div#lm')

Cinemas.forEach((cinema,index) =>
  { cinemaSlct.add( new Option( cinema.branchName, index )) });

cinemaSlct.onchange = () =>
  {
  div_lm.innerHTML = """"
  Cinemas[cinemaSlct.value].movies.forEach(movieC=>
    {
    movieC.shows.forEach(show=>
      {
      let movie = Movies.find(x=>x.id===show.index)
      if (!movie) throw 'no movie reference' 

      let newSection = `
  <section>
    <hr>
    <img src=""${movie.thumbnail}"" alt=""${movie.name}"">
    <p>name : ${movie.name} <br>
      cast : ${movie.cast} <br>
      director : ${movie.director} </p>
    <hr>
    <p> datetime:${show.datetime} <br>   house:${show.house} </p>
    <hr>
  </section>`;
      div_lm.appendChild( (DomParser.parseFromString( newSection, 'text/html')).body.firstChild )
      })
    })
  }
<div id=""Cinema"">
  <form id=""cin"" method=""get"" action="""">
    <fieldset>
      <legend>Cinema</legend>
      <select id=""cinemaSelect"">
        <option value="""" selected disabled> select one</option>
      </select>
    </fieldset>
  </form>
</div>
<div id=""lm""></div>",0
65104369,"const Options = this.props.giftDetails.variations.map((v) => {
      return (
        <React.Fragment key={v.variation_id}>
          <input
            type=""radio""
            value={v.variation_id}
            checked={v.variation_id == this.state.giftCard}
            onChange={(e) => {
              this.setState({
                giftCard: e.target.value,
                giftDescription: v.reward_description,
              });
            }}
          />
          {v.reward_text}
        </React.Fragment>
      );
    });

    return (
      <React.Fragment>
        {Options}
        <p>{this.state. giftDescription}</p>
      </React.Fragment>
    );

class Hello extends React.Component {
  constructor() {
    super();
    this.state = { giftCard: null, giftDescription: null };
  }

  render() {
    console.log(""this.state"", this.state);
    const variants = {
      variations: [
        {
          variation_id: 1,
          variation_name: ""210kr"",
          price: ""210"",
          reward_text: ""200kr. Price"",
          reward_description:
            ""Med et gavekort til Sendentanke.dk kan du vælge mellem gavekort til hundredevis af butikker og oplevelser ét sted."",
        },
        {
          variation_id: 2,
          variation_name: ""400kro"",
          price: ""400"",
          reward_text: ""400 Price"",
          reward_description: ""Earn a reward"",
        },
      ],
    };

    const Options = variants.variations.map((v) => {
      return (
        <React.Fragment>
          <input
            key={v.variation_id}
            type=""radio""
            value={v.variation_id}
            checked={v.variation_id == this.state.giftCard}
            onChange={(e) => {
              this.setState({
                giftCard: e.target.value,
                giftDescription: v.reward_description,
              });
            }}
          />
          {v.reward_text}
        </React.Fragment>
      );
    });

    return (
      <React.Fragment>
        {Options}
        <p>{this.state.giftDescription}</p>
      </React.Fragment>
    );
  }
}

ReactDOM.render(<Hello name=""World"" />, document.getElementById(""container""));",0
65088567,"    var m3 = document.getElementById('m3')
    var m1 = document.getElementById('m1')
    var m2 = document.getElementById('m2')
        
    var m1Top = 300
    var m1left =50

    var m1TopTemp
    var m1leftTemp

    var m1Verif = false
    var m2Verif = false
    var m3Verif = false

    
    var m2Top = 100
    var m2Transform =-30
    var m2left =150

    var m3Top = 100
    var m3left =450

    var hoverFrame
    var leaveFrame
    function hover() {
        clearInterval(leaveFrame);
        m1Verif=false
        m2Verif=false
        m3Verif=false
        hoverFrame = setInterval(frame, 5);
    }
    function leave() {
        clearInterval(hoverFrame);
        m1Verif=true
        m2Verif=true
        m3Verif=true
        leaveFrame = setInterval(frameReverse, 5);
    }
      function frame() {
        if(m1Top == 100 && m1left==250){
            m1Verif = true
        }else{
            if(m1left!=250){m1left++;}  
            if(m1Top!=100){m1Top--;}  
            m1.style.left = m1left + 'px';
            m1.style.top = m1Top + 'px'; 
        }

        if(m2Top == 100 && m2left == 550 && m2Transform == 0){
            m2Verif=true
        }else{
            if(m2left!=550){m2left++;}  
            if(m2Transform!=0){m2Transform++;} 
            m2.style.left = m2left + 'px';
            m2.style.transform = 'rotate('+m2Transform+'deg)'; 
        }

        if(m3Top == 100 && m3left == 895){
            m3Verif=true
        }else{
            if(m3left!=8950){m3left++;} 
            m3.style.left = m3left + 'px'; 
        }
        if(m1Verif==true && m2Verif == true && m3Verif == true){clearInterval(hoverFrame);}
    }
    
    function frameReverse() {
        if(m1Top == 300 && m1left==50){
            m1Verif = false
        }else{
            if(m1left!=50){m1left--;}  
            if(m1Top!=300){m1Top++;}  
            m1.style.left = m1left + 'px';
            m1.style.top = m1Top + 'px'; 
        }
        if(m2Top == 100 && m2left == 150 && m2Transform == -30){
            m2Verif=false
        }else{
            if(m2left!=150){m2left--;}  
            if(m2Transform!=-30){m2Transform--;} 
            m2.style.left = m2left + 'px';
            m2.style.transform = 'rotate('+m2Transform+'deg)'; 
        }
        if(m3Top == 100 && m3left == 450){
            m3Verif = false
        }else{
            if(m3left!=450){m3left--;} 
            m3.style.left = m3left + 'px'; 
        }
        if(m1Verif == false && m2Verif ==false && m3Verif == false){clearInterval(leaveFrame);}
    }
   .milktea {
      background: url(""https://my-test-11.slatic.net/p/89d20ca95994d8a252a6430c7b27e6fc.jpg"") no-repeat center center;
      display: table;
      height: auto;
      position: relative;
      width: 100%;
      background-size: cover;
      padding: 0;
      margin: 0;
    }

    .mtitle {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-size: xx-large;
        font-family: brandon-grotesque, sans-serif;
        font-weight: bold;
        font-style: normal;
    }
    .mtitle:hover {
        color:rgba(30, 144, 255,0.7);
        cursor: pointer;
    }
    .m1 {
      position: absolute;
      width: 150px;
      height: auto;
      top: 300px;
      left: 50px;
    }

    .m2 {
      position: absolute;
      width: 250px;
      height: auto;
      top: 100px;
      left: 150px;
      transform: rotate(-30deg);
    }

    .m3 {
      position: absolute;
      width: 250px;
      height: auto;
      top: 100px;
      left: 450px;
    }
    .m3A{
        background-color: red;
        animation-name: example;
        animation-duration: 4s;
    }
    @keyframes m3{
        100%{
            top:102px;
            left: 30%;
        }
    }",0
65121336,"$(function() { // on page load
  $('#removeactive').on('click', function(e) {
    e.preventDefault();
    var message = $(this).data('confirm');

    //pop up
    swal({
        title: ""Are you sure ??"",
        text: message,
        icon: ""warning"",
        buttons: true,
        dangerMode: true,
      })
      .then(function(isConfirm) {
        console.log(""confirmed?"", isConfirm);
        if (isConfirm) console.log(""deleting""); // here you delete
        else console.log(""cancelled""); // here you do whatever or nothing
        // You cannot return anything  
      });
  });
})",0
65104042,"var customers=[""customer1"",""customer2""];
var currentIndex=0;
private function main()
{
  if(customers[currentIndex]){
   function1().done(function(data) {
     console.log(""a"");
      function2().done(function(data) {
        console.log(""b"");
        function3().done(function(data) {
          console.log(""c"");
           currentIndex++; 
           main();
        });
      });
   });
   
  }
}
private function1()
{
  return  $.ajax({
                type: ""POST"",
                url: url1,
                data: {},
                dataType: 'JSON'
            });
}
private function2()
{
  return  $.ajax({
                type: ""POST"",
                url: url2,
                data: {},
                dataType: 'JSON'
            });
}
private function3()
{
  return  $.ajax({
                type: ""POST"",
                url: url3,
                data: {},
                dataType: 'JSON'
            });
}
",0
65112870,"class App extends Component {
  state = {
    data: [{ id: 1, type: ""A"" }, { id: 1, type: ""B"" }, { id: 1, type: ""C"" }]
  };
  handleChange = e => {
    console.log(e.target.value);
  };
  render() {
    return (
      <div>
        <select className=""form-control"" onChange={this.handleChange}>
          <option>Select data</option>
          {this.state.data.map((i, h) => (
            <option key={h} value={i.type}>
              {i.type}
            </option>
          ))}
        </select>
      </div>
    );
  }
}
",0
65158522,"//when tr is clicked
$(document).on(""click"", ""#report tr.odd"", function() {
  //get month 
  var mnth = $(this).find(""td:eq(0)"").text().trim().split(""-"")[1]
  //loop thorough tr to find same month tr
  $(""tbody >  tr"").not(this).each(function() {
    var mnth_other = $(this).find(""td:eq(0)"").text().trim().split(""-"")[1]
    if (mnth == mnth_other) {
      $(this).toggle();
      $(this).find("".arrow"").toggleClass(""up"");
    }

  });
});
var date_current;
//loop through tr
$(""tbody >  tr"").each(function() {
  //get month
  var dates = $(this).find(""td:eq(0)"").text().trim().split(""-"")[1];
  //check if not equal
  if (date_current != dates) {
    $(this).addClass(""odd"");
    $(this).find("".arrow"").addClass(""down"");
    date_current = dates;
  } else {
    //hide other tr
    $(this).hide()
  }

})
.up {
  transform: rotate(-135deg);
  -webkit-transform: rotate(-135deg);
}

.down {
  transform: rotate(45deg);
  -webkit-transform: rotate(45deg);
}

.arrow {
  border: solid black;
  border-width: 0 3px 3px 0;
  display: inline-block;
  padding: 3px;
}
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<table id=""report"" class=""table table-striped table-bordered table-sm text-center"" style=""width:35%; margin:auto;"">

  <thead class=""text-center table-info"">
    <tr>
      <th>Date</th>
      <th>Calls</th>
      <th>Sales</th>
    </tr>
  </thead>
  <tbody>

    <tr class=""text-center"">
      <td id=""id"">
        27-11-2020
      </td>
      <td id=""database"">
        22
      </td>
      <td id=""total"">
        1
      </td>
      <td>
        <div class=""arrow""></div>
      </td>
    </tr>
    <tr class=""text-center"">
      <td id=""id"">
        27-11-2020
      </td>
      <td id=""database"">
        22
      </td>
      <td id=""total"">
        1
      </td>
      <td>
        <div class=""arrow""></div>
      </td>
    </tr>
    <tr class=""text-center"">
      <td id=""id"">
        21-11-2020
      </td>
      <td id=""database"">
        22
      </td>
      <td id=""total"">
        12
      </td>
      <td>
        <div class=""arrow""></div>
      </td>
    </tr>
    <tr class=""text-center"">
      <td id=""id"">
        20-12-2020
      </td>
      <td id=""database"">
        222
      </td>
      <td id=""total"">
        21
      </td>
      <td>
        <div class=""arrow""></div>
      </td>
    </tr>
    <tr class=""text-center"">
      <td id=""id"">
        27-12-2020
      </td>
      <td id=""database"">
        22
      </td>
      <td id=""total"">
        1
      </td>
      <td>
        <div class=""arrow""></div>
      </td>
    </tr>
    <tr class=""text-center"">
      <td id=""id"">
        27-12-2020
      </td>
      <td id=""database"">
        22
      </td>
      <td id=""total"">
        1
      </td>
      <td>
        <div class=""arrow""></div>
      </td>
    </tr>

  </tbody>
</table>",0
65136044,"var c = document.getElementById(""mycanvas"").getContext(""2d"");
c.fillStyle = ""blue"";
c.fillRect (0,0,500,350);

function square(x,y) {
    var leftX = (x - 10); // x = 30
    var leftY = (y - 10); // y = 10
    var width = (x + 10); // width = 50
    var height = (y + 10); // height = 30
    c.fillStyle = ""red"";
    c.fillRect (leftX,leftY,width,height);
}

square(40,20);
var c = document.getElementById(""mycanvas"").getContext(""2d"");
c.fillStyle = ""blue"";
c.fillRect (0,0,500,350);

function square(x,y) {
    var leftX = (x - 10); // x = 30
    var leftY = (y - 10); // y = 10
    c.fillStyle = ""red"";
    c.fillRect (leftX,leftY,20,20);
}

square(40,20);",0
65164202,"function onEdit(e) {

  const initials = {
    ""email1"":""initials1"",
    ""email2"":""initials2"",
    ""email3"":""initials3""
  };
  
  var sheet = e.source.getActiveSheet();
  var i = ['Sheet 1', 'Sheet 2'].indexOf(sheet.getName());
  if (e.range.getValue()!='' && i > -1 && e.range.columnStart === 1) {
    e.range.offset(0,4).setValue(Utilities.formatDate(new Date(), ""GMT+8"", ""MM/dd/yyyy""));
    e.range.offset(0,6).setValue(initials[Session.getEffectiveUser().getEmail()]); 
  }
}
",0
65112460,"import React, { useEffect, useState } from 'react';
import {
  ActivityIndicator,
  FlatList,
  StyleSheet,
  View,
  Text,
  Button,
  TouchableOpacity,
  TextInput,
  Clipboard,
} from 'react-native';

const App = () => {
  const [isLoading, setLoading] = useState(true);
  const [data, setData] = useState([]);
  const [refetch, setRefetch] = useState(false);
  const [selectedText, setSelectedText] = useState('');

  const [copiedText, setCopiedText] = useState(
    'Nothing to show, copy by clicking on FlatList Text, and paste it by clicking Paste button'
  );

  const copyToClipboard = (text) => {
    Clipboard.setString(text);
    console.log('copied to Clipboard');
    fetchCopiedText();
    console.log('copied text: ', copiedText);
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getString();
    setCopiedText(text);
  };

  useEffect(() => {
    fetch('https://jsonplaceholder.typicode.com/posts')
      .then((response) => response.json())
      .then((json) => setData(json))
      .catch((error) => console.error(error))
      .finally(() => setLoading(false));
  }, [refetch]);

  return (
    <>
      <View style={styles.container}>
        <TextInput
          style={{
            padding: 10,
            backgroundColor: 'white',
            width: 300,
            color: 'black',
            height: 100,
          }}
        />
        {isLoading ? (
          <ActivityIndicator />
        ) : (
          <FlatList
            data={data}
            keyExtractor={({ id }, index) => id}
            renderItem={({ item }) => (
              <TouchableOpacity
                onPress={() => {
                  Clipboard.setString(item.title);
                  console.log('selected text:', selectedText);
                }}>
                <Text style={styles.content}>❝ {item.title} ❞</Text>
              </TouchableOpacity>
            )}
          />
        )}
      </View>
      <View style={{ width: 300, height: 100 }}>
        <Text>{copiedText}</Text>
      </View>
      <View>
        <View style={styles.buttonStyle}>
          <Button
            title=""New""
            onPress={() => setRefetch(!refetch)}
            style={styles.buttonCopy}
            color=""#134074""
          />
        </View>
        <View style={styles.buttonStyle}>
          <Button
            title=""Paste""
            onPress={() => {
              fetchCopiedText();
            }}
            style={styles.buttonCopy}
            color=""#aa4465""
          />
        </View>
      </View>
    </>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#001524',
    padding: 30,
    flexDirection: 'column',
    alignItems: 'center',
  },
  content: {
    fontSize: 25,
    textAlign: 'left',
    color: '#ffecd1',
  },
  QuotesMark: {
    color: '#ffffff',
    fontSize: 10,
  },
  buttonStyle: {
    padding: 10,
    alignItems: 'center',
    backgroundColor: '#001524',
  },
});

export default App;
",0
65087602,"function sweetAlertConfirmationMessage(message) {
    return Swal.fire({
        title: T('SWEETALERT_GENERAL_CONFIRMATION_TITLE'),
        text: message,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: T('SWEETALERT_CONFIRM_BUTTON_COLOR'),
        cancelButtonColor: T('SWEETALERT_CANCEL_BUTTON_COLOR'),
        cancelButtonText: T('SWEETALERT_CANCEL_BUTTON_TEXT'),
        confirmButtonText: T('SWEETALERT_CONFIRM_BUTTON_TEXT'),
    })
}
",0
65132112,"const MY_IDENTIFIER = generateSomeIdentifierUniqueToThisClient();

publish({
   identifier:MY_IDENTIFIER,
   data: // the actual content of your message
});

handleIncoming = data => {
  // this was a message you sent
  if(data.identifier === MY_IDENTIFIER) return;

  // handle it
}

",0
65100480,"//I just set an interval for every second to check the time again
var s=setInterval(()=>{
  var today = new Date();
  var time = today.getHours() + "":"" + today.getMinutes() + "":"" + today.getSeconds();
  var dayLight = 0900;
  var lightMode = 1700;


  if (time >= dayLight && time <= lightMode) {
      document.body.style.backgroundColor = ""white"";
      document.querySelector(""h1.example"").style.color = ""black"";
      //console.log(time + "" "" + ""="" + "" "" + ""Light Mode!"");
  } else {
      document.body.style.backgroundColor = ""black"";
      document.querySelector(""h1.example"").style.color = ""white"";
      //console.log(time + "" "" + ""="" + "" "" + ""Dark Mode!"");
  }
},1000)
<!DOCTYPE html>
<html lang=""en"">

    <head>
        <meta charset=""UTF-8"">
        <title>Dark Mode Example</title>
    </head>

    <body>
       
        <h1 class=""example"">Dark Mode Example</h1>
   
        <p>Test Paragraph</p>
    </body>
    <script src=""script.js""></script>

</html>",0
65132372,"let clientData = [{ client: 'Pizza Hutt', food_cost: 400.00, prev_year_food_cost: 450.00, }, { client: 'Pizza World', food_cost: 500.00, prev_year_food_cost: 650.00, }];

const difference = (arr, key) => {
  return arr.map(o => {
    const { [""prev_year_"" + key]: prev, ...rest} = o;
    return { ...rest,
       difference: Math.abs(o[""prev_year_"" + key] - o[key])
    }
  });
}
console.log(difference(clientData, ""food_cost""));

clientData = [{ client: 'Pizza Hutt', water_cost: 400.00, prev_year_water_cost: 450.00, }, { client: 'Pizza World', water_cost: 500.00, prev_year_water_cost: 650.00, }];

console.log(difference(clientData, ""water_cost""));",0
65126671,"jQuery(document).ready(function($) {
  var calendarEl = document.getElementById('calendar');
  var calendar = new FullCalendar.Calendar(calendarEl, {
    //...etc
  });
  calendar.render();

  $('.holiday').on('click', function() {
    calendar.addEventSource({
      events: [ // put the array in the `events` property
      {
        title: 'Test-Event',
        start: '2020-11-11',
        overlap: false,
        display: 'background',
        color: '#ff9f89'
      }
    ]
  });
});
",0
65128214,"import React, { useState } from ""react"";

export const Checkboxes = () => {
  const [checkedIds, setCheckedIds] = useState(new Set([""everywhere""]));

  const handleCheck = ({ id, checked }) => {
    if (checked) {
      if (id === ""everywhere"") {
        checkedIds.clear();
      } else {
        checkedIds.delete(""everywhere"");
      }
      checkedIds.add(id);
    } else {
      checkedIds.delete(id);
    }
    setCheckedIds(new Set(checkedIds));
  };

  return (
    <form>
      <label>
        <input
          id=""everywhere""
          type=""checkbox""
          checked={checkedIds.has(""everywhere"")}
          onChange={(e) => handleCheck(e.target)}
        />{"" ""}
        Search everywhere
      </label>

      <label>
        <input
          id=""option-1""
          type=""checkbox""
          checked={checkedIds.has(""option-1"")}
          onChange={(e) => handleCheck(e.target)}
        />{"" ""}
        Option 1
      </label>

      <label>
        <input
          id=""option-2""
          type=""checkbox""
          checked={checkedIds.has(""option-2"")}
          onChange={(e) => handleCheck(e.target)}
        />{"" ""}
        Option 2
      </label>
    </form>
  );
};
",0
65084674,"var arr = [
  {
    links: [
        {
      id:1, 
      name:""Name1""
      },
      {
      id:2, 
      name:""Name2"",
      links: [{
        name:""name2"",
        url:""url2""
      }]
      },
      {
      id:3, 
      name:""Name3"",
      links: [{
        name:""name3"",
        url:""url3""
      }]
      }
    ],
    
  }
]

var updatedIndexAt1 = {
                id:""1.1"",
        name: ""UpdatedName1.1"",
        links: {
        name:""name1.1"",
        url:""url1.1""
        }
      };
var cloneArr = JSON.parse(JSON.stringify(arr)); // deep clone
var lastArr = cloneArr[0].links.splice(1, 0, updatedIndexAt1);
console.log(arr)",0
65138665,"let button = document.getElementById('submitButton');
button.addEventListener('click', evenOrOdd);

function evenOrOdd () {
    //Declare the input inside the function and use .value to get the value and Number() to convert the string to number.
    let input = Number(document.getElementById('textInput').value);
    let result;
    
    //Change the condition
    if (input % 2 == 0) {
        result = ""even"";//Change to strings, not variables
    } else {
        result = ""odd"";
    }
    document.getElementById('para').textContent = input + "" is an "" + result + ""number."";
}",0
65161770,"calckStart();

function calckStart() {
    const items = document.getElementById(""items"");
    for (var i = 1; i < 3; i++) {
        const inpt = document.createElement(""input"");
        inpt.setAttribute(""type"", ""text"");
        inpt.setAttribute(""style"", ""margin:5px;"");
        inpt.setAttribute(""id"", ""y"" + i);
        inpt.setAttribute(""value"", """");
        const newline = document.createElement(""br"");
        items.appendChild(inpt);
        items.appendChild(newline);
    }

    var button = document.createElement('button');
    button.innerHTML = 'ClickMe'
    items.appendChild(button);

    button.addEventListener('click', calculateVal);
}

function calculateVal() {
    var res = 0;
    for (var i = 1; i < 3; i++) {
        res = res + +document.getElementById('y' + i).value;
    }

    var items = document.getElementById(""items"");
    var result = document.createElement('div');
    result.innerHTML = res;
    items.appendChild(result);
}
        
calckStart();

function calckStart() {
    const items = document.getElementById(""items"");
    for (var i = 1; i < 3; i++) {
        const inpt = document.createElement(""input"");
        inpt.setAttribute(""type"", ""text"");
        inpt.setAttribute(""style"", ""margin:5px;"");
        // inpt.setAttribute(""id"", ""y"" + i);
        inpt.setAttribute(""value"", """");
        inpt.setAttribute(""class"", ""numbers"");  //<-- Set class
        const newline = document.createElement(""br"");
        items.appendChild(inpt);
        items.appendChild(newline);
    }

    var button = document.createElement('button');
    button.innerHTML = 'ClickMe'
    items.appendChild(button);

    button.addEventListener('click', calculateVal);
}

function calculateVal() {
    var list = document.getElementsByClassName('numbers'); //<-- Get by class
    var res = 0;
    for (var i = 0; i < list.length; i++) {
        res = res + +list[i].value;
    }

    var items = document.getElementById(""items"");
    var result = document.createElement('div');
    result.innerHTML = res;
    items.appendChild(result);
}",0
65109541,"const jsonFile = { 
    ""photographers"": [
        {
            ""name"": ""jonna"",
            ""id"": 125,
            ""city"": ""paris"",
            ""country"": ""UK"",
            ""tags"": [""portrait"", ""events"", ""travel"", ""animals""],
            ""tagline"": ""Doing my best"",
            ""price"": 400,
            ""portrait"": ""MimiKeel.jpg""
        }
     ]
};


var cardsection = document.getElementsByClassName(""cardsection"")[0];

var items = jsonFile;
console.log(items.photographers.length);

for(var i = 0; i < items.photographers.length; i++) {
  
  var card = document.createElement(""div"");
  card.classList.add('card');
  card.setAttribute(""aria-label"", ""Photographe card"");
  cardsection.appendChild(card);
  
  var photoandname = document.createElement(""div"");
  photoandname.classList.add('photoandname');
  photoandname.setAttribute(""aria-label"", ""Profil photo and name section"");
  photoandname.innerHTML = items.photographers[i].portrait;
  card.appendChild(photoandname);
  
  var profilphoto = document.createElement(""img"");
  profilphoto.src = items.photographers[i].portrait;
  profilphoto.alt = ""Photographer's profil image"";
  profilphoto.classList.add('profilphoto');
  photoandname.appendChild(profilphoto);
  
  var photographerName = document.createElement(""H2"");
  photographerName.classList.add('name');
  photographerName.textContent = items.photographers[i].name;
  photoandname.appendChild(photographerName);
  
  var informations = document.createElement(""div"");
  informations.classList.add('informations');
  card.appendChild(informations);
  
  var caption = document.createElement(""p"");
  caption.classList.add('caption');
  caption.textContent = items.photographers[i].tagline;
  informations.appendChild(caption);
  
  var price = document.createElement(""p"");
  price.classList.add('price');
  price.innerHTML = items.photographers[i].price; 
  informations.appendChild(price);
  
  var tags = document.createElement(""div"");
  tags.classList.add('tags');
  
    var tagItems = items.photographers[i].tags;
  console.log(tagItems)
  for(var j = 0; j < tagItems.length; j++) {
    
    var tagButton = document.createElement('button');
    tagButton.classList.add('tagButton');
    tagButton.id = tagItems[j]; /*ID needs to be the tag itself for a further filter functionality*/
    tagButton.textContent = tagItems[j]; /*And setting the innerhtml of the button as the tag itself*/
    tags.appendChild(tagButton);

  }   
  card.appendChild(tags);
}
",0
65153220,"// DOM (Document Object Model) fully Loaded and parsed
window.addEventListener('DOMContentLoaded', (event) => {
// Changed Peach to PeachPuff & aliceblue to AliceBlue to match HTML Color codes. Note that the AliceBlue might not be fully visible to distinguish between it and the whit background colour
var colour = ['blue', 'green', 'yellow', 'purple', 'PeachPuff', 
            'pink', 'orange', 'magenta', 'black', 'AliceBlue'];

var divContainer = document.getElementById('container');
// Used query selectorAll to return array of nodes with class name. And the . before the class name
var divS = document.querySelectorAll('.innerDiv');

for (let i = 0; i < divS.length; i++)
{
    console.log(divS[i]);
    divS[i].addEventListener('mouseover', function() {
        this.style.background = colour[i];

        
    });
    divS[i].addEventListener('mouseout', function() {
        this.style.background = ""white"";
    });
}
});
",0
65108520,"var tdTag = document.querySelectorAll(""#tab tr td"");

for(var i = 0; i < tdTag.length; i++){
  tdTag[i].addEventListener('click', clickedFunction);
}

function clickedFunction(){
  if(!this.classList.contains('clicked')){
      this.classList.add('clicked');
      this.style.background = ""red"";
  }
}


",0
65104516,"const personInterface = {
  name: ""string"",
  age: ""number"",
};

const persons = [
  {
    name: ""bob"",
    age: 18,
  },
  {
    name: ""karen"",
    age: ""50"",
  }
];

for(const person of persons) {
  for(const [key, value] of Object.entries(personInterface)) {
    if(typeof person?.[key] === value) {
      console.log(`${person[key]} matches ${value}`);
    } else {
      console.log(`${person[key]} does not match ${value}`);
    }
  }
}",0
65138092,"function GetReferrals(member_id) {
  return knex.select('member_id').from('users').where({referred_by: 
  member_id}).then((referrals) => {
    const referralIds = referrals.map(element => element.member_id)
    return Promise.all(referralIds.map(GetReferrals)).then(referralsReferrals => {
      return referralsReferrals.reduce((final, arr) => final.concat(arr), referralIds)
    })
  })
}

app.get('/api/calculateReferralTotals', (req, res) => {
    const member_id = req.body.member_id;
    GetReferrals(member_id).then(final_referral_list => {
      // do something with the global_referral_array
      res.status(200).send({final_referral_list})
    }).catch((error) => {
      console.log(""Error in select "" + error);
    })
});
",0
65088834,"   donglePaired() {
        return new Promise( function(resolve, reject) { 
            if (Platform.OS !=='ios'){
              var pairedDevices = await BluetoothScanner.getPairedDevices();
              console.log('Sending........');
              let data={
                  data:pairedDevices,
              };
              new Api().fetch(""bluetoothCheck"",{devices:JSON.stringify(data),userid:this.state.probe.UID},(result) => {
                  if (!result.err) reject(false);
                  console.log(""Dongle already paired"");
                  resolve(true);
                  //logNetworkState
              });
            }
            reject(false);
        });  
     }
",0
65107227,"// 1.
const response = await fetch(""/path/to/resource"");
// 2.
if (!response.ok) {
    throw new Error(""HTTP error "" + response.status);
}
// 3.
const buffer = await response.arrayBuffer();
// 4.
const byteArray = new Uint8Array(buffer);
// 5.
const charArray = Array.from(byteArray, byte => String.fromCharCode(byte));
// 6.
const binaryString = charArray.join("""");
// 7.
const theImage = btoa(binaryString);
",0
65109857,"body {
  display: inline;
  font-family: ""Bradley's Hand"", cursive
}

#left {
  float: left;
  width: 40%;
  line-height: 450px;
  box-sizing: border-box;
}

#right {
  float: right;
  width: 40%;
  line-height: 450px;
  box-sizing: border-box;
}

#input {
  display: flex;
  flex-direction: column;
  width: 18%;
  box-sizing: border-box;
}
<!DOCTYPE html>
<html>

<head>
  <meta charset=""utf-8"">
  <meta name=""viewport"" content=""width=device-width"">
  <title>repl.it</title>
  <link href=""html.css"" rel=""stylesheet"" type=""text/css"" />
</head>

<body>
  <br>
  <div style=""position: relative"">
  <fieldset id=""left"">
    <p id=""output"">TEST</p>
  </fieldset>
  <fieldset id=""right"">
    <p id=""lesson"">TEST</p>
  </fieldset>
  <div id=""input"">
    <input type=""button"" id=""doctype"" value=""<!DOCTYPE html>"">
    <input type=""button"" id=""html"" value=""<html>"">
    <input type=""button"" id=""head"" value=""<head>"">
    <input type=""button"" id=""title"" value=""<title>"">
    <input type=""button"" id=""css"" value=""<link rel='stylesheet'>"">
  </div>
  </div>
  
  <script src=""html.js""></script>
</body>

</html>
body {
  display: inline;
  font-family: ""Bradley's Hand"", cursive
}

#columns {
  display: flex;
}

#left {
  flex: 1;
  min-width: 40%;
  line-height: 450px;
}

#right {
  flex: 1;
  min-width: 40%;
  line-height: 450px;
}

#input {
  flex: 1;
  flex-direction: column;
  width: 18%;
  box-sizing: border-box;
}

#input input {
flex: 1;
width: 100%;
}
<!DOCTYPE html>
<html>

<head>
  <meta charset=""utf-8"">
  <meta name=""viewport"" content=""width=device-width"">
  <title>repl.it</title>
  <link href=""html.css"" rel=""stylesheet"" type=""text/css"" />
</head>

<body>
  <br>
  <div id=""columns"">
  <fieldset id=""left"">
    <p id=""output"">TEST</p>
  </fieldset>
  <div id=""input"">
    <input type=""button"" id=""doctype"" value=""<!DOCTYPE html>"">
    <input type=""button"" id=""html"" value=""<html>"">
    <input type=""button"" id=""head"" value=""<head>"">
    <input type=""button"" id=""title"" value=""<title>"">
    <input type=""button"" id=""css"" value=""<link rel='stylesheet'>"">
  </div>
  <fieldset id=""right"">
    <p id=""lesson"">TEST</p>
  </fieldset>
  </div>
  <script src=""html.js""></script>
</body>

</html>",0
65136880,"class WelcomeController
{
    public function createSession(Request $request)
    {
        return view('welcome');
    }

    public function storeSession(Request $request)
    {
        //$request->session()->put('srcode','data.usr_name');

        //Store the usr_name value from data received via (Post) ajax request
        $request->session()->put('srcode',$request->usr_name);
        echo ""Session stored."";
        
        return 1;
    }
}
",0
65129589,".front {
    background-color: front plate color;
}  
.standard {
    width: standard plate width;
    height: standard plate height;
}
.motor-cycle {
    width: motorcycle plate width;
    height: motorcycle plate height;
}
.larger-car {
    width: larger-car plate width;
    height: larger-car plate height;
}

$plateValue = $_POST['platevalue'];
$regno = $_POST['regno'];
$size = $_POST['platesize'];
$style = $_POST['textstyle'];
$border = $_POST['border'];

if ($plateValue=='front' || $plateValue=='rare') {
    //create front plate div and apply styles based on posted values
    echo '<div class=""' . $plateValue . ' ' . $size '"">
        <div class=""' . $border . '"">
            <h1 class=""' . $style . '""><' . $regno . '</h1>
        </div>
    </div>';
} else {
    //code for both plates
}
",0
65122782,"@Directive({
  selector: '[autoFocus]',
})
export class AutoFocusDirective {
  constructor(private el: ElementRef) {}

  public focus(): void {
    (this.el.nativeElement as HTMLInputElement).focus();
  }
}
",0
65158617,"
app.patch('/editProfile/:username', (req, res) => {
    fs.readFile(dataPath, ""utf8"", (err, data) => {
        let parsedData = JSON.parse(data)
        const username = req.params[""username""];
        console.log(data)

        // this will use the current user, and only update those fields 
        // which are sent in the request body. If only one field is sent, 
        // only that field will be updated.
        const updatedUser = {...parsedData[username], ...req.body}         

        // we then set the parsedData to the new patched user.
        parsedData[username] = updatedUser 

        fs.writeFile(dataPath, JSON.stringify(parsedData), () => {
            res.status(200).send('${username} updated');
        })
    })
})
",0
65101929,"<!DOCTYPE html>
<html>
  <head>
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <link href=""style.css"" rel=""stylesheet"" type=""text/css"" />
  </head>
  <body>
    <div class=""reee"">
      <h1 id = ""dad""> Login </h1>
    </div>
 
      <div id = ""action""> 
        <form>
          <label class =""u"" for=""fname"">Username</label>
          <input type=""text"" id=""uname"" name=""user"" placeholder=""Your username..."">
          <label class = ""p"" for=""lname"">Password</label>
          <input type=""text"" id=""pass"" name=""pass"" placeholder=""Your password..."">
          <input type=""submit"" value=""Submit"" id = ""loginto"" onclick=""reee()"">
          <p class = ""wrong"" id = ""status""></p> 
        </form>
    </div>
    
    <script src = ""script.js""></script> // NOTE: ALways put the javascript file link in the bottom.
  </body>
</html>


var usernames = [ //This is the place to store usernames and passwords. In real world, you have to store it in database. In this case I store it in Javascript Object to improve readability
    {username: 'john', password: '123'},
    {username: 'albert', password: '234'},
    {username: 'tesla', password: '345'},
  ];

function reee() {
  var user = document.getElementById(""uname"").value; //Get user in put from form field
  var pass = document.getElementById(""pass"").value;
  
  for (var i = 0; i < usernames.length; i++){ // Looping. To check every single data in usernames array above
    if(user != usernames[i].username || pass != usernames[i].password) { // Check if input is not equal to the usernames list
      document.getElementById(""status"").innerHTML = ""The password or username is incorrect""; //Display wrong message
    } else {
      document.getElementById(""status"").innerHTML = ""Welcome "" + user; //Display welcome message and username
      break; //To stop checking. Because username has already been found
    }
  }
}

",0
65115716,"// Close the dropdown menu if the user clicks outside of it
window.onclick = function(event) {
    if (!event.target.matches('.dropbtn')) {
        var dropdowns = document.getElementsByClassName(""dropdown-content"");
        var i;
        for (i = 0; i < dropdowns.length; i++) {
            var openDropdown = dropdowns[i];

            /// here is where the behaviour needs to be added //////////
            if (openDropdown.classList.contains('show') &&
                ($(event.target).hasClass('menubtns'))) {

                openDropdown.classList.remove('show');
                console.log('you have clicked an option');

            } else {
                console.log('not clicked on an option')
                openDropdown.classList.remove('show');
                mainpageaccessibility();

            }
        }
    }
}
",0
65147347,"function Rectangle(base, altura) {
  this.base = base;
  this.altura = altura;

  this.area = function() {
    return this.base * this.altura;
  };

  this.perimetre = function() {
    return 2 * (this.base + this.altura);
  };

  this.toString = function() {
    return (
      '(b= ' +
      this.base +
      ', h= ' +
      this.altura +
      ', a = ' +
      this.area() +
      ', p =' +
      this.perimetre() +
      ')'
    );
  };
}

var rectangles = [
  new Rectangle(1, 1),
  new Rectangle(2, 2.05),
  new Rectangle(2, 5),
  new Rectangle(1, 3),
  new Rectangle(4, 4),
  new Rectangle(2, 8)
];
console.log('rectangles (before):');
rectangles.forEach(item => console.log(item.area()));

Array.prototype.ordenaPerArea = function() {
  return this.sort(function(rectA, rectB) {
    return rectA.area() - rectB.area();
  });
}

rectangles.ordenaPerArea();

console.log('rectangles (after):');
rectangles.forEach(item => console.log(item.area()));
function Rectangle(base, altura) {
  this.base = base;
  this.altura = altura;

  this.area = function() {
    return this.base * this.altura;
  };

  this.perimetre = function() {
    return 2 * (this.base + this.altura);
  };

  this.toString = function() {
    return (
      '(b= ' +
      this.base +
      ', h= ' +
      this.altura +
      ', a = ' +
      this.area() +
      ', p =' +
      this.perimetre() +
      ')'
    );
  };
}
var rectangles = [
  new Rectangle(1, 1),
  new Rectangle(2, 2.05),
  new Rectangle(2, 5),
  new Rectangle(1, 3),
  new Rectangle(4, 4),
  new Rectangle(2, 8)
];
console.log('rectangles (before):');
rectangles.forEach(item => console.log(item.area()));

Array.prototype.ordenaPerArea = function() {
  const orderedArray = this.map(item => item);
  orderedArray.sort(function(rectA, rectB) {
    return rectA.area() - rectB.area();
  });

  return orderedArray;
}

const orderedRectangles = rectangles.ordenaPerArea();


console.log('orderedRectangles:');
orderedRectangles.forEach(item => console.log(item.area()));
console.log('rectangles (after):');
rectangles.forEach(item => console.log(item.area()));",0
65151903,"// students is renamed to items as I'm sure these were not students
let items = [{
    // size is now a number, so it's easier to work with
    size: 105000,
    material: 'Aluminium',
    color: 'Dark Blue',
    image: 'https://source.unsplash.com/wpOnFM9hjNI/300x300',
  },
  {
    size: 90000,
    material: 'Stainless',
    color: 'Dark Grey',
    image: 'https://source.unsplash.com/LKiB35E8iGA/300x300',
  },
];

// instead of listening to button clicks we listen to form submit
document.querySelector('form').addEventListener('submit', handleSubmit)

function handleSubmit(event) {
  // prevent page reload
  event.preventDefault();
  // get the form elements
  let {
    depth,
    width
  } = event.target.elements;

  // multiply the fields' values
  let product = parseFloat(depth.value) * parseFloat(width.value);
  // get the item by size
  let item = getItem(product);
  // if there is an item found
  let result = item
    ? `<h2>Material: ${item.material}</h2>
 <p>Color: ${item.color}</p>
 <img src=""${item.image}"" alt="""">`
    : `<h2>Oh, noes!</h2>
 <p>No item found</p>`;

  // render the result
  document.getElementById('result').innerHTML = result;
}

function getItem(size) {
  for (let i = 0; i < items.length; i++) {
    if (items[i].size === size) {
      return items[i];
    }
  }
  // if we didn't find anything
  return null;
}",0
65090778,"const process = (arr) => {
  const result = [];
  let last = -1;
  for (let i = 0; i <= arr.length; i++) {
    if (typeof arr[i] === ""string"" || !(i in arr)) {
      if (last !== -1) {
        result.push([last, i]);
      }
      last = i;
    }
  }

  return result.map(([start, end]) => ({
    month: arr[start],
    days: arr.slice(start + 1, end),
  }));
};

const array = [""January"", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, ""February"", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]

console.log(process(array));",0
65137472,"/* Function should compare the user's wishlist with the parks */
function getWishlistParksForUser(parks, users, userID) {
  return users[userID].wishlist.map(wishId => parks.find(p => p.id == wishId));
}

// The users objects (non-editable)
const users = {
  ""karah.branch3"": {
    visited: [2],
    wishlist: [1, 3],
  },
  ""dwayne.m55"": {
    visited: [2, 3],
    wishlist: [1, 2],
  },
};

// The parks array (non-editable)
const parks = [{
    id: 1,
    name: ""Acadia"",
    areaInSquareKm: 198.6,
    location: {
      state: ""Maine""
    },
  },
  {
    id: 2,
    name: ""Canyonlands"",
    areaInSquareKm: 1366.2,
    location: {
      state: ""Utah""
    },
  },
  {
    id: 3,
    name: ""Zion"",
    areaInSquareKm: 595.9,
    location: {
      state: ""Utah""
    },
  },
];

console.log(getWishlistParksForUser(parks, users, ""dwayne.m55""));",0
65121205,"let string = Array.from('w3resource');

for (let i = 0; i < string.length; i++) {
    let removeLast = string.pop();
    let insertFirst = string.unshift(removeLast);
    console.log(string);
}

VM355:6 (10) [""e"", ""w"", ""3"", ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c""]
VM355:6 (10) [""c"", ""e"", ""w"", ""3"", ""r"", ""e"", ""s"", ""o"", ""u"", ""r""]
VM355:6 (10) [""r"", ""c"", ""e"", ""w"", ""3"", ""r"", ""e"", ""s"", ""o"", ""u""]
VM355:6 (10) [""u"", ""r"", ""c"", ""e"", ""w"", ""3"", ""r"", ""e"", ""s"", ""o""]
VM355:6 (10) [""o"", ""u"", ""r"", ""c"", ""e"", ""w"", ""3"", ""r"", ""e"", ""s""]
VM355:6 (10) [""s"", ""o"", ""u"", ""r"", ""c"", ""e"", ""w"", ""3"", ""r"", ""e""]
VM355:6 (10) [""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e"", ""w"", ""3"", ""r""]
VM355:6 (10) [""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e"", ""w"", ""3""]
VM355:6 (10) [""3"", ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e"", ""w""]
",0
65151075,"const sql = ""INSERT INTO no_em_tab values (:a, :b)"";

const binds = [
  { a: 1, b: ""Test 1 (One)"" },
  { a: 2, b: ""Test 2 (Two)"" },
  { a: 3, b: ""Test 3 (Three)"" },
  { a: 4 },
  { a: 5, b: ""Test 5 (Five)"" }
];

// bindDefs is optional for IN binds but it is generally recommended.
// Without it the data must be scanned to find sizes and types.
const options = {
  autoCommit: true,
  bindDefs: {
    a: { type: oracledb.NUMBER },
    b: { type: oracledb.STRING, maxSize: 15 }
  }
};
",0
65149121,"let number = 100
 
function change(number) {
    //This is the variable scoped to the function
    number = number * 10;
}
//This is the variable defined in the global scope
change(number);
 
console.log(number);
",0
65100027,"import { createApp } from 'vue'
import store from './store'
import router from './router'
import App from './App.vue'

let app;

firebase.auth().onAuthStateChanged(user => {
  console.log(""user"", user);
  app = createApp(App);
  app.use(store);
  app.use(router);
  app.mount(""#app"");
});

import { createWebHistory, createRouter } from ""vue-router"";
import Home from ""@/views/Home.vue"";
import About from ""@/views/About.vue"";

const routes = [
  {
    path: ""/"",
    name: ""Home"",
    component: Home,
  },
  {
    path: ""/about"",
    name: ""About"",
    component: About,
  },
];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

export default router;
",0
65116026,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Title</title>
</head>
<body>
<form name=""fv"">
    <table>
        <tr><td colspan=""3""><b>Enter Investment Information:</b></td></tr>
        <tr>
            <td>1)</td>
            <td>Amount of the Investment (any currency):</td>
            <td>
                <input type=""text"" name=""investment"" size=""12""
                       onchange=""calculate();"">
            </td>
        </tr>
        <tr>
            <td>2)</td>
            <td>percentage rate of interest:</td>
            <td>
                <input type=""text"" name=""interest"" size=""12""
                       onchange=""calculate();"">
            </td>
        </tr>
        <tr>
            <td>3)</td>
            <td>Monthly Payment Amount:</td>
            <td>
                <input type=""text"" name=""monthly"" size=""12""
                       onchange=""calculate();"">
            </td>
        </tr>
        <tr>
            <td>4)</td>
            <td>Terms:</td>
            <td>
                <input type=""text"" name=""terms"" size=""12""
                       onchange=""calculate();"">
            </td>
        </tr>
        <tr>
            <td colspan=""3"">
                <input type=""button"" value=""Calculate"" onclick=""calculate();"">
            </td>
        </tr>
        <tr>
            <td colspan=""3"">
                <b>Investment Information:</b>
            </td>
        </tr>
        <tr>
            <td>4)</td>
            <td>Your Investment will be worth:</td>
            <td><input type=""text"" name=""payment"" size=""12""></td>
        </tr>
    </table>
</form>
<script type=""text/javascript"">
  function calculate() {
      var investment = document.fv.investment.value;
      var interest = document.fv.interest.value / 100 / 12;
      var terms = document.fv.terms.value * 12;

      var x = Math.pow(1 + interest, terms);
      var monthly = (investment * x);
       
      if (!isNaN(monthly) && (monthly !== Number.POSITIVE_INFINITY) &&
              (monthly !== Number.NEGATIVE_INFINITY)) {
          document.fv.payment.value = round(monthly);
      }
      else {
          document.fv.payment.value = """";
      }
  }

  function round(x) {
      return Math.round(x * 100) / 100;
  }
</script>
</body>

</html>",0
65085677,"var allPromises = [];
for (const element of htmlData) {
  var input = document.getElementById(element);
  if (input.toLowerCase().startsWith('<img')) {
    allPromises.push(html2canvas(input));
  } else {
    allPromises.push(Promise.resolve(input));
  }
}

Promise.all(allPromises).then(response => {
  response.forEach(input => {
    if (input instanceof String) {
      doc.setFont(fontName, 'bold');
      var isH3 = input.toLowerCase().startsWith('<h3>');
      writeText(input, isH3 ? h3_fontSize : h5_fontSize, isH3 ? 5 : 3);
    } else {
      imgData = input.toDataURL('image/jpeg', 1.0);
      doc.addImage(imgData, 'PNG', left_edge_distance, position_mm, 100, 100);
    }
  });
  doc.save('download.pdf');
});
",0
65110341,"import http from ""k6/http"";
import { parseHTML } from ""k6/html"";

export default function() {
    const res = http.get(""https://top-tuning.ru/""); 
    const doc = parseHTML(res.body); 
    const pageTitle = doc.find('head title').text(); 
    const langAttr = doc.find('html').attr('lang');
    doc.find(""img"").toArray().forEach(function (idx) {
        console.log(idx.attr(""src""));
    });
}
",0
65096304,"  const tableColumns = [
   // ..other columns
  {
    title: ""Password"",
    field: ""password"",
    editComponent: ({ value, onChange }) => (
      <input
        type=""text""
        value={value || """"}
        onChange={(e) => onChange(e.target.value)}
      />
    ),

    render: (rowData) => (
      <input
        type=""password""
        value={rowData.password}
        readOnly />
    )
  }
];
",0
65150926,"function scan(freightItems) {
  let contrabandIndexes = [];

  freightItems.forEach((el, idx) => {
    if (el == 'contraband') {
      contrabandIndexes.push(idx);
    }
  });
  return contrabandIndexes;
}

const indexes = scan(['dog', 'contraband', 'cat', 'zippers', 'contraband']);
console.log('Contraband Indexes: ' + indexes); // should be [1, 4]
",0
65113374,"const start_tds =  document.querySelectorAll(""tr > td:nth-child(2)"");
   const end_tds =  document.querySelectorAll(""tr > td:nth-child(3)"");
   
   const len = Math.min( start_tds.length, end_tds.length );
   const today = new Date();
   


   for( let i = 0; i < len; i++ ) {
       
    start_time = toDate( start_tds[ i ].textContent ) ;
    end_time =   toDate(end_tds[ i ].textContent );

    if ( today > start_time && today < end_time  ) {
        document.querySelector(""tbody > tr:nth-child("" + ( i + 1 ) + "")"").classList.add(""red"");
    }
    
   }



   function toDate( str ) {
    // 02/12/2020 10:00 AM start_tds[ i ].textContent
    const date_parts = str.split(""/"")
    const d = date_parts[1] + ""/"" + date_parts[0] + ""/"" + date_parts[2];
    return new Date( d );
   }
<body>
    <table>
        <thead>
            <tr><th>Subject</th><th>Start Time</th><th>End Time</th><th>Location</th><th>Organizer</th></tr>
        </thead>
        <tbody>
            <tr><td>test event 1</td><td>02/12/2020 10:00 AM</td><td>02/12/2020 06:00 PM</td><td>zoom Meeting</td><td>me</td></tr>
            <tr><td>test event 2</td><td>02/12/2020 11:30 AM</td><td>02/12/2020 09:30 PM</td><td>wherever</td><td>you</td></tr>
            <tr><td>test event 3</td><td>02/12/2020 12:00 PM</td><td>02/12/2020 01:00 PM</td><td>zoom Meeting</td><td>them</td></tr>
        </tbody>
    </table>",0
65097990,"    <form [formGroup]=""myForm"">
          <div class=""checkbox"">
            <label for=""waiting""> waiting </label>
            <input class=""input-control checkbox-box"" formControlName=""isTest"" 
              [attr.disabled]=""myForm.get('isTimed').value|| null""
              name=""waiting"" id=""waiting""
              type=""checkbox"">
          </div>
    
          <div class=""checkbox"">
            <label for=""functional""> functional </label>
            <input class=""input-control checkbox-box"" formControlName=""isFunctional"" 
              [attr.disabled]=""myForm.get('isTimed').value || null""
              name=""functional"" id=""functional""
              type=""checkbox"">
          </div>
    
          <div class=""checkbox"">
            <label for=""test""> test </label>
            <input class=""input-control checkbox-box"" formControlName=""isTimed"" name=""test"" 
             [attr.disabled]=""(myForm.get('isTest').value && myForm.get('isFunctional').value) || null"" 
             id=""test"" type=""checkbox"">
          </div>
    
    </form>

   combineLatest(
      this.myForm.get(""isTest"").valueChanges.pipe(startWith(this.myForm.value.isTest)),
      this.myForm.get(""isFunctional"").valueChanges.pipe(startWith(this.myForm.value.isFunctional)),
      this.myForm.get(""isTimed"").valueChanges.pipe(startWith(this.myForm.value.isTimed))
    )
      .subscribe(([isTest, isFunctional, isTimed]: [any, any, any]) => {
        const timedCtr = this.myForm.get(""isTimed"");
        const testCtr = this.myForm.get(""isTest"");
        const functionalCtr = this.myForm.get(""isFunctional"");
        if (isTimed) {
          testCtr.disable({ emitEvent: false });
          functionalCtr.disable({ emitEvent: false });
          testCtr.setValue(false, { emitEvent: false });
          functionalCtr.setValue(false, { emitEvent: false });
        } else {
          testCtr.enable({ emitEvent: false });
          functionalCtr.enable({ emitEvent: false });
        }
        if (isTest && isFunctional) {
          timedCtr.disable({ emitEvent: false });
           timedCtr.setValue(false, { emitEvent: false });
        } else timedCtr.enable({ emitEvent: false });
      });
  }
",0
65100676,"const TEST = (function() {
    let booleans = {
        boolOne: false,
        boolTwo: false,
        boolThree: false
    };

    let events = {
        clickEvent:
            function(event) {
                //do stuff
            },
        keyEvent:
            function(event) {
                //do other stuff
            }
    };

    return {
        executesMoreThanOnce: function(booleans, events, index) {
            booleanObject = booleans;
            eventsObject = events;

            if (i == 2) {
                booleanObject.boolTwo = true;
            }
            else if (i == 4) {
                booleanObject.boolOne = true;
                booleanObject.boolTwo = false;
            }

            console.log('booleanObject: ', booleanObject);
        },
        get variables() {
            return {
                booleans,
                events
            }
        }
    };
}());

for (var i=0; i<5; i++) {
    TEST.executesMoreThanOnce(TEST.variables.booleans, TEST.variables.events, i);
}
",0
65123255,"public getAdminHeaders(): HttpHeaders { // <-- declared return type
  if (localStorage.getItem('access_token')) {
    this._adminHeaders = new HttpHeaders({
      'Authentication': localStorage.getItem('access_token') || 'null'
    });
  } else {
    this._adminHeaders = new HttpHeaders({
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    })
  }
  return this._adminHeaders;
}
",0
65122035,"const getAverage = (reviews) => {
    let TotalStars = reviews.reduce((prev, curr) => (curr.stars + prev), 0)
    // TotalStars is 3.6666 
    // below use any one of them averageStars
    // let averageStars = Math.round(TotalStars/reviews.length);  // output 4
    // let averageStars = Math.floor(TotalStars/reviews.length);  // output 3
    let averageStars = Math.floor((TotalStars/reviews.length)*10)/10;// output 3.6
    return averageStars;
};

<div>
    <p className=""totalReviewsTally"">Average: {getAverage(reviews)} {reviews.length}</p>
</div>
",0
65134370,"let initArray = [];
i=0; // define i
function makeArray() {
  do {
    let val = Math.floor(Math.random() * 9)
    initArray.push(val);
    shiftArray(); //call shiftArray
    console.log(initArray);
    i++;
  }
  while (i < 100) //reduced to prevent computers from screaming
}

function shiftArray() {

if (initArray.length > 5) {
    initArray.shift();
  }
}
makeArray();",0
65107499,"var typeString = ['• I\'m Mr. Frits\n• and I love Pakistan...:)'];

var i = 0;
var count = 0
var selectedText = '';
var text = '';
(function type() {
  if (count == typeString.length) {
    count = 0;
  }
  selectedText = typeString[count];
  text = selectedText.slice(0, ++i);
  document.getElementById('typing').innerHTML = text.fontsize(6);
  document.getElementById('typing').style.fontFamily = ""monospace"";
  document.getElementById(""typing"").style.color = ""black"";
  document.getElementById(""typing"").style.fontWeight = ""normal"";

  if (text.length === selectedText.length) {
    count++;
    i = 0;

  }
  setTimeout(type, 300);
}());

function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds) {
      break;
    }
  }
}",0
65093382,"const steps = {
  one: async () => {
    await something();
    steps.two();
  }
  
  two: async () => {
    try {
      const results = await somethingElse();
      steps.three(results);
    } catch(e) {
      // TODO display error message
      steps.one();
    }    
  }
  
  three: async () => {
    // do whatever
  }
}",0
65147210,"cards.map(card => {
return (
                    <div class=""mdc-layout-grid__cell mdc-layout-grid__cell--span-4-phone mdc-layout-grid__cell--span-3-tablet mdc-layout-grid__cell--span-4-desktop process-card"">
                        <div class=""process-card__number-container"">
                            <div class=""process-card__number-container__circle"">
                                <div class=""process-card__number-container__circle process-card__number-container__circle__number""> {card.Number} </div>
                            </div>
                        </div>
                        <div class="".tk-typography--title-md process-card__title""> {card.Title} </div>
                        <div class=""mdc-typography--body preserve-linebreaks process-card__text""> {card.ContentText} </div>
                        <a class=""mdc-button process-card__link"" href={card.Link}> {card.LinkText} </a>  
                    </div>
);
                    })
",0
65144544,"<div class=""row"">
    <form>
        <label class=""radio-inline"">
            <input type=""radio"" name=""optradio"" value=""notspecific"" checked>&nbsp;Latest Available Semester
        </label>

        <label class=""radio-inline"">
            <input type=""radio"" name=""optradio"" value=""specific"">&nbsp;Specific Semester
        </label>
        <select id=""dropdown"" >
            <option value="""">--Please choose an option--</option>
            <option value=""dog"">Dog</option>
            <option value=""cat"">Cat</option>
        </select>
    </form>
</div>
<!-- jQuery -->
<script
  src=""http://code.jquery.com/jquery-3.5.1.min.js""
  integrity=""sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=""
  crossorigin=""anonymous""></script>
<script>

$(document).ready(function(){
    // hidden at init
    $('#dropdown').hide();
    $('input[type=""radio""]').click(function(){
    // test the value of radio button to decide to show or hide the dropdown
        if ($(this).val() == 'specific') {
            $('#dropdown').show();
        }
        else{
            $('#dropdown').hide();
        };
    });
});

</script>
",0
65132611,"export class FileUploadComponent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      //Keys: [],
      //values: [],
      modify: { Keys: [""key1"", ""key2"", ""key3""], values: [""""] }
    };

    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }

  createUI() {
    const { modify } = this.state;
    const keys = modify.Keys;
    const values = modify.values;
    
    const val = keys.map((item, i) => {
      return values.map((el, i) => {
        return (
          <div key={i}>
            <label>{item}</label>
            <input
              type=""text""
              onChange={(event) => this.handleChange(event, i)}
            />
          </div>
        );
      });
    });
    return val;
  }

  handleChange(event, i) {
    const { modify } = this.state;
    let values = [...modify.values];
    values[i] = event.target.value;
    this.setState({ values: values });
  }

  handleSubmit(event) {
    alert(""A name was submitted: "" + this.state.values.join("", ""));
    event.preventDefault();
  }

  ModifyList() {
    const { modify } = this.state;
    const keys = modify.Keys;
    const val = keys.map(function (item, i) {
      return (
        <div>
          <label>{item}</label>
          <input type=""text"" />
        </div>
      );
    });
    return val;
  }

  render() {
    return (
      <div>
        <form onSubmit={this.handleSubmit}>
          {/*this.ModifyList()*/}
          {this.createUI()}
          <input type=""submit"" className=""btn btn-primary"" value=""Search !"" />
          <input type=""submit"" className=""btn btn-primary"" value=""Edit !"" />
        </form>
      </div>
    );
  }
}",0
65156098,"ngAfterViewInit(): void {
    var textWrapper = document.querySelector('.an-2');
    textWrapper.innerHTML = textWrapper.textContent.replace(/\S/g, ""<span class='letter'>$&</span>"");
    anime.timeline({loop: false})
      .add({
        targets: '.an-2 .letter',
        opacity: [0,1],
        easing: ""easeInOutQuad"",
        duration: 2250,
        comp: this,
        delay: (el, i) => 150 * (i+1),
        complete:(anim) => {
          console.log('Completed' + anim);
          this.comp.showOptions();
        }
      });
  }

showOptions(){
   console.log('Show options called.');
}
",0
65133137,"<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js""></script>
<div id=""newsletter"">
  <div class=""newsletter"">
    <h6 class=""headerDIV"">SUBSCRIBE TO OUR NEWSLETTER</h6>
    <input id=""newsletterInputEmail"" class=""input-email"" type=""email"" placeholder=""Enter your email here"">
    <button id=""newsletterButtonSubmit"" width=""100px"" class=""w3-button w3-round-xlarge w3-grey"">Submit</button>
    <p><label id=""newsletterEmailMSG"" class=""textFillField"">This field is mandatory</label></p>
    <p><input id=""newsletterCheckbox"" class=""w3-check"" type=""checkbox""><label class=""textRights"">I have read and accepted the general terms and conditions*</label></p>
    <p><label id=""newsletterCheckboxMSG"" class=""textFillField"">This field is mandatory</label></p>
    <label class=""textRights2"">See our <a href=""politics/privacy/politica_de_privacidade_pt.pdf"" target=""_blank"" style=""text-decoration: underline;"">Privacy Notice</a> for more information.</label>
  </div>
</div>",0
65102509,"var arr = [{Month: ""Nov-2020"",Track: ""MS"",total: 100},
 {Track: ""ZZ"", Month: ""Nov-2020"",  total: 80},
 {Track: ""ZZ"", Month: ""Dec-2020"",  total: 20},
 {Track: ""AA"", Month: ""Nov-2020"",  total: 30},
 {Track: ""AA"", Month: ""Dec-2020"",  total: 20},
 {Track: ""MS"", Month: ""Dec-2020"",  total: 20}]

const result = arr.reduce((r, value, i) => {
const {Month, Track, total} = value

if(i > 0){
    var found = r.find(x=> x.Track == value.Track)
  if(found){
    const cumVal = found.total
    const newDatum = { total: total + cumVal, Month,  Track}
    r.push(newDatum);
  }else{
    const newDatum = { total: total, Month,  Track}
    r.push(newDatum);
  }
}else{
  const newDatum = { total: total, Month,  Track}
  r.push(newDatum);
}
return r;
}, [])
console.log(results)
",0
65121898,"/**
 * Get all children that start before `offset_top` and end after 
 * `offset_top`.
 *
 * @param {(HTMLElement|jQuery|string)} parent 
 *    The parent as the element or as the selector
 * @param {number} offset_top
 *    The top offset to check
 *
 * @return {jQuery}
 *    All elements that are on the specific location.
 */
function findChildrenWithOffset(parent, offset_top){
  let found = $([]);
  $(parent).children().each(function(){
    let t = $(this);
    let o = t.offset();
    let start = o[""top""];
    let end = start + t.outerHeight();
    if(start <= offset_top && offset_top <= end){
      found = found.add(t);
    }
    if(t.children().length > 0){
      t.children().each(function(){
        found = found.add(findChildrenWithOffset(this, offset_top));
      });
    }
  });
  
  return found;
}

let c = findChildrenWithOffset(document, 140);
// get the most inner child only
c = c.last();
$(c).css(""background"", ""red"");",0
65151386,"// JS animation script start here

var question = 0;

var questions = Array.from(document.getElementsByClassName(""quiz"")).reduce((carry, item) => {
  carry.push(item.textContent.trim())
  return carry;
}, []);

var anim;
var targets;

function prepQuestion() {
  $(""#rect"").text(questions[question]);

  var textWrappers = document.querySelectorAll('#rect');
  textWrappers.forEach(textWrapper => {
    textWrapper.innerHTML = textWrapper.textContent.replace(/(\S*)/g, m => {
      return `<span class=""word"">` +
        m.replace(/(-|)?\S(-|@)?/g, ""<span class='letter'>$&</span>"") +
        `</span>`;
    });
  });

  targets = Array.from(document.querySelectorAll('#rect .letter'));

  anim = anime.timeline()
    .add({
      targets: targets,
      scale: [3, 1],
      scaleY: [1.5, 1],
      opacity: [0, 1],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 150,
      delay: (el, i) => 20 * i
    });
}

// init
prepQuestion();

function next() {
  anim = anime.timeline()
    .add({
      targets: targets.reverse(),
      scale: [1, 3],
      scaleY: [1, 1.5],
      opacity: [1, 0],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 50,
      delay: (el, i) => 10 * i
    });

  anim.complete = () => {
    if (question == questions.length - 1) {
      question = 0;
    } // reset question
    else {
      question++;
    }

    prepQuestion();
  };
}

function previous() {
  anim = anime.timeline()
    .add({
      targets: targets.reverse(),
      scale: [1, 3],
      scaleY: [1, 1.5],
      opacity: [1, 0],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 50,
      delay: (el, i) => 10 * i
    });

  anim.complete = () => {
    if (question == 0) {
      question = questions.length - 1;
    } // reset question
    else {
      question--;
    }

    prepQuestion();
  };
}
// JS animation script end here

// textarea script start here

const sendButton = document.getElementById('send-btn');
const textArea = document.getElementById('input');
const innerDiv = document.getElementById('rect');
const container = document.getElementById('q-container');
var message = textArea.value;

sendButton.addEventListener('click', function() {
  // split the textarea entries into an array
  let lines = (textArea.value).split(""\n"");

  // iterate over each line, creating a div/span and inserting into the DOM
  lines.forEach((line) => {
    let encodedLine = encodeHtmlEntity(line);
    let newElement = `<div class=""quiz"">${encodedLine}</div>`;
    container.innerHTML += newElement;
    questions = Array.from(document.getElementsByClassName(""quiz"")).reduce((carry, item) => {
      carry.push(item.textContent.trim())
      return carry;
    }, []);
  });

  // reset the textarea
  textArea.value = '';

});

function encodeHtmlEntity(input) {
  var output = input.replace(/[\u00A0-\u9999<>\&]/gim, function(i) {
    return '&#' + i.charCodeAt(0) + ';';
  });

  return output;
}
  #rect {
    font-weight: 900;
    font-size: 1.5em;
    font-family: rr;
  }
  
  #rect .letter {
    line-height: 1em;
  }
  
  #quizss {
    display: none;
  }
  
  .word {
    white-space: nowrap;
  }
<script src=""/scripts/snippet-javascript-console.min.js?v=1""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.0/anime.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<div id=""q-container"">
<div class=""quiz"">Question-1 : The color of !the sky is...?</div>
<div class=""quiz"">Question-2 : Paper comes from...?</div>
<div class=""quiz"">Question-3 : How many hours in a day?</div>
<div class=""quiz"">Question-4 : A Giraffe is a fish?</div>
</div>

<div id=""rect""></div>

<br><br>
<textarea class=""input"" id=""input"" placeholder=""Message...""></textarea>
<button class=""waves-effect waves-light"" id=""send-btn"">Send</button>

<br><br>
<Button id=""rc"" onclick=""previous()"">previous</Button>
<Button id=""rc"" onclick=""next()"">Next</Button>",0
65152508,"new Vue({
  el: '#app',

  computed: {
    currentStep() {
      return this.steps.filter(s => s.order === this.activeStep);
    }
  },

  data: () => {
    return {
      activeStep: 1,
      steps: [{
          order: 1,
          title: ""Title 1?"",
          headline: ""Headline 1"",
          component: ""product-info""
        },
        {
          order: 2,
          title: ""Title 2"",
          headline: ""Headline 2."",
          component: ""product-info""
        },
        {
          order: 3,
          title: ""Title 3"",
          headline: ""Headline 3."",
          component: ""product-info""
        },
        {
          order: 4,
          title: ""Title 4!"",
          headline: ""Headline 4"",
          component: ""product-info""
        }
      ]
    };
  },
});

Vue.config.productionTip = false;
Vue.config.devtools = false;
.component-wrapper {
  width: 100%;
}

.steps-viewport {
  height: calc(100vh - 10rem);
  /* overflow: hidden */
  display: flex;
  flex-direction: column;
}

.step-wrapper {
  flex: 0 0 calc(100vh - 10rem);
  display: flex;
  justify-content: center;
  flex-direction: column;
}

.steps-enter-active {
  opacity: 0;
  transform: translateY(100%);
  transition: all 0.4s;
}

.steps-enter-to {
  opacity: 1;
  transform: translateY(0);
}
<script src=""https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.js""></script>

<div id=""app"">
  <transition-group class=""steps-viewport"" name=""steps"" tag=""div"" appear>
    <div v-for=""step in currentStep"" :key=""step.order"" class=""step-wrapper"">
      <h3 class=""is-size-5 mb-6 has-text-grey-light"">
        Passo {{ step.order }}
      </h3>
      <h1 class=""is-size-3"">{{ step.title }}</h1>
      <h2 class=""is-size-4 mt-2 has-text-grey"">{{ step.headline }}</h2>
    </div>
  </transition-group>
</div>
new Vue({
  el: '#app',

  computed: {
    currentStep() {
      return this.steps.filter(s => s.order === this.activeStep);
    }
  },

  data: () => {
    return {
      activeStep: 1,
      steps: [{
          order: 1,
          title: ""Title 1?"",
          headline: ""Headline 1"",
          component: ""product-info""
        },
        {
          order: 2,
          title: ""Title 2"",
          headline: ""Headline 2."",
          component: ""product-info""
        },
        {
          order: 3,
          title: ""Title 3"",
          headline: ""Headline 3."",
          component: ""product-info""
        },
        {
          order: 4,
          title: ""Title 4!"",
          headline: ""Headline 4"",
          component: ""product-info""
        }
      ]
    };
  },
});

Vue.config.productionTip = false;
Vue.config.devtools = false;
.component-wrapper {
  width: 100%;
}

.steps-viewport {
  height: calc(100vh - 10rem);
  /* overflow: hidden */
  display: flex;
  flex-direction: column;
}

.step-wrapper {
  flex: 0 0 calc(100vh - 10rem);
  display: flex;
  justify-content: center;
  flex-direction: column;
}

.steps-enter-active {
  opacity: 0;
  transform: translateY(100%);
  transition: all 0.4s;
}

.steps-enter-to {
  opacity: 1;
  transform: translateY(0);
}
<script src=""https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.js""></script>

<div id=""app"">
  <div v-for=""step in currentStep"" :key=""step.order"" class=""step-wrapper"">
    <transition-group class=""steps-viewport"" name=""steps"" tag=""div"" appear>
      <h3 class=""is-size-5 mb-6 has-text-grey-light"" key=""1"">
        Passo {{ step.order }}
      </h3>
      <h1 class=""is-size-3"" style=""transition-delay: 0.1s"" key=""2"">{{ step.title }}</h1>
      <h2 class=""is-size-4 mt-2 has-text-grey"" style=""transition-delay: 0.2s"" key=""3"">{{ step.headline }}</h2>
    </transition-group>
  </div>
</div>
new Vue({
  el: '#app',

  computed: {
    currentStep() {
      return this.steps.filter(s => s.order === this.activeStep);
    }
  },

  methods: {
    nextStep() {
      if (this.activeStep !== this.steps.length) {
        this.activeStep++;
      } else {
        this.activeStep = 1;
      }
    }
  },

  data: () => {
    return {
      activeStep: 1,
      steps: [{
          order: 1,
          title: ""Title 1?"",
          headline: ""Headline 1"",
          component: ""product-info""
        },
        {
          order: 2,
          title: ""Title 2"",
          headline: ""Headline 2."",
          component: ""product-info""
        },
        {
          order: 3,
          title: ""Title 3"",
          headline: ""Headline 3."",
          component: ""product-info""
        },
        {
          order: 4,
          title: ""Title 4!"",
          headline: ""Headline 4"",
          component: ""product-info""
        }
      ]
    };
  },
});

Vue.config.productionTip = false;
Vue.config.devtools = false;
.component-wrapper {
  width: 100%;
}

.steps-viewport {
  height: calc(100vh - 10rem);
  /* overflow: hidden */
  display: flex;
  flex-direction: column;
}

.step-wrapper {
  flex: 0 0 calc(100vh - 10rem);
  display: flex;
  justify-content: center;
  flex-direction: column;
}

.step-wrapper,
.step-wrapper>* {
  transition: all 0.4s;
}

.step-wrapper>h1 {
  transition-delay: 0.1s;
}

.step-wrapper>h2 {
  transition-delay: 0.2s;
}

.steps-enter-active>* {
  opacity: 0;
  transform: translateY(100%);
}

.steps-leave-to>* {
  opacity: 0;
  transform: translateY(-100%);
}

.steps-enter-to>* {
  opacity: 1;
  transform: translateY(0);
}
<script src=""https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.js""></script>

<div id=""app"">
  <transition name=""steps"" mode=""out-in"" duration=""600"" appear>
    <div v-for=""step in currentStep"" :key=""step.order"" class=""step-wrapper"">
      <h3 class=""is-size-5 mb-6 has-text-grey-light"">
        Passo {{ step.order }}
      </h3>
      <h1 class=""is-size-3"">{{ step.title }}</h1>
      <h2 class=""is-size-4 mt-2 has-text-grey"">{{ step.headline }}</h2>
    </div>
  </transition>
  <button @click=""nextStep()"">Next</button>
</div>",1
65154532,"const path = require('path');
const glob = require('glob');

module.exports = {
  entry: Object.fromEntries(glob.sync(path.resolve(__dirname, 'src/js/*.js')).map((v) => [
    path.basename(v, '.js'), v,
  ])),
  output: {
    filename: '[name].js',
    path: path.resolve(__dirname, 'dist'),
  },
};
",1
65103644,"import React, { useState } from 'react';
import { useDispatch } from ""react-redux"";
import { Container } from '../../components';
import { CreateUserRequest } from '../../redux/actions';

const createUser = () => {
  const dispatch = useDispatch()
  const [newuser, setNewuser] = useState({
    first_name : '',
    last_name : '',
    email : '',
    phone_number: '',
    status:0
  });

  ...

  //Add new user 
  const add_user = () => {
    dispatch(CreateUserRequest({ newuser })); // <-- dispatch action payload
  }

  return (
    ...
  )
}
",1
65121834,"const useSearch = (query: string, sources: string[]) => {
  // ...
  useEffect(() => {
    // ...

    // FIX:
    // just apply the spread operator (...) to `sources`
    // to spread its elements into the dependency array of `useEffect`
  }, [query, ...sources]);

  return response;
};
",1
65152688,"const router = new VueRouter({
  ...
  scrollBehavior (to, from, savedPosition) {
    if (to.hash) {
      return {
        selector: to.hash,
        behavior: 'smooth'
      };
    }
    return { x: 0, y: 0 };  // Go to the top of the page if no hash
  },
  ...
})
",1
65141288,"#gallery-content-center {
    margin: 0 auto;
    width: 1240px;
    float: none;
}

@media screen and (max-width: 1250px) {
    #gallery-content-center {
        width: 930px;
    }
}

@media screen and (max-width: 960px) {
    #gallery-content-center {
        width: 620px;
    }
}

@media screen and (max-width: 670px) {
    #gallery-content-center {
        width: 310px;
    }
}
",1
65137567,"var ctors = [typeof NodeList !== ""undefined"" && NodeList, typeof HTMLCollection !== ""undefined"" && HTMLCollection];
for (var n = 0; n < ctors.length; ++n) {
    var ctor = ctors[n];
    if (ctor && ctor.prototype && !ctor.prototype.forEach) {
        ctor.prototype.forEach = Array.prototype.forEach;
        if (typeof Symbol !== ""undefined"" && Symbol.iterator && !ctor.prototype[Symbol.iterator]) {
            Object.defineProperty(ctor.prototype, Symbol.iterator, {
                value: Array.prototype[Symbol.itereator],
                writable: true,
                configurable: true
            });
        }
    }
}
",1
65144257,"
export type Config = {};

export interface BaseBO {
    condition?: (config: Config) => boolean;
}

export interface ContractDetailBO extends BaseBO {
    sections: ContractSectionBO[];
}

export interface ContractSectionBO extends BaseBO {
    items: ContractSectionItemBO[];
}

export interface ContractSectionItemBO extends BaseBO {
    label: string;
}

export type AnyBO = ContractDetailBO | ContractSectionBO | ContractSectionItemBO;

function isContractDetailBO(target: AnyBO): target is ContractDetailBO {
    return (target as ContractDetailBO).sections != null;
}
function isContractSectionBO(target: AnyBO): target is ContractSectionBO {
    return (target as ContractSectionBO).items != null;
}

export function populate<T extends AnyBO>(inputArray: T[], config: Config): T[] {
    const returnItems: T[] = [];
    for (const item of inputArray) {
        // include this item if the condition passes or is not defined
        if (!item.condition || item.condition(config)) {
            const itemToPopulate = { ...item };

            // check type of item so we know the next array to iterate

            if (isContractDetailBO(itemToPopulate)) {
                const nextArray: ContractSectionBO[] = populate(itemToPopulate.sections, config);
                itemToPopulate.sections = nextArray;
            }
            if (isContractSectionBO(itemToPopulate)) {
                const leaves: ContractSectionItemBO[] = populate(itemToPopulate.items, config);
                itemToPopulate.items = leaves;
            }
            returnItems.push(itemToPopulate);
        }
    }
    return returnItems;
}
",1
65127162,"function myfunction(X) {
 var list = document.getElementsByClassName(X + "" class2"");
 var listAll = document.getElementsByClassName(""All"");
 
     for(var t=0;t<listAll.length;t++)
    listAll[t].style.display=""none"";
    
     for(var y=0;y<list.length;y++)
    list[y].style.display=""block"";
 
}",1
65139602,"<div>
   <div>
      <input type=""text"" name="""" tabindex=""0"" styling=""[object Object]"" 
      placeholder=""YYYY/MM/DD"" aria-label=""date"" aria-invalid=""false"" 
      valid=""1"" class=""needsclick TextInput__FormStyledTextInput-sc-1o6de9f-0 
      fsIKy kl-private-reset-css-Xuajs1"">
  </div>
</div>
<div>
   <div>
      <input type=""text"" name="""" tabindex=""0"" styling=""[object Object]"" 
      placeholder=""YYYY/MM/DD"" aria-label=""date"" aria-invalid=""false"" 
      valid=""1"" class=""needsclick TextInput__FormStyledTextInput-sc-1o6de9f-0 
      fsIKy kl-private-reset-css-Xuajs1"">
  </div>
</div>",1
65138927,"export default {
  name: 'CustomHandlers',
  methods: {
    // handlers: (map, vm) => {
    // if it is arrow function,it can't do the trick 
    // thanks to  Yair Cohen
       handlers(map, vm) {
        const self = this;
        return {
          ...map, 50: e => {
            e.preventDefault();
            if( e.key === '@' && vm.search.length > 0 ) {
              vm.search = `${vm.search}@gmail.com`;
              // self will be this here
              const self2 = self;
            }
          },
        };
    },
  },
};
",1
65138853,"function navbar(id,CSVdata) {
        if(CSVdata){
           console.log('CSVdata',CSVdata)
           return `<div class=""dropdown-menu"" aria-labelledby=""dropdownMenuButton"">
                    <a id=""downloadcsv${id}"" class=""dropdown-item"" href=""#"" onclick='downloadCSV(${id},${JSON.stringify(CSVdata)})'>Download CSV</a>
                   </div>
            `;
        }
 }

function downloadCSV(id,data) {
    console.log(""downloadcsv"",data);
}
",1
65115879,"<html>

<head>
  <link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css"">

  <style>
    td {
      cursor: pointer;
    }
  </style>
</head>

<body>
  <table id=""myTable"">
    <tr>
      <th>Head Row</th>
      <th>One</th>
      <th>Two</th>
      <th>Three</th>
      <th>Four</th>
      <th>Five</th>
    </tr>
    <tr>
      <th>Title 1</th>
      <td>10<span class=""spanClass""></span></td>
      <td>9<span class=""spanClass""></span></td>
      <td>5<span class=""spanClass""></span></td>
      <td>3<span class=""spanClass""></span></td>
      <td>2<span class=""spanClass""></span></td>
      <td>1<span class=""spanClass""></span></td>
    </tr>
    <tr>
      <th>Title 2</th>
      <td>25<span class=""spanClass""></span></td>
      <td>19<span class=""spanClass""></span></td>
      <td>16<span class=""spanClass""></span></td>
      <td>15<span class=""spanClass""></span></td>
      <td>10<span class=""spanClass""></span></td>
      <td>2<span class=""spanClass""></span></td>
    </tr>
  </table>


  <script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js""></script>
  <script>
    window.onload = function() {
      $('#myTable tr td:not(:nth-child(2))').on('click', function() {
        // clear all span
        $('.spanClass').html('');

        // $(this) is your clicked td
        var $tr = $(this).parent('tr');
        var firstCell = $tr.find(""td:first"").text();
        var didIt = (this.innerText - firstCell);

        $(this).find('.spanClass').html(didIt);
      });
    }
  </script>

</body>

</html>",1
65121451,"highlightRows = () => {
    let oddRows = document.querySelectorAll('tbody > tr.show')
    oddRows.forEach((row, index)=> {
        if (index % 2 == 0) {
            row.style.background = '#f1f1f1'
        } else {
            row.style.background = '#fff'
        }
    })
}
const filterOptions = () => {
    const option = document.querySelector(""#filter"").value;

    const selection = option.replace('&', '')
       
    var rows = document.querySelectorAll(""#body1 > tr"");
   

    rows.forEach(row => {
        let td = row.querySelector(""td:last-child"");
        let filter = td.innerText.replace('&', '');
        if (filter === selection) {
            row.className = 'show'
        } else {
            row.className = 'hidden'
        }
    });
    highlightRows()
};
document.getElementById(""filter"").addEventListener(""change"", filterOptions);
.table-filters {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 2em;
}
.table-filters a {
  color: #222;
  font-size: 16px;
  font-weight: 500;
  margin-right: 1em;
  display: inline-block;
}
.table-filters a:hover {
  text-decoration: none;
}
.table-filters select {
  background: #fff;

  font-size: 16px;
  font-weight: 500;
  width: 12em;
  height: 2.5em;
}

table.stats {
  background: #fff;
  width: 100%;
  table-layout: fixed;
  border-radius: 6px;
}

thead {
  background: #F36F20;
  color: #fff;
}

th {
  font-size: 16px;
  font-weight: 500;
  text-align: left;
  padding: 1em;
  border-bottom: 1px solid #ddd;
}

tbody td {
  padding: 1.5em 1em;
}

tbody tr.show {
  display: table-row;
}
tbody tr.hidden {
  display: none;
}
tbody tr.bg-grey, tbody tr:nth-child(odd) {
  background: #f1f1f1;
}
tbody tr:last-child td {
  border-bottom: none;
}
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<div class=""table-filters"">
    <select id=""filter"">
      <option disabled selected value=""none"">Kategórie</option>
      <option>Domov</option>
      <option>Ostatné</option>
      <option>Hobby</option>
      <option>Záhrada</option>
    </select>
  </div>
    <div class=""wrapper"">
  
      <table class=""stats"">
        <thead>
          <tr class=""head"">
            <th>Názov</th>
            <th>Suma</th>
            <th>Kategória</th>
          </tr>
        </thead>
        <tbody id='body1'>
          <tr class=""head"">
            <td>Lorem</td>
            <td>Ipsum</td>
            <td>Ostatné</td>
          </tr>
          <tr class=""head"">
            <td>Lorem</td>
            <td>Ipsum</td>
            <td>Ostatné</td>
          </tr>
          <tr class=""head"">
            <td>Lorem</td>
            <td>Ipsum</td>
            <td>Domov</td>
          </tr>
          <tr class=""head"">
            <td>Lorem</td>
            <td>Ipsum</td>
            <td>Ostatné</td>
          </tr>
          <tr class=""head"">
            <td>Lorem</td>
            <td>Ipsum</td>
            <td>Hobby</td>
          </tr>
          <tr class=""head"">
            <td>Lorem</td>
            <td>Ipsum</td>
            <td>Hobby</td>
          </tr>
          <tr class=""head"">
            <td>Lorem</td>
            <td>Ipsum</td>
            <td>Domov</td>
          </tr>

        </tbody>
      </table>
</div>",1
65096347,"<div class=""row"">
    <div class=""col-12 col-md-4"">
        <div class=""card"">#1</div>
        <div class=""card"">#4</div>
    </div>
    <div class=""col-12 col-md-4"">
        <div class=""card"">#2</div>
        <div class=""card"">#5</div>
    </div>
    <div class=""col-12 col-md-4"">
        <div class=""card"">#3</div>
    </div>
</div>
",1
65104653,"<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<div class=""select_tags"">
  <select>
    <option>val1</option>
    <option>val2</option>
  </select>
  <select>
    <option>val11</option>
    <option>val12</option>
  </select>
  <select>
    <option>val21</option>
    <option>val22</option>
  </select>
</div>",1
65162325,"render() {
    return (
        // ...
        // In my knowledge JS event listeners are more taxing on the performance
        {
            if($(window).width() >= 1024){
                return <div className=""bigger-than-1024""> RENDERED CONDITIONALLY </div>
            }
        }
    );
}
",1
65131508,"
import React from 'react';
import {View, StyleSheet,Text} from 'react-native';

export default function Campaign({ data }) {
  return( 
    <View> 
      <Text>{data.name}</Text> 
      <Text>{data.id}</Text> 
    </View> 
  ); 
} 

const styles = StyleSheet.create({ 
  name: { fontSize: 50, color: 'black' }, 
  id: { fontSize: 10, color: 'grey' },
});


",1
65116922,"function App() {
  const [company, setCompany] = useState([]);
  const [price, setPrice] = useState([]);
  const [symbol, setSymbol] = useState([]);

  function fetchCompanyProfile(e) {
    let company = '';
    if(e.target.target.ticker.value){
      company = e.target.ticker.value
    } else {
      company = e.target.innerHTML;
    }
    console.log(company);
    e.preventDefault();
    e.target.reset();
    fetch('https://someapicompany.com/profile/${company}?apikey=xyz')
      .then(res => res.json())
      .then(data => {
        setCompany({ data })
      });

  }

  console.log(company.data)

  return (
    <div className=""App"">
      <SearchTicker/>
      <SearchCompanyProfile getCompanyProfile={fetchCompanyProfile}/>
      <TickerResults ticker={symbol} getTicker={fetchCompanyProfile}/>
      <CompanyProfile company={company}/>
    </div>
  );
}",1
65126233,"function roundDown(floating) {
    var rounded = Math.round(floating * 100) / 100;
    return rounded;
}

const start = new Date(""2020-12-03T11:30:00Z"").getTime() / (1000 * 3600);
const end = new Date(""2020-12-03T13:00:00Z"").getTime() / (1000 * 3600)


let total = roundDown(end - start);


//just add these lines of code
const remaining = total - Math.floor(total);
const minutes = 60 * remaining;
console.log(""Minutes : "" + Math.round(minutes) + ""\tHours : "" + Math.floor(total));",1
65134965,"<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js""></script>
<table class=""table"">
  <thead>
    <tr>
      <th>Col 1</th>
      <th>Col 2</th>
      <th>Col 3</th>
      <th>Col 4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1.1</td>
      <td>1.2</td>
      <td>1.3</td>
      <td>1.4</td>
    </tr>
    <tr>
      <td>2.1</td>
      <td>2.2</td>
      <td>2.3</td>
      <td>2.4</td>
    </tr>
    <tr>
      <td>3.1</td>
      <td>3.2</td>
      <td>3.3</td>
      <td>3.4</td>
    </tr>
  </tbody>
</table>",1
65139518,"const express = require('express')
const bodyParser = require(""body-parser"");
const fs = require('fs')
const app = express()
const port = 3000

app.use(bodyParser.text());
app.post('/', (req, res) => {
  
fs.writeFileSync( ""file.csv"", req.body, ""utf8"" )
res.send(""success"")
})

app.listen(port, () => {
  console.log(`Example app listening at http://localhost:${port}`)
})

// Example with a full-fledged request
const postRequest = {
    url: 'http://localhost:3000/',
    method: 'POST',

    body: {
        mode: 'raw',
        raw: data
    }
};
pm.sendRequest(postRequest, (error, response) => {
    //console.log(error ? error : response.json());
});
",1
65148802,"let placea = 'Shopping Mall'
let placeb = 'Library'

let people = ['John', 'Sam', 'Ryan', 'Liam', 'David'];
let person = people[Math.floor(Math.random() * people.length)];

if (person === 'John' || person === 'Liam' || person === 'Sam') {
  console.log(`Lets go to the ${placea}`)
} else {
  console.log(`I love quiet places, lets go to the ${placeb}`)
}",1
65163215,"const Markdown = (props) => {
  const markdown = `
  This is rendered as a '<p>' element

  So is this one!

  Me too!
  `;

  useEffect(() => {
    // Get all of the <p> elements
    const pElements = document.getElementsByTagName(""p"");

    // Create a button
    const button = document.createElement(""button"");
    button.id = ""btn-1"";
    button.innerHTML = ""I'm a button!"";

    const refChild = pElements[1];
    // Insert the button before the next sibling of the second <p> tag
    refChild && refChild.parentNode.insertBefore(button, refChild.nextSibling);
  }, []);

  return <ReactMarkdown children={markdown} />;
};
",1
65142482,"<application
  android:name="".MainApplication""
  android:label=""@string/app_name""
  android:icon=""@mipmap/ic_launcher""
  android:roundIcon=""@mipmap/ic_launcher_round""
  android:allowBackup=""false""
  android:theme=""@style/AppTheme""
 >   
  <activity
     android:name="".MainActivity""
    android:label=""@string/app_name""
android:configChanges=""keyboard|keyboardHidden|orientation|screenSize|uiMode""
   android:launchMode=""singleTask""
   android:windowSoftInputMode=""adjustResize"">
   <intent-filter>
     <action android:name=""android.intent.action.MAIN"" />
     <category android:name=""android.intent.category.LAUNCHER"" />
   </intent-filter>
 </activity>
 <activity android:name=""com.facebook.react.devsupport.DevSettingsActivity"" />
 <meta-data android:name=""android:name=""com.google.android.geo.API_KEY""""
  android:value=""AIzaSyDPUc0RSV5OZzACrJcFPuBpxUHi0000000"" />
 </application>
",1
65143718,"let productDetails = [
    {
        id: ""1"",
        partNo: ""10"",
        productName: ""bag"",
        size: ""30"",
        color: [""Blue""],
        description: ""sky bags "",

    },
    {
        id: ""2"",
        partNo: ""15"",
        productName: ""bottle"",
        size: ""10"",
        color: [""Green"", ""Orange""],
        description: ""plastic and still"",
    },
    {
        id: ""4"",
        partNo: ""20"",
        productName: ""lunchbox"",
        size: ""20"",
        color: [""Blue"", ""Red""],
        description: ""fresh food"",
    },
    {
        id: ""3"",
        partNo: ""40"",
        productName: ""pen"",
        size: ""10"",
        color: [""Red"", ""Blue""],
        description: ""gel pen "",

    }, {
        id: ""5"",
        partNo: ""35"",
        productName: ""notebook"",
        size: ""30"",
        color: [""Blue"", ""Red"", ""Orange""],
        description: ""Writing"",
    }
]

/** * function to add company details */
function addCompanyDetails() {
    let data = (document.getElementById('productId').value);
    let date1 = document.getElementById('date').value;
    let Caddress = document.getElementById('address').value;
    let Cname = (document.getElementById('companyName').value);

    if (data === '') {
        message(""enter id for search"");
    }
    for (let i = 0; i < productDetails.length; i++) {
        let companyDetails = productDetails[i].companyDetails ? productDetails[i].companyDetails : { date: """", address: """", companyName: """" };
        let p = companyDetails;
        if ((productDetails[i].id) == (data)) {
            p.companyName = Cname ;
            productDetails[i].date = date1 ;
            productDetails[i].address = Caddress;
            productDetails[i].companyName=Cname;
            
            
        }
       
        displayData();
        clearInputData();
    }
}

/** * this function display the data in table */
function displayData(companyDetails) {
    objectArray = Object.values(productDetails);
    display(objectArray, companyDetails,clearInputData);
}

/** * this function is for get the value from form */
function getValue() {
    let id = document.getElementById('productId').value;
    let date = document.getElementById('date').value;
    let address = document.getElementById('address').value;
    let companyName = document.getElementById('companyName').value;
    return { id, date, address, companyName };
}

/** * Function is to display the data in table */
function display(productStore,callBack) {
    messageTable("" "");
    let data = productDetails;
   
   
    let table = ""<table border = 1 cellpadding = 10 ><th colspan=7 >Product Details</th><th colspan=7 >company Details</th><tr><th>Product Id</th><th>Part No</th><th>Name</th><th>Size</th><th>Color</th><th>Description</th><th>weight</th><th>Date</th><th>Address</th><th>Company name</th></tr>"";
    for (let i = 0; i < data.length; i++) {
       
        if (data[i].productWeight === undefined) {
            data[i].productWeight = "" "";
        } else { }
        if (data[i].companyName === undefined) {
            data[i].companyName = "" "";
        } else { }
        if (data[i].date === undefined) {
            data[i].date = ""   "";
        } else { }
        if (data[i].address === undefined) {
            data[i].address = ""   "";
        } else { }

        table += ""<tr><td>"" + data[i].id + ""</td>"";
        table += ""<td>"" + data[i].partNo + ""</td>"";
        table += ""<td>"" + data[i].productName + ""</td>"";
        table += ""<td>"" + data[i].size + ""</td>"";
        table += ""<td>"" + data[i].color + ""</td>"";
        table += ""<td>"" + data[i].description + ""</td>"";
        table += ""<td>"" + data[i].productWeight + ""</td>"";
        table += ""<td>"" + data[i].date + ""</td>"";
        table += ""<td>"" + data[i].address + ""</td>"";
        table += ""<td>"" + data[i].companyName + ""</td>"";
    }
    messageTable(table);

    clearInputData();
}
/** * function is to print the table */
function messageTable(data) {
    document.getElementById(""messageTableA"").innerHTML = data;
}

/** * this function is to clear the data */
function clearInputData() {
    document.getElementById(""productId"").value = """";
    document.getElementById(""address"").value = """";
    document.getElementById(""date"").value = """";
    document.getElementById(""companyName"").value = """";
}
<!DOCTYPE html>
<html>

<head>
    <script src=""home.js""></script>
    <style>
        th,
        td,
        p,
        input {
            font-family: Arial, Helvetica, sans-serif;
        }

        table,
        th,
        td {
            border: solid 1px #DDD;
            border-collapse: collapse;
            padding: 10px 10px;
            text-align: center;
        }

        th {
            font-weight: bold;
        }
    </style>
</head>

<body onload=""display()"">
    <h2>Product Details:</h2>
    <form action="""">
        <label for=""id"">Id: </label>&nbsp;&nbsp; <input type=""number"" id=""productId"" required> <input type=""button""
            value=""autofill"" onclick=""auto()""><br><br> 

        <label for=""EstablishDate"">Establish Date:</label>&nbsp;&nbsp; <input type=""date"" id=""date"" required><br><br>
        <label for=""address"">Address:</label><br><br> <textarea name=""address"" id=""address"" cols=""30""
            rows=""10""></textarea><br><br>
        <label for=""CompanyName"">Company Name:</label>&nbsp;&nbsp; <input type=""text"" id=""companyName"" required><br><br>


        <input type=""button"" value=""add company details"" onclick=""addCompanyDetails()""><br><br>
        <p id=""result""></p>
        <p id=""demo""></p>
        <p id=""messageTableA""></p>
    </form>
</body>

</html>",1
65103650,"<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"" />
    <title></title>
    <script>
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf(""MSIE "");
        if (!(msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))) //If not IE, load d3 script
        {
            document.write('<script src=""scripts/d3.js""><\/script>');
        } 
    </script>
</head>
<body>
    <svg>
        <circle class=""target"" style=""fill: #69b3a2"" stroke=""black"" cx=50 cy=50 r=40></circle>
    </svg>
    <script>
        if (window.d3) {
            d3.select("".target"").style(""stroke-width"", 8);
        }
        else {
            alert(""IE"");
        }
    </script>
</body>
</html>
",1
65097032,"
$("".create"").click(function(){
  let element = `
      <div id=""card"" class=""card col- 3"" style=""width:18rem;style=""margin-right=3%; margin-right=3%""><img src=""..."" class=""card-img-top"" alt=""..."" id=""image""+String(cnt)><div class=""card-body""><h5 class=""card-title"" id=""title"" contentEditable=""true"">Card title</h5><p class=""card-text"" id=""desc"" contentEditable=""true"">Some quick example text to build on the card title and make up the                     bulk of the'                    card\'s content.</p><a href=""#"" class=""btn btn-primary"" id=""button""+ String(cnt) >Go somewhere</a><a href=""#"" class=""close"" onclick='deleteCard(this)'>Delete</a></div></div>`;
  document.getElementById(""lastRow"").innerHTML+=element;
});

function deleteCard(delBtn){
  delBtn.parentNode.parentNode.hidden = true
}

",1
65132635,"let isClauseValid, isCaptchaValid;

function clauseValid(elem) {
  isClauseValid = elem.checked;
  setButton();
}

function captchaValid() {
  isCaptchaValid = true;
  setButton();
}

function setButton() {
  document.getElementById(""sendBtn"").disabled = !isClauseValid || !isCaptchaValid;
}
",1
65101281,"var xmlData = `<?xml version='1.0' encoding='UTF-8'?>
<dataset>
    <MOCK_DATA id=""1"" first_name=""Sandor"" last_name=""Balmer"" email=""sbalmer0@qq.com"" gender=""Male"" ip_address=""148.134.84.45""/>
    <MOCK_DATA id=""2"" first_name=""Val"" last_name=""Toll"" email=""vtoll1@tamu.edu"" gender=""Male"" ip_address=""249.13.225.19""/>
    <MOCK_DATA id=""3"" first_name=""Phyllida"" last_name=""Purrier"" email=""ppurrier2@vimeo.com"" gender=""Female"" ip_address=""156.189.251.161""/>
    <MOCK_DATA id=""4"" first_name=""Marjy"" last_name=""Pittam"" email=""mpittam3@businessinsider.com"" gender=""Female"" ip_address=""193.195.178.210""/>
    <MOCK_DATA id=""5"" first_name=""Kirbee"" last_name=""Regglar"" email=""kregglar4@unblog.fr"" gender=""Female"" ip_address=""251.218.161.174""/>
    <MOCK_DATA id=""6"" first_name=""Mariquilla"" last_name=""Caseri"" email=""mcaseri5@symantec.com"" gender=""Female"" ip_address=""247.187.208.116""/>
    <MOCK_DATA id=""7"" first_name=""Juline"" last_name=""Coase"" email=""jcoase6@indiatimes.com"" gender=""Female"" ip_address=""23.117.236.168""/>
    <MOCK_DATA id=""8"" first_name=""Courtnay"" last_name=""Scown"" email=""cscown7@ask.com"" gender=""Female"" ip_address=""120.80.78.72""/>
    <MOCK_DATA id=""9"" first_name=""Armin"" last_name=""Mc Caghan"" email=""amccaghan8@ameblo.jp"" gender=""Male"" ip_address=""244.47.41.88""/>
    <MOCK_DATA id=""10"" first_name=""Josie"" last_name=""Gunthorp"" email=""jgunthorp9@yahoo.co.jp"" gender=""Female"" ip_address=""169.142.65.100""/>
</dataset>`

parser = new DOMParser();
xmlDoc = parser.parseFromString(xmlData, ""text/xml"");
mock_data =  xmlDoc.getElementsByTagName(""MOCK_DATA"");

for (let data in mock_data){
  console.log(mock_data[data].getAttribute('first_name'))
}",1
65114949,"<html>

<head>
  <script type=""text/javascript"" src=""https://cdn.jsdelivr.net/npm/vue/dist/vue.js""></script>
</head>
<div id=""app"">
  <span v-if=""seen"">Now you see me</span>

</div>
<script type=""text/javascript"">
  new Vue({
    el: ""#app"",
    data() {
      return {
        seen: true,
      };
    },
  });
</script>
<style>

</style>

</html>",1
65092097,"data() {
  return {
    mydata: {
      ohlcv: [  // Taken from their docs, this name seems to be important
        [ 1551128400000, 33,  37.1, 14,  14,  196 ],
        [ 1551132000000, 13.7, 30, 6.6,  30,  206 ],
        [ 1551135600000, 29.9, 33, 21.3, 21.8, 74 ],
        [ 1551139200000, 21.7, 25.9, 18, 24,  140 ],
        [ 1551142800000, 24.1, 24.1, 24, 24.1, 29 ],
      ]
    }
  }
},

/***** APP *****/
new Vue({
  el: ""#app"",
  data() {
    return {
      mydata: {
        ohlcv: [
          [ 1551128400000, 33,  37.1, 14,  14,  196 ],
          [ 1551132000000, 13.7, 30, 6.6,  30,  206 ],
          [ 1551135600000, 29.9, 33, 21.3, 21.8, 74 ],
          [ 1551139200000, 21.7, 25.9, 18, 24,  140 ],
          [ 1551142800000, 24.1, 24.1, 24, 24.1, 29 ],
        ]
      }
    }
  },
  components: {
    trading: TradingVueJs.TradingVue
  }
});",1
65154259,"<script>
function copyToClipboard(elementId) {

  // Create a ""hidden"" input
  var aux = document.createElement(""input"");

  // Assign it the value of the specified element
  aux.setAttribute(""value"", document.getElementById(elementId).innerHTML);

  // Append it to the body
  document.body.appendChild(aux);

  // Highlight its content
  aux.select();

  // Copy the highlighted text
  document.execCommand(""copy"");

  // Remove it from the body
  document.body.removeChild(aux);
alert(elementId + "" Text copied"");
  
let textarea = document.getElementById(""select-this"");
  textarea.focus();
}
</script>

<div class=""wrapper"">
  <p id=""p1"">P1: I am paragraph 1</p>
<p id=""p2"">P2: I am a second paragraph</p>
<p id=""p3"">P3: I am a 3 paragraph</p>
<button onclick=""copyToClipboard('p1')"">Copy P1</button>
<button onclick=""copyToClipboard('p2')"">Copy P2</button>
<button onclick=""copyToClipboard('p3')"">Copy P3</button>
<br/><br/>
  
  <textarea id=""select-this"" value=""I just copied this with only JavaScript""/></textarea>
</div>
",1
65091570,"//on change of select or checkbox
$('select ,input[type=checkbox] ').on('change', function() {
  var selector = $(this).closest(""tr"")//get closest tr
  //if checkbox is checked
  if (selector.find(""input[type=checkbox]"").is("":checked"")) {
  //get select valus
    var prcs_type = selector.find(""select[name=processing_type]"").val();
    var no_person = selector.find(""select[name=no_of_person]"").val();
    var total = prcs_type * no_person;
    selector.find("".package_price"").text(total)//add value to package_prcie.
  }
});
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.0/jquery.min.js""></script>
<table>
  <tr class=""valid-container"">
    <td style=""cursor:pointer;"">
      <input type=""checkbox"" name=""c1"" id=""c1"">1
    </td>

    <td height=""52"">
      <select class=""custom-select processing_type"" name=""processing_type"" data-id=""1"" required>
        <option value=""19"" selected>Normal</option>
        <option value=""20"">Express</option>
      </select>
    </td>

    <td height=""52"">
      <select class=""custom-select no_of_person"" name=""no_of_person"" data-id=""1"" required>
        <option value=""1"" selected>1</option>
        <option value=""2"">2</option>
        <option value=""3"">3</option>
        <option value=""4"">4</option>
        <option value=""5"">5</option>
        <option value=""6"">6</option>
        <option value=""7"">7</option>
        <option value=""8"">8</option>
        <option value=""9"">9</option>
        <option value=""10"">10</option>
      </select>

    </td>

    <td width=""190"" height=""60"">
      <div class=""input-group date"" data-date-format=""dd.mm.yyyy"">
        <div class=""input-group mb-2"">
          <input type=""text"" class=""form-control"" name=""travel_date"" id=""date"" placeholder=""dd.mm.yyyy"">
          <div class=""input-group-text""><i class=""ti-calendar""></i></div>
          <div class=""input-group-addon"">
          </div>
          <div class=""input-group-prepend"">
          </div>
        </div>
      </div>

    </td>
    <td>{{ j.currency_type }}&nbsp;&nbsp; <output name=""result"" class=""package_price"">{{ j.price }}</output>.00</td>

  </tr>
  <tr class=""valid-container"">
    <td style=""cursor:pointer;"">
      <input type=""checkbox"" name=""c1"" id=""c1"">2
    </td>

    <td height=""52"">
      <select class=""custom-select processing_type"" name=""processing_type"" data-id=""2"" required>
        <option value=""19"" selected>Normal</option>
        <option value=""20"">Express</option>
      </select>
    </td>

    <td height=""52"">
      <select class=""custom-select no_of_person"" name=""no_of_person"" data-id=""2"" required>
        <option value=""1"" selected>1</option>
        <option value=""2"">2</option>
        <option value=""3"">3</option>
        <option value=""4"">4</option>
        <option value=""5"">5</option>
        <option value=""6"">6</option>
        <option value=""7"">7</option>
        <option value=""8"">8</option>
        <option value=""9"">9</option>
        <option value=""10"">10</option>
      </select>

    </td>

    <td width=""190"" height=""60"">
      <div class=""input-group date"" data-date-format=""dd.mm.yyyy"">
        <div class=""input-group mb-2"">
          <input type=""text"" class=""form-control"" name=""travel_date"" id=""date"" placeholder=""dd.mm.yyyy"">
          <div class=""input-group-text""><i class=""ti-calendar""></i></div>
          <div class=""input-group-addon"">
          </div>
          <div class=""input-group-prepend"">
          </div>
        </div>
      </div>

    </td>
    <td>{{ j.currency_type }}&nbsp;&nbsp; <output name=""result"" class=""package_price"">{{ j.price }}</output>.00</td>

  </tr>

</table>",1
65149612,"    window.addEventListener('DOMContentLoaded', (event) => {
        
   
      
      document.getElementById(""option1"").addEventListener(""click"", toggleOption1);
       toggleOption1();
  });
function toggleOption1() {

  var option1 = document.getElementById(""option1"");

  // if option1 is checked, run first script
  if (option1.checked === true) {
    console.log(""checked"");
    // chrome.tabs.executeScript({
    //       file: 'optionEnabled.js'
    //     });
  // otherwise, run script 2
  } else {
    console.log(""not checked"");
    // chrome.tabs.executeScript({
    //       file: 'optionDisabled.js'
    //     });
    }
}
",1
65116208,"export default function MyFunction( props ) {
        const {
                attributes: {
                    foo1,
                    foo2
                },
                attributes, // grab attributes too
                setAttributes,
        } = props;

",1
65099077,"const regs = [
  {
    ""id"": ""1"",
    ""date"": 1606826246, // Tuesday, December 1, 2020 12:37:26 PM
    ""customer"": ""customer 1"",
  },
  {
    ""id"": ""2"",
    ""date"": 1604353553, // Monday, November 2, 2020 9:45:53 PM
    ""customer"": ""customer 2"",
  },
  {
    ""id"": ""3"",
    ""date"": 1606860022, // Tuesday, December 1, 2020 10:00:22 PM
    ""customer"": ""customer 3"",
  }
]

const filterTimestamp = 1606859476; // Tuesday, December 1, 2020 9:51:16 PM
const filterDateString = new Date(filterTimestamp*1000).toISOString().slice(0, 10);
// ""2020-12-01"" sliced from ""2020-12-01T21:51:16.000Z""

const regsOnDate = regs.filter(o => (
  new Date(o.date*1000).toISOString().slice(0, 10) === filterDateString));

console.log( regsOnDate );
const regs = [
  {
    ""id"": ""1"",
    ""date"": 1606826246, // Tuesday, December 1, 2020 12:37:26 PM
    ""customer"": ""customer 1"",
  },
  {
    ""id"": ""2"",
    ""date"": 1604353553, // Monday, November 2, 2020 9:45:53 PM
    ""customer"": ""customer 2"",
  },
  {
    ""id"": ""3"",
    ""date"": 1606860022, // Tuesday, December 1, 2020 10:00:22 PM
    ""customer"": ""customer 3"",
  }
]


const filterTimestamp = 1606859476; // Tuesday, December 1, 2020 9:51:16 PM
const filterDateString = new Date(filterTimestamp*1000).toDateString();

const regsOnDate = regs.filter(o => (
  new Date(o.date*1000).toDateString() === filterDateString));

console.log( regsOnDate );",1
65117995,"function promiseLoad(nameID, uID, caption) {
    return axios.get(`${URL}/users/${uID}/name/${nameID}`)
        .then(res => {
            let obj;
            if(res.data !== -1) {
                obj = {
                    fullName: res.data,
                    caption: caption
                };
            }
            return obj;
    });
}
",1
65127699,"var labels = document.querySelectorAll(""#uniteLabel""),
unitOutputs = document.querySelectorAll(""#uniteOutput"");

for (var i=0; i < labels.length; i++) {
  if (labels[i].innerHTML == ""En travers"") {
    unitOutputs[i].innerHTML = ""Stère"";
  } else if (labels[i].innerHTML == ""A l’unité de produit"") {
    unitOutputs[i].innerHTML = ""Stère"";
  } else if (labels[i].innerHTML == ""En bloc"") {
    unitOutputs[i].innerHTML = ""m3"";
  }
}
<div class=""post"">
  <div id=""uniteLabel"">En travers</div>
  <div id=""uniteOutput""></div>
</div>

<div class=""post"">
  <div id=""uniteLabel"">A l’unité de produit</div>
  <div id=""uniteOutput""></div>
</div>

<div class=""post"">
  <div id=""uniteLabel"">En bloc</div>
  <div id=""uniteOutput""></div>
</div>",1
65123942,"function TableRow() {

  const rows = document.querySelectorAll('table tr[data-url]');

  rows.forEach(row => {
    row.addEventListener('click', function(e) {
      handleClick(row, e);
    });
  });

  function handleClick(row, e) {
    let url = row.getAttribute('data-url');
    window.document.location = url;
  }

  const anchors = document.querySelectorAll('table tr[data-url] a');
  anchors.forEach(anchor => {
    anchor.addEventListener('click', function(e) {
      e.stopPropagation();
    });
  });

}

document.addEventListener('DOMContentLoaded', TableRow);
",1
65100405,"let newCityStateObject = cities.reduce((acc, item, index) => {
  if (item) {
    // this object has state as key, and the desired output array’s item as value
    const object = acc.obj;

    // if state not found, create new record
    if (object[item.state] === undefined) {
      const record = { name: item.state, cities: [] }
      object[item.state] = record;
      acc.array.push(record);
    }

    const record = object[item.state];
    record.cities.push(item.city);
  }
  return acc;
}, { obj: {}, array: [] }).array;
",1
65084123,"let res = [];
let temp = [];

for (let i = 1; i <= 1; i++) {
    temp.push(i);
    if (temp.length === 1) {
       res.push(temp.slice());
       // wrong: res.push(temp);
    }
    temp.pop();
}
",1
65129079,"import React from ""react"";
import Tree from ""react-tree-graph"";
import ""./styles.css"";

const data = {
  name: ""Parent"",
  children: [
    {
      name: ""Child One""
    },
    {
      name: ""Child Two""
    }
  ]
};
export default function App() {
  return (
    <div className=""custom-container"">
      <Tree data={data} height={200} width={400} />
    </div>
  );
}


",1
65106048,"  yAxes: [{
    type: ""CategoryAxis"",
    dataFields: {
      category: ""name""
    },
    renderer: {
      minGridDistance: 1,
      ...
    }
  }],
",1
65148842,"class Card {
  constructor(suit, rank) {
    this.suit = suit;
    this.rank = rank;
  }
}
class Deck {
  static suits = [""S"", ""C"", ""D"", ""H""];
  static ranks = [2, 3, 4, 5, 6, 7, 8, 9, 10, ""J"", ""Q"", ""K"", ""A""];
  constructor() {
    this.cards = this.getAllCards();
  }
  getAllCards() {
    var cards = [];

    for (var i = 0; i < Deck.suits.length; i++) {
      for (var j = 0; j < Deck.ranks.length; j++) {
        var card = new Card(Deck.suits[i], Deck.ranks[j]);
        cards.push(card);
      }
    }
    return cards;
  }
}
console.log(new Deck().cards);
class Card {
  constructor(suit, rank) {
    this.suit = suit;
    this.rank = rank;
  }
}
class Deck {
  static suits = [""S"", ""C"", ""D"", ""H""];
  static ranks = [2, 3, 4, 5, 6, 7, 8, 9, 10, ""J"", ""Q"", ""K"", ""A""];
  constructor() {
    this.cards = Deck.suits.flatMap(suit => Deck.ranks.map(rank => new Card(suit, rank)));
  }
}
console.log(new Deck().cards);",1
65107322,"function handleMonthOptionChangeForRelatedDisplay(evt) {

  const elementDisplay = document.querySelector('#month');
  const elementSelect = evt.currentTarget;

  if (elementDisplay && elementSelect) {

    const elementSelect = evt.currentTarget;
    const selectedIndex = elementSelect.selectedIndex;

    elementDisplay.textContent = elementSelect[selectedIndex].value
  }
}

function initMonthOptionChange() {
  const elementSelect = document.querySelector('#month-options');
  elementSelect.addEventListener('change', handleMonthOptionChangeForRelatedDisplay);
}

// window.onload = function () {
//   handleMonthOptionChangeForRelatedDisplay({
//     currentTarget: document.querySelector('#month-options')
//   });
//   initMonthOptionChange();
// }

handleMonthOptionChangeForRelatedDisplay({
  currentTarget: document.querySelector('#month-options')
});
initMonthOptionChange();
function displayBoundBillingFrequency(evt) {

  const elementSelect = evt.currentTarget;
  if (elementSelect) {

    const selectedOption = elementSelect[elementSelect.selectedIndex];

    // `this` equals the bound billing-frequency display-element.
    this.textContent = (selectedOption.dataset.billingFrequency || '');
  }
}

function mainInit() {

  const planOptions = document.querySelector('#plan-options');
  const frequencyDisplay = document.querySelector('#plan-billing-frequency');

  if (planOptions && frequencyDisplay) {

    const displayBillingFrequency = displayBoundBillingFrequency.bind(frequencyDisplay);

    // synchronize display data initially.
    displayBillingFrequency({
      currentTarget: planOptions,
    });

    // initialize event listening/handling
    planOptions.addEventListener('change', displayBillingFrequency);
  }
}

mainInit();",1
65088715,"function countdown(time_p) {
  var time = sessionStorage.getItem('saved_countdown');

  if (time) {
    time = +time; // cast the string to number
  }
  else {
    // Set the time we're counting down to using the time allowed
    var new_countdown = new Date().getTime() + (time_p + 2) * 1000;
    time = new_countdown;
    sessionStorage.setItem('saved_countdown', new_countdown);
  } 
",1
65156663,".form {
  // use relative on your form

  position: relative;
}
.overlay {
  position: absolute;

  // this will stretch overlay to fill width and height of form
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  background-color: rgba(0, 0, 0, 0.1); // some transparent grey color
}

.spinner {
  position: absolute;

  // this will place spinner in center of form
  top: 50%;
  left: 50%;

  transform: translate(-50%, -50%);
}
",1
65123805,"var cent = ""search"";
con.connect(function (err) {
if (err) throw err;
var sql =""SELECT * FROM cadito.activitys WHERE description like %?%"";
//Send an array with value(s) to replace the escaped values:
con.query(sql, [cent], function (err, result) {
    console.log(global.re = JSON.stringify((result)));
});

});
",1
65125286,"const monthNames = [""jan"", ""feb"", ""mar"", ""apr"", ""may"", ""jun"", ""jul"", ""aug"", ""sep"", ""oct"", ""nov"", ""dec""];
const re = /(\d{2})\/(\w{3})\/(\d{4}):(\d{2}):(\d{2}):(\d{2}) (.*)/;

const makeDate = str => {
  const [_, dd, mmm, yyyy, hh, min, ss, tz] = str.match(re)
  const tzStr = [tz.slice(0, 3), ':', tz.slice(3)].join(''); // make ±hh:mm
  const mm = monthNames.indexOf(mmm.toLowerCase()); // English only
  const isoString = `${yyyy}-${mm}-${dd}T${hh}:${min}:${ss}${tzStr}`
  console.log(isoString)
  return new Date(isoString)
};

const str = ""02/Dec/2020:23:58:15 +0000""
const d = makeDate(str);
console.log(d)",1
65157905,"$('input[type=checkbox] ').on('change', function() {
  $('tbody > tr .checkbox').not(this).prop('checked',false);//remove checked from other checkbox
  //loop thrugh trs
  $(""tbody > tr"").each(function() {
//add or remove name attribute
   var selector = $(this)
    if (selector.find('input[type=checkbox]').prop(""checked"") == true) {
      selector.find('.visa_type').attr('name', 'visa_type');
      selector.find("".processing_type"").attr('name', 'processing_type');
      selector.find('.travel_date').attr('name', 'travel_date');

    } else if (selector.find('input[type=checkbox]').prop(""checked"") == false) {
      selector.find('.visa_type').attr('name', '');
      selector.find("".processing_type"").attr('name', '');
      selector.find('.travel_date').attr('name', '');

    }
  })

});
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<table class=""table  table-bordered table-responsive"" id=""flip-scroll"">
  <thead>
    <tr>
      <th scope=""col"">Visa Option</th>
      <th scope=""col"">Processing Type</th>
      <th height=""60"" scope=""col"">Travel Date</th>
      <th scope=""col"">Price</th>
    </tr>
  </thead>
  <tbody>


    <tr class=""valid-container"">
      <input type=""hidden"" class=""id"" value=""1"">
      <td style=""cursor:pointer;"" width=""200""><input type=""checkbox"" name=""c1"" class=""checkbox"">&nbsp; <output class=""visa_type"" style=""font-size:14.5px !important;"" value=""90 days single visa"">90 days single visa</output></td>

      <td height=""52"" width=""158"">
        <select class=""custom-select processing_type"" required="""">
          <option value=""15000"" selected="""">Normal</option>
          <option value=""20000"">Express</option>
        </select>
      </td>


      <td width=""190"" height=""60"">

        <div class=""input-group date"" data-date-format=""dd.mm.yyyy"">
          <div class=""input-group mb-2"">
            <input type=""text"" class=""form-control travel_date"" value=""dd.mm.yyyy"" placeholder=""dd.mm.yyyy"">
            <div class=""input-group-text""><i class=""ti-calendar""></i></div>
            <div class=""input-group-addon"">
            </div>
            <div class=""input-group-prepend"">
            </div>
          </div>
        </div>

      </td>

      <td width=""166"">AED&nbsp;&nbsp; <output class=""package_price"">15000</output>.00</td>

    </tr>

    <tr class=""valid-container"">
      <input type=""hidden"" class=""id"" value=""2"">
      <td style=""cursor:pointer;"" width=""200""><input type=""checkbox"" name=""c1"" class=""checkbox"">&nbsp; <output class=""visa_type"" style=""font-size:14.5px !important;"" value=""30 days"">30 days</output></td>

      <td height=""52"" width=""158"">
        <select class=""custom-select processing_type"" required="""">
          <option value=""11"" selected="""">Normal</option>
          <option value=""22"">Express</option>
        </select>
      </td>


      <td width=""190"" height=""60"">

        <div class=""input-group date"" data-date-format=""dd.mm.yyyy"">
          <div class=""input-group mb-2"">
            <input type=""text"" class=""form-control travel_date"" value=""dd.mm.yyyy"" placeholder=""dd.mm.yyyy"">
            <div class=""input-group-text""><i class=""ti-calendar""></i></div>
            <div class=""input-group-addon"">
            </div>
            <div class=""input-group-prepend"">
            </div>
          </div>
        </div>

      </td>

      <td width=""166"">AED&nbsp;&nbsp; <output class=""package_price"">11</output>.00</td>

    </tr>

    <tr class=""valid-container"">
      <input type=""hidden"" class=""id"" value=""3"">
      <td style=""cursor:pointer;"" width=""200""><input type=""checkbox"" name=""c1"" class=""checkbox"">&nbsp; <output class=""visa_type"" style=""font-size:14.5px !important;"" value=""90 days"">90 days</output></td>

      <td height=""52"" width=""158"">
        <select class=""custom-select processing_type"" required="""">
          <option value=""22"" selected="""">Normal</option>
          <option value=""33"">Express</option>
        </select>
      </td>


      <td width=""190"" height=""60"">

        <div class=""input-group date"" data-date-format=""dd.mm.yyyy"">
          <div class=""input-group mb-2"">
            <input type=""text"" class=""form-control travel_date"" value=""dd.mm.yyyy"" placeholder=""dd.mm.yyyy"">
            <div class=""input-group-text""><i class=""ti-calendar""></i></div>
            <div class=""input-group-addon"">
            </div>
            <div class=""input-group-prepend"">
            </div>
          </div>
        </div>

      </td>

      <td width=""166"">AED&nbsp;&nbsp; <output class=""package_price"">22</output>.00</td>

    </tr>


  </tbody>
</table>",1
65117754,"function sample() {
  var id = ""###"";  // File ID of your CSV file.

  // This is your script.
  var file = DriveApp.getFileById(id);
  var rows = Utilities.parseCsv(file.getBlob().getDataAsString());
  var numColumns = rows[0].length;
  var date = ""sample"";
  rows.forEach(function(row){
    row[numColumns] = date;
  });
  rows[0][numColumns] = 'Date';
  let csvRows = rows.map(values =>values.map(value => JSON.stringify(value).replace(/\\""/g, '""""')));
  let csvData = csvRows.map(values => values.join(',')).join('\n');
  
  // I added below script for checking your CSV data.
  var res = csvData.replace(/\""(|.+?)\""/g, """");
  DriveApp.createFile(""sample.txt"", res);
}
",1
65148294,"import React, { useState } from ""react"";
import ""./styles.css"";

export default function App() {
   const [visibleMonth, setVisibleMonth] = useState(new Date().getMonth());
  //  const [countTwo, setCountTwo] = useState(1);
  const [dates, setDates] = useState(null);

  const getDaysArray = async (s, e) => {
    let a = [];
    for (let d = new Date(s); d <= e; d.setDate(d.getDate() + 1)) {
      a.push(new Date(d).toString());
    }

    return a;
  };

  const prevMonth = async () => {
    let d = new Date();
    d.setMonth(visibleMonth - 1);
    setVisibleMonth((state) => visibleMonth - 1);
    let firstDay = new Date(d.getFullYear(), d.getMonth(), 1);
    let lastDay = new Date(firstDay.getFullYear(), firstDay.getMonth() + 1, 0);
    const dates = await getDaysArray(firstDay, lastDay);
    setDates(dates);
  };

  const nextMonth = async () => {
    let d = new Date();
    d.setMonth(visibleMonth + 1);
    setVisibleMonth((state) => visibleMonth + 1);

    let firstDay = new Date(d.getFullYear(), d.getMonth(), 1);
    let lastDay = new Date(firstDay.getFullYear(), firstDay.getMonth() + 1, 0);

    const dates = await getDaysArray(firstDay, lastDay);
    setDates(dates);
  };

  return (
    <div className=""App"">
      <button onClick={prevMonth}>Prev Month</button>
      <button onClick={nextMonth}>Next Month</button>
      {dates &&
        dates.map((item, i) => {
          return <div key={i}>{item}</div>;
        })}
    </div>
  );
}
",1
65089641,"interface IPerson {
  id?: string; // ID is optional (use of ? operator)
  name: string; // Name is Required
  age: number;
}

const persons: Array<IPerson> = [
  { name: ""John"", age: 12 },
  { name: ""Ben"", age: 20 }
];

// Both are same: Array<IPerson> === IPerson[]
const fun = (info: Array<IPerson>) => {
  //You will get intellisense here
  console.log(info[0].name);
};

interface IPerson {
  id?: string; // ID is optional (use of ? operator)
  name: string; // Name is Required
  age: number;
}

const persons: Array<Partial<IPerson>> = [
  { name: ""John"" }, // You can do it.
  { name: ""Ben"", age: 20 }
];

// Both are same: Array<IPerson> === IPerson[]
const fun = (info: Partial<IPerson>[]) => {
  //You will get intellisense here
  console.log(info[0].name);
};

const is_valid_person = (person: any): Boolean => {
  return (
    typeof person === ""object"" &&
    typeof person.name === ""string"" &&
    typeof person.age === ""number"" &&
    person.name.length >= 5 &&
    person.age >= 1
  );
};

console.log(""Is person valid: "", is_valid_person({}));
console.log(""Is person valid: "", is_valid_person(""Invalid Person""));
",1
65131589,"Basic format                Example
YYYYMMDDThhmmss             19850412T101530
YYYYMMDDThhmmssZ            19850412T101530Z
YYYYMMDDThhmmss±hhmm        19850412T101530+0400
YYYYMMDDThhmmss±hh          19850412T101530+04

Extended format             Example
YYYY-MM-DDThh:mm:ss         1985-04-12T10:15:30
YYYY-MM-DDThh:mm:ssZ        1985-04-12T10:15:30Z
YYYY-MM-DDThh:mm:ss±hh:mm   1985-04-12T10:15:30+04:00
YYYY-MM-DDThh:mm:ss±hh      1985-04-12T10:15:30+04
",1
65100024,"uncheckAllUnsentHandler = (e) => {
  const newCheckMarkValue = e.target.checked;
  this.setState((prevState, props) => {
    const newUnsentMail = prevState.unsentMail.map(policy => {
      mail.willSend = newCheckMarkValue;
      return mail;
    });
    return {
      unsentMail: newUnsentMail
    }
  });
}
",1
65108036,"client.on('voiceStateUpdate', (newState, oldState) => {
 if (newState.channelID && !oldState.channelID) {
  console.log('Someone joined');
  // ...
 } else if (oldState.channelID && !newState.channelID) {
  console.log('Someone left');
  // ...
 } else {
  console.log('Neither of the two actions occured');
  // ...
 }
});
",1
65149136,"const canvas = document.querySelector( 'canvas' );
const ctx = canvas.getContext( '2d' );
const size = 200;

canvas.width = canvas.height = size;

// Just to show that the content still comes through
ctx.fillStyle = 'red';
ctx.fillRect( 0, 0, size, size );

ctx.fillStyle = 'white';

ctx.beginPath();

// Clockwise Rectangle
ctx.moveTo( 10, 10 );
ctx.lineTo( 190, 10 );
ctx.lineTo( 190, 190 );
ctx.lineTo( 10, 190 );
ctx.lineTo( 10, 10 );

// Anti-Clockwise Rectangle
ctx.moveTo( 20, 20 );
ctx.lineTo( 20, 180 );
ctx.lineTo( 160, 180 );
ctx.lineTo( 160, 20 );
ctx.lineTo( 20, 20 );

ctx.fill();
const canvas = document.querySelector( 'canvas' );
const ctx = canvas.getContext( '2d' );
const size = 200;

canvas.width = canvas.height = size;

// Just to show that the content still comes through
ctx.fillStyle = 'red';
ctx.fillRect( 0, 0, size, size );

ctx.fillStyle = 'white';

ctx.beginPath();
ctx.ellipse( 100, 100, 100, 75, 0, 0, Math.PI * 2, false );
ctx.ellipse( 100, 100, 80, 50, Math.PI / 3, 0, Math.PI * 2, true );
ctx.fill();",1
65158065,"function processPathLettersIntoArray(source) {
  const result = source.replace(/M/g, "";M"").replace(/L/g, "";L"").replace(/z/g, "";z"").split(';').slice(1);
  return result.map(mapGroup);
}

function gcodeXY(source) {
   const [xVal, yVal] = source.split("","");
   return `X${xVal} Y${yVal}`;
}
let start=""X0 Y0""; //another side effect :-(

function mapGroup(grp) {
    let s = grp.split("" "");
    if (s[0]==""M""){
        start = gcodeXY(s[1]);
        last=s[1];
        return ""G0 F200 ""+start;
    }
    else if (s[0]==""L""){
        start=gcodeXY(s[1]);
        last=s[1];
        return ""G1 F100 ""+start;
    }
    else if (s[0]==""z""){
        last=s[1];
        return ""G1 F100 ""+start;
    }
    return grp;
}

function path2gcode() {
  const source = 'M 1,2 L 2,2 L 3,3 z';
  return processPathLettersIntoArray(source);
}
",1
65099808,"setInterval(function() {
  const number = Math.floor((Math.random() * 100) + 1);
  document.getElementById(""in02"").innerHTML = number
}, 5000);

function titlep(elem) {
  const aVal = document.getElementById('in02').textContent;
  const elemVal = elem.textContent.replace(/[^0-9]/g, '');

  elem.title = Number(aVal) * Number(elemVal);
}
<div style=""cursor: pointer"">

  <span class=""tp-cu-po"" onmouseover=""titlep(this)"">4+  </span><br>
  <span class=""tp-cu-po"" onmouseover=""titlep(this)"">3+  </span><br>
  <span class=""tp-cu-po"" onmouseover=""titlep(this)"">2+  </span><br>
  <span class=""tp-cu-po"" onmouseover=""titlep(this)"">1+  </span><br>



</div><br> A =
<a id=""in02""></a>",1
65157526,"highlightRows = () => {
  let oddRows = document.querySelectorAll('tbody > tr.show')
  oddRows.forEach((row, index) => {
    if (index % 2 == 0) {
      row.style.background = '#f1f1f1'
    } else {
      row.style.background = '#fff'
    }
  })
}


const filterOptions = () => {
  const option = document.querySelector(""#filter"").value;
  const selection = option.replace('&', '')
  const rows = document.querySelectorAll(""#body1 > tr"");
  //check if value is not none
  if (option != ""none"") {
    rows.forEach(row => {
      let td = row.querySelector(""td:last-child"");
      let filter = td.innerText.replace('&', '');
      if (filter === selection) {
        row.className = 'show'
      } else {
        row.className = 'hidden'
      }

    });
    highlightRows()
  } else {
 //loop though rows
    rows.forEach(row => {
    //check if row has class hidden
      if (row.classList.contains(""hidden"")) {
        row.className = 'show'//add showclass
      }      
    })
    highlightRows()
  }

};
document.getElementById(""filter"").addEventListener(""change"", filterOptions);
.table-filters {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 2em;
  text-align: center;
}

.table-filters a {
  color: #222;
  font-size: 16px;
  font-weight: 500;
  margin-right: 1em;
  display: inline-block;
}

.table-filters a:hover {
  text-decoration: none;
}

.table-filters select {
  background: #fff;
  font-size: 16px;
  font-weight: 500;
  width: 12em;
  height: 2.5em;
}

table.stats {
  background: #fff;
  width: 100%;
  table-layout: fixed;
  border-radius: 6px;
}

tbody tr.show {
  display: table-row;
}

tbody tr.hidden {
  display: none;
}

table.vypis {
  border: 1px solid #ccc;
  border-collapse: collapse;
  margin: 0;
  padding: 0;
  width: 100%;
  table-layout: fixed;
}

table.vypis>caption {
  font-size: 1.5em;
  margin: .5em 0 .75em;
}

table.vypis>tr.vypis-riadok {
  background-color: #f8f8f8;
  border: 1px solid #ddd;
  padding: .35em;
}

table.vypis th,
table.vypis td {
  padding: .625em;
  text-align: center;
}

table.vypis th {
  font-size: .85em;
  letter-spacing: .1em;
  text-transform: uppercase;
}
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<div class=""table-filters"">
  <select id=""filter"">
    <option selected value=""none"">Categories</option>
    <option>Hobby</option>
    <option>Others</option>


  </select>
</div>
<table class=""vypis"">
  <caption>Pohyby na účte</caption>
  <thead>
    <tr>
      <th scope=""col"">Refer</th>
      <th scope=""col"">Date</th>
      <th scope=""col"">Price</th>
      <th scope=""col"">Category</th>
    </tr>
  </thead>
  <tbody id=""body1"">
    <tr class=""vypis-riadok"">
      <td scope=""row"" data-label=""refer"">[[X04_riadok_1_popis_transakcie]] <br> [[X10_riadok_2_popis_transakcie]]</td>
      <td data-label=""date"">[[X02_riadok_1_datum]]</td>
      <td data-label=""price"">[[X08_riadok_1_suma]] €</td>
      <td data-label=""category"">Others</td>
    </tr>
    <tr class=""vypis-riadok"">
      <td scope=""row"" data-label=""refer"">[[X04_riadok_1_popis_transakcie]] <br> [[X10_riadok_2_popis_transakcie]]</td>
      <td data-label=""date"">[[X02_riadok_1_datum]]</td>
      <td data-label=""price"">[[X08_riadok_1_suma]] €</td>
      <td data-label=""category"">Hobby</td>
    </tr>
    <tr class=""vypis-riadok"">
      <td scope=""row"" data-label=""refer"">[[X04_riadok_1_popis_transakcie]] <br> [[X10_riadok_2_popis_transakcie]]</td>
      <td data-label=""date"">[[X02_riadok_1_datum]]</td>
      <td data-label=""price"">[[X08_riadok_1_suma]] €</td>
      <td data-label=""category"">Others</td>
    </tr>
  </tbody>
</table>",1
65154096,"//I think the best approach is calling this in a submit or button click event
const buttonClick = () => {
  const newEvents = [...events]; //This spreads every element inside the events array into a new one
  newEvents.push({
    title: eventTitleState, //You also need a useState for the title
    start: moment().toDate(),
    end: moment(),
  });
  setEvents(newEvents);
}
",1
65088376,"var staff = [];
staff.push({
  Id: 122,
  Events: [
    { Id: 30, Name: 'Foo' },
    { Id: 57, Name: 'Bar' }
  ]
});
staff.push({
  Id: 122,
  Events: [{ Id: 57, Name: 'Bar' }]
});

const res = staff.filter((item) => item.Events.some((e) => e.Id === 30));
console.log(res);",1
65137533,"function addListenersToLinks() {
  const navLinks = document.querySelectorAll('a.nav-link');
  
  Array.from(navLinks).forEach(navLink => {
    navLink.addEventListener('click', event => {
      document.querySelector('#menu-checkbox').checked = false;
    })
  })  
}

document.body.onload = addListenersToLinks();  

function addListenersToLinks() {
  const navLinks = document.querySelectorAll('a.nav-link');
  
  Array.from(navLinks).forEach(navLink => {
    navLink.addEventListener('click', event => {
      document.querySelector('#menu-checkbox').checked = false;
    })
  })  
}

document.body.onload = addListenersToLinks();  
*, *:before, *:after {
  box-sizing: border-box;
}
body {
  font-family: ""Verdana"", serif;
  font-size: 1.2em;
  overflow-x: hidden;
}
label .menu {
  position: fixed;
  right:-45px;
  top: -45px;
  z-index: 100;
  width: 120px;
  height: 120px;
  background: #F7CC26;
  border-radius:50%;
  transition: 0.5s ease-in-out;
  box-shadow: 0 0 0 0 #072C7D, 0 0 0 0 #072C7D;
  cursor: pointer;
}

label .ha {
  position: absolute;
  top: 75px;
  left: 24px;
  width: 30px;
  height: 2.5px;
  background: #fff;
  display: block;
  transform-origin: center;
  transition: 0.5s ease-in-out;
}
label .ha:after, label .ha:before {
  transition: 0.4s ease-in-out;
  content: """";
  position: absolute;
  display: block;
  width: 100%;
  height: 100%;
  background: #9CBEE3;
}
label .ha:before {
  top: -10px;
}
label .ha:after {
  bottom: -10px;
}
label input {
  display: none;
}
label input:checked + .menu {
  box-shadow: 0 0 0 100vw #F7CC26, 0 0 0 100vh #F7CC26;
  border-radius: 0;
}
label input:checked + .menu .ha {
  transform: rotate(45deg);
}
label input:checked + .menu .ha:after {
  transform: rotate(90deg);
  bottom: 0;
}
label input:checked + .menu .ha:before {
  transform: rotate(90deg);
  top: 0;
}
label input:checked + .menu + ul {
  opacity: 1;
}
label input:checked + .menu2 + ul{opacity:0}

label ul {
  z-index: 200;
  list-style-type: none;
  position: fixed;
  text-align:center;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  opacity: 0;
  transition: 0.25s 0s ease-in-out;
}
label a {
  margin-bottom: 1em;
  display: block;
  color: #9CBEE3;
  text-decoration: none;
}
<label>
<input id=""menu-checkbox"" type=""checkbox""></input>
<span class=""menu"">
<span class=""ha""></span>
</span>
<ul>
<li><a class=""nav-link"" href=""#intro"">Intro</a></li>
<li><a class=""nav-link"" href=""#educ"">About</a></li>
<li><a class=""nav-link"" href=""#free"">Free Samples</a></li>
<li><a class=""nav-link"" href=""#video"">Video Review</a></li>
<li><a class=""nav-link"" href=""#books"">Other Books</a></li>
<li><a class=""nav-link"" href=""#contact"">Contact Us</a></li>
</ul>
</label>

<div id=""free"">Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively. Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively. Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively.</div>
<br>
<div id=""video"">Wikis, chat messages, or formal documentation for knowledge management aren’t effective. Our question and answer format is a proven approach for accessing the right information in less time.</div><br>
<div id=""intro"">Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively. Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively. Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively.</div>
<br>
<div id=""educ"">Wikis, chat messages, or formal documentation for knowledge management aren’t effective. Our question and answer format is a proven approach for accessing the right information in less time.</div><br>
<div id=""books"">Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively. Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively. Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively.</div>
<br>
<div id=""contact"">Wikis, chat messages, or formal documentation for knowledge management aren’t effective. Our question and answer format is a proven approach for accessing the right information in less time.</div>",1
65106018,"<template>
  <div>
    <img :src=""myLogoSrc"" alt=""my-logo"" />
  </div>
</template>

<script lang=""ts"">
  // Please just use `@` to refer to the root ""src"" directory of the project
  import myLogoSrc from ""@/assets/myLogo.svg"";

  export default defineComponent({
    name: ""MyComponent"",

    setup() {
      return {
        myLogoSrc
      };
    }
  });
</script>
",1
65137175,"function Build() {
  const [page, setPage] = React.useState(1);

  const handlePage = (name, val) => (event, page) => {
    console.log(page);
    console.log(""PAGING HERE"");
    setPage(page);

    dispatch(
      getAllPreownedCars(6, dataOptions.skip, filters, dataOptions.searchText, [val])
    );
  };

  return (
    <Pagination
      count={5}
      page={page}
      onChange={handlePage(""Price (Lowest to Highest)"", ""selling_Price ASC"")}
    />
  );
}
",1
65109168,"  constructor(props) {
    ...
    this.handleToggle = this.handleToggle.bind(this);
  }

  handleToggle() {
    this.setState({ toggled: !this.state.toggled });
    this.props.onToggle();
  }

  render() {
    ...
    <div>
      <button onClick={this.handleToggle}>Toggle</button>
    </div>
    ...
  }
",1
65145913,"import React, { useState, useEffect, useRef } from ""react"";
import { CountdownCircleTimer } from ""react-countdown-circle-timer"";

import ""./styles.css"";

export default function App() {
  const [minute, setMinuter] = useState(50);
  const funRef = useRef(null);
  const hourSeconds = 3000;
  const renderTime = (dimension, time) => {
    return (
      <div className=""time-wrapper"">
        <div className=""time"">{time}</div>
        <div>{dimension}</div>
      </div>
    );
  };

  useEffect(() => {
    if (minute !== 0) {
      funRef.current = setTimeout(() => {
        setMinuter(minute - 1);
      }, 60000);
    } else {
      clearTimeout(funRef.current);
    }
  });

  const timerProps = {
    isPlaying: true,
    size: 120,
    strokeWidth: 6
  };

  return (
    <div className=""App"">
      <CountdownCircleTimer
        {...timerProps}
        isPlaying
        initialRemainingTime={hourSeconds}
        duration={hourSeconds}
        colors={[[""#3f51b5""]]}
        onComplete={() => console.log(""times up"")}
      >
        {({ elapsedTime }) => {
          //console.log(hourSeconds - elapsedTime / 1000);
          return renderTime(""minute"", minute);
        }}
      </CountdownCircleTimer>
    </div>
  );
}

",1
65102932,"router.get(""/youtube/callback"", function(req, res) {
    // Create an OAuth2 client object from the credentials in our config file
    const oauth2Client = new OAuth2(
      CONFIG.oauth2Credentials.client_id,
      CONFIG.oauth2Credentials.client_secret,
      CONFIG.oauth2Credentials.redirect_uris[0]
    );
  
    if (req.query.error) {
      // The user did not give us permission.
      return res.redirect(""/"");
    } else {
      oauth2Client.getToken(req.query.code, function(err, token) {
        if (err) return res.redirect(""/"");
  
        // Store the credentials given by google into a jsonwebtoken in a cookie called 'jwt'
        res.cookie(""jwt"", jwt.sign(token, CONFIG.JWTsecret));
        
        // return res.redirect(""/get_some_data"");
  
        if (!req.cookies.jwt) {
          // We haven't logged in
          return res.redirect(""/"");
        }
      
        // Add this specific user's credentials to our OAuth2 client
        oauth2Client.credentials = jwt.verify(req.cookies.jwt, CONFIG.JWTsecret);
      
        // Get the youtube service
        const service = google.youtube(""v3"");
  
        const url = `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${token[Object.keys(token)[0]]}`;
  
        // ================ mark 1 ====================
        const get_data = async () => {
          try {
            const response = await nf(url);
            const json = await response.json();
            return json;
          } catch (error) {
            console.log(error);
          }
        };
  
        // Get 50 of the user's subscriptions (the channels they're subscribed to)
        service.subscriptions
          .list({
            auth: oauth2Client,
            mine: true,
            part: ""snippet,contentDetails"",
            maxResults: 50
          })
          // ================ mark 2 ====================
          // remember to add async here
          .then(async (response) => { 
             // ================ mark 2 ====================
             const diomerda = await get_data()
  
            // Render the profile view, passing the subscriptions to it
            return res.render(""./user/dashboard"", { subscriptions: response.data.items, diomerda: diomerda });
          });
  
      });
    }
  });
",1
65140056,"<!DOCTYPE html>
<html>

<head>
  <title>Page Title</title>
  <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.min.css"">
  <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.7.14/css/bootstrap-datetimepicker.min.css"">
  <script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js""></script>
  <script>
    $(function() {
      $('#datetimepicker1').datetimepicker({
        format: 'DD/MM/YYYY HH:mm',
      });
    });
  </script>
  <style>
    body {
      font-family: Verdana, Arial, sans-serif;
      font-size: 12px;
    }
  </style>
</head>

<body>


  <div class=""container"">
    <div class=""row"">
      <div class='col-sm-6'>
        <div class=""form-group"">
          <div class='input-group date' id='datetimepicker1'>
            <input type='text' class=""form-control"" />
            <span class=""input-group-addon"">
            <span class=""glyphicon glyphicon-calendar""></span>
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.4/jquery.min.js""></script>
  <script src=""https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.15.1/moment.min.js""></script>
  <script src=""https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/js/bootstrap.min.js""></script>
  <script src=""https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.7.14/js/bootstrap-datetimepicker.min.js""></script>


</body>

</html>",1
65089152,"<input type=""radio""
       name=""contact-option""
       id=""1""
       class=""with-gap""
       [(ngModel)]=""contact""
       value=""cell""> Cell
<input type=""radio""
       name=""contact-option""
       id=""2""
       class=""with-gap""
       [(ngModel)]=""contact""
       value=""email""> Email
",1
65158112,"export class EmployeeAddFormComponent implements OnInit {

  @Input()
  displayNewEmployeeDialog: boolean;
  @Output
  onDialogClose: EventEmitter<any> = new EventEmitter(); 

  //.. 

  closeDialog() {
    this.onDialogClose.emit();
  }

}
",1
65147772,"//Declare all the classes - 
let divs = [""div1"", ""div2"", ""div3""];

//Initiate a delay for each iteration
let delay = 0;

//Run a loop for each class
for(let i = 0; i<divs.length; i++){
  
  //Get the element
  let div = document.getElementsByClassName(divs[i]);
  
  //Run a loop for element with the class
  //(We only have one div with the classes div1 and div2. So it will run one time for them.
  //We have 5 divs with div3 class. It will run 5 times in that case 
  for(let j = 0; j<div.length; j++){
    
    //Get the individual element and add animation with delay
    //The delay will also ensure that the animation starts only when the previous element has finished the animation
    div[j].style.animation = `fadein 5s ${delay}s forwards` ;
    div[j].classList.add(""show"");
    
    //Increase delay with every iteration
    delay+=5;
  }
}
div {
  visibility: hidden;
}

.div1 {
  width: 400px;
  height: 500px;
  background-color: yellow;
}
.div2 {
  width: 350px;
  height: 400px;
  background-color: green;
}
.div3 {
  width: 300px;
  height: 50px;
  background-color: grey;
  margin: 10px;
}

.show {
  opacity: 0;
  visibility: visible;
}

@keyframes fadein {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}",1
65087341,"inp.onchange = async (evt) => {
  const stream = inp.files[ 0 ].stream();
  const reader = stream.getReader();
  while( true ) {
    const { done, value } = await reader.read();
    if( done ) { break; }
    handleChunk( value );
  }
  console.log( ""all done"" );
};

function handleChunk( buf ) {
  console.log( ""received a new buffer"", buf.byteLength );
}
inp.onchange = async (evt) => {
  const file = inp.files[ 0 ];
  const chunksize = 64 * 1024;
  let offset = 0;
  while( offset < file.size ) {
    const chunkfile = await file.slice( offset, offset + chunksize );
    // Blob.arrayBuffer() can be polyfilled with a FileReader
    const chunk = await chunkfile.arrayBuffer();
    handleChunk( chunk );
    offset += chunksize;
  }
  console.log( ""all done"" );
};

function handleChunk( buf ) {
  console.log( ""received a new buffer"", buf.byteLength );
}",1
65100739,"var arr = [
    {prop: 1},
    {prop: 1},
    {prop: 2},
    {prop: 3},
    {prop: 2}
]

const result = Object.values(arr.reduce((acc, item) => {
 acc[item.prop] = acc[item.prop] || [];
 acc[item.prop].push(item);
 return acc;
}, {}));

console.log(result);",1
65118100,"<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<ul id=""tabs"">
  <li><a href=""#tab1"">PC</a></li>
  <li><a href=""#tab2"">PS4</a></li>
  <li><a href=""#tab3"">XBOX</a></li>
</ul>



<div class=""platform tab1"" id=""tab1"">
  <div> 
    platform 1
  </div>
</div>

<div class=""platform tab2"" id=""tab2"">
  <div> 
    platform 2
  </div>
</div>

<div class=""platform tab3"" id=""tab3"">
  <div> 
    platform 3
  </div>
</div>",1
65148767,"render() {
    return (
        <View style={styles.MainContainer} >
            <Button title=""Next"" onPress={() => { 
                 this.props.navigation.navigate(
                 'Two', 
                 { 
                  postONE: Math.floor(Math.random() * 10) + 10, 
                  postTWO: 'R'  
                 })}} 
            />
        </View>
    );
  }
}
",1
65163854,"this.setState(prevState => ({
    ...prevState, //copy current state
    clientsList: [
        //copy current clients list with currentClient object filtered out            
        ...prevState.clientsList.filter( e => e.clientID !== this.state.currentClient.clientID),
        { //replace client object
            clientID: this.state.currentClient
            InvoiceNumber: this.state.currentInvoice
        }
    ]
}))
",1
65120321,"const arr = [
    { description: 'H', order: 1 },
    { description: 'K', order: 2 },
    { description: 'K', order: 3 },
    { description: 'H', order: 4 },
    { description: 'e', order: 5 },
    { description: 'l', order: 6 },
    { description: 'l', order: 7 },
    { description: 'o', order: 8 },
    { description: 'e', order: 9 },
    { description: 'l', order: 10 }
];

const key = 'Hello';

// result array
const result = [];

// current index of the test
let index = 0;

for (let e of arr) {
    // if matches the test, add the element to the result array and increse the index
    if (e.description === key[index]) {
        result.push(e);
        index++;
        
        // if already found the result, stop the iteration
        if (index >= key.length) break;
    } else {  // if failed the test, clear the index and the result
        index = 0;
        result.length = 0;
    }
}

console.log(result);",1
65145509,"const app:any = {};

interface InitiatePlayers {
    (this: any, arg0: { amount: string }): void;
}

const initiatePlayers: InitiatePlayers = function ({ 
  amount,
}) {

};

app.onInit = function () {
  initiatePlayers.call(this, { amount: 2 });
}
",1
65121692,"$(window).on('scroll', function() {
  var sections = $('.timeline_article'),
    nav = $('.scroll_navigation_section'),
    header_height = $('.header').outerHeight(),
    cur_pos = $(this).scrollTop();
  sections.each(function() {
    var top = $(this).offset().top - header_height,
      bottom = top + $(this).outerHeight();

    if (cur_pos >= top && cur_pos <= bottom) {
      nav.find('a').removeClass('active');
      sections.removeClass('active');
      $(this).addClass('active');
      var aElement = nav.find('a[href=""#' + $(this).attr('id') + '""]')
      aElement.addClass('active');
      if(aElement && $(aElement) && $(aElement)[0]){
        $(aElement)[0].scrollIntoView();
      }
    }
  });
});
.header {
  position: fixed;
  background-color: #fff;
  height: 50px;
  z-index: 10;
  width: 100%;
  top: 0;
}
.nav {
  list-style: none;
}
.nav li {
  float: left;
  padding-bottom: 1rem;
  margin-left: 15px;
}

.vertical_timeline_section {
  margin-top: 50px;
  position: relative;
}

.scroll_navigation_section {
  position: fixed;
  top: 100px;
  left: 0;
  z-index: 1;
  background-color: #FFF;
}

.scroll_navigation_section .scroll_navigation_year {
  max-height: 150px;
  overflow: auto;
  padding: 5px 0px;
}

.scroll_navigation_section .scroll_navigation_year li {
  list-style-type: none;
  position: relative;
  margin-left: 0;
  margin-top: 15px;
}

.scroll_navigation_section .scroll_navigation_year li>a.active {
  color:red;
}

.wrapper {
  max-width: 600px;
  margin: 0 auto;
  padding: 0 0.6rem;
}
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<div class=""header"">
  <ul class=""nav"">
    <li><a href=""btn1"">Header btn1</a></li>
    <li><a href=""btn2"">Header btn2</a></li>
    <li><a href=""btn3"">Header btn3</a></li>
  </ul>
</div>
<section class=""vertical_timeline_section"">
  <section class=""scroll_navigation_section"">
    <div class=""scroll_navigation_year"">
      <ul>
        <li><a href=""#1964"">1964</a></li>
        <li><a href=""#1984"">1984</a></li>
        <li><a href=""#2000"">2000</a></li>
        <li><a href=""#2002"">2002</a></li>
        <li><a href=""#2009"">2009</a></li>
        <li><a href=""#2012"">2012</a></li>
        <li><a href=""#2015"">2015</a></li>
        <li><a href=""#2016"">2016</a></li>
        <li><a href=""#2019"">2019</a></li>
        <li><a href=""#2020"">2020</a></li>
        <li><a href=""#2021"">2021</a></li>
        <li><a href=""#2023"">2023</a></li>
        <li><a href=""#2025"">2025</a></li>
      </ul>
    </div>
  </section>

  <section class=""timeline_section"">
    <div class=""wrapper"">
      <div class=""timeline_article"" id=""1964"">
        <div class=""meta_date"">
          <span class=""year"">1964</span>
        </div>
        <div class=""timeline_article"">
          <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>
        </div>
      </div>
      <div class=""timeline_article"" id=""1984"">
        <div class=""meta_date"">
          <span class=""year"">1984</span>
        </div>
        <div class=""timeline_article"">
          <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
        </div>
      </div>
      <div class=""timeline_article"" id=""2000"">
        <div class=""meta_date"">
          <span class=""year"">2000</span>
        </div>
        <div class=""timeline_article"">
          <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
        </div>
      </div>
      <div class=""timeline_article"" id=""2002"">
        <div class=""meta_date"">
          <span class=""year"">2002</span>
        </div>
        <div class=""timeline_article"">
          <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>
        </div>
      </div>
      <div class=""timeline_article"" id=""2009"">
        <div class=""meta_date"">
          <span class=""year"">2009</span>
        </div>
        <div class=""timeline_article"">
          <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>
          <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>
        </div>
      </div>
      <div class=""timeline_article"" id=""2012"">
        <div class=""meta_date"">
          <span class=""year"">2012</span>
        </div>
        <div class=""timeline_article"">
          <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>
          <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>
        </div>
      </div>
      <div class=""timeline_article"" id=""2015"">
        <div class=""meta_date"">
          <span class=""year"">2015</span>
        </div>
        <div class=""timeline_article"">
          <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>
          <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>
        </div>
      </div>
      <div class=""timeline_article"" id=""2016"">
        <div class=""meta_date"">
          <span class=""year"">2016</span>
        </div>
        <div class=""timeline_article"">
          <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>
          <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>
        </div>
      </div>
            <div class=""timeline_article"" id=""2019"">
        <div class=""meta_date"">
          <span class=""year"">2019</span>
        </div>
        <div class=""timeline_article"">
          <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>
          <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>
        </div>
      </div>
    </div>
  </section>
</section>",1
65100726,"var avgLineChartData = {
        labels: ['1', '1', '1', '1', '1', '1', '1'],
        datasets: [{
            label: 'Avg Temperature (F)',
            borderColor: window.chartColors.green,
            backgroundColor: window.chartColors.green,
            fill: false,
            data: [
                65 - randomScalingFactor(),
                53 - randomScalingFactor(),
                58 - randomScalingFactor(),
                54 - randomScalingFactor(),
                62 - randomScalingFactor(),
                65 - randomScalingFactor(),
                74 - randomScalingFactor()
            ],
            yAxisID: 'y-axis-1',
        }]
    };
",1
65106903,"<!DOCTYPE html>
<html>

  <body>
    <button id=""btn"">Click Me!</button>

    <p id=""i""><strong>this</strong> represents:</p>

    <p id=""demo""></p>
    <script>
      function myFunction() {
        console.log(1)
        let i = 0;
        while (i < 5) {
          document.write(i + '<br/>');
          i++;
        }
      }

      var btn = document.getElementById(""btn"");
      btn.addEventListener(""click"", myFunction);

    </script>
  </body>
</html>",1
65128957,"const useStyles = makeStyles(() => ({
  h5: {
    flexGrow: 1
  }
}));

function App() {
  const classes = useStyles();
  return (
    <AppBar position=""fixed"">
      <Toolbar>
        <Typography className={classes.h5} variant=""h5"">
          Lorem Ipsum Lorem Ipsum
        </Typography>
        <Grid item>
          <Grid container item justify=""flex-end"" direction=""row"">
            <Button variant=""contained"">b1</Button>
            <Button variant=""contained"">b2</Button>
          </Grid>
        </Grid>
      </Toolbar>
    </AppBar>
  );
}

",1
65120239,"const data = [2, 2.25, 3.3];

new Chart(document.getElementById(""chart""), {
  type: ""bar"",
  plugins: [{
    afterLayout: chart => {
      let ctx = chart.chart.ctx;
      ctx.save();
      let yAxis = chart.scales[""y-axis-0""];
      let yBottom = yAxis.getPixelForValue(0);
      let yTop = yAxis.getPixelForValue(5);          
      let gradient = ctx.createLinearGradient(0, yBottom, 0, yTop);   
      gradient.addColorStop(0, '#FF5722');           
      gradient.addColorStop(0.5, '#FFC107'); 
      gradient.addColorStop(1, '#8BC34A');           
      chart.data.datasets[0].backgroundColor = gradient;
      ctx.restore();
    }
  }],
  data: {
    labels: [""A"", ""B"", ""C""],
    datasets: [{
      label: ""Evaluation"",
      data: data
    }]
  },
  options: {
    scales: {
      yAxes: [{
        ticks: {
          min: Math.min(...data) - 0.2,
          max: Math.max(...data) + 0.2,
          stepSize: 0.5
        }
      }]
    }
  }
});",1
65147487,"export class FancySlider extends HTMLElement {
  value: number;
  // etc...
}
customElements.define('fancy-slider', FancySlider);

declare global {
  interface HTMLElementTagNameMap {
    'fancy-slider': FancySlider,
  }
}
",1
65149974,"import React, { useState } from ""react"";
import ""./styles.css"";

export default function App() {
  const [pageId, setPageId] = useState(""0"");

  const showPage = (event) => {
    setPageId(event.target.id);
  };

  const data = {
    pages: [
      {
        id: ""1"",
        products: [
          { img: ""test"", title: ""Title 1"", description: ""Description 1"" },
          { img: ""test"", title: ""Title 2"", description: ""Description 2"" }
        ]
      }
    ]
  };

  return (
    <>
      <button id=""1"" onClick={showPage}>
        1
      </button>
      <button id=""2"" onClick={showPage}>
        2
      </button>
      <button id=""3"" onClick={showPage}>
        3
      </button>
      <button id=""4"" onClick={showPage}>
        4
      </button>
      <button id=""5"" onClick={showPage}>
        5
      </button>

      {data.pages
        .filter((page) => page.id === pageId)
        .map((filteredid) => (
          <li>
            <div className=""description_box"">
              <img src={filteredid.products[0].img} />
              <h2>{filteredid.products[0].title}</h2>
              <p>{filteredid.products[0].description}</p>
            </div>
          </li>
        ))}
    </>
  );
}
",1
65085673,"<MuiPickersUtilsProvider utils={MomentUtils}>
            <KeyboardDatePicker
              autoOk={true}
              variant='inline'
              inputVariant='outlined'
              format={dateFormat}
              fullWidth
              name='expirationDate'
              value={expirationDate}
              onChange={ (date) => handleChangeDate(date)}
              placeholder={dateFormat}
              size='small'
              disableFuture={true}
              views={['date', 'month', 'year']}
              maxDate={today.setDate(today.getDate() - 1)}
            />
          </MuiPickersUtilsProvider>
",1
65100639,".contain {
  height: 100px;
  width: 100px;
  background-color: red;
  overflow: hidden;
}

.child1 {
  height: 30px;
  width: 30px;
  background-color: blue;
}

.child2 {
  height: 200px;
  width: 200px;
  background-color: yellow;
  position: absolute;
}",1
65112985,"    data: {
        ...,
        seriesMapping: [
            {
                x: 0,
                y: 2,
            }, 
            ..., 
            {}
        ],
    }
",1
65157252," $(""#search"").on(""keyup"", function() {
        $(""td"").closest(""tr"").hide()
    var value = $(this).val();
    if (value) {
        $(""td:contains('""+value+""')"").closest(""tr"").show()
    } 
    else {
        $(""td"").closest(""tr"").show()
    }
});
",1
65154735,"pipe(): Observable<T>;
pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;
pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;
pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;
pipe<A, B, C, D>(
    op1: OperatorFunction<T, A>,
    op2: OperatorFunction<A, B>,
    op3: OperatorFunction<B, C>,
    op4: OperatorFunction<C, D>
): Observable<D>;
pipe<A, B, C, D, E>(
    op1: OperatorFunction<T, A>,
    op2: OperatorFunction<A, B>,
    op3: OperatorFunction<B, C>,
    op4: OperatorFunction<C, D>,
    op5: OperatorFunction<D, E>
): Observable<E>;
pipe<A, B, C, D, E, F>(
    op1: OperatorFunction<T, A>,
    op2: OperatorFunction<A, B>,
    op3: OperatorFunction<B, C>,
    op4: OperatorFunction<C, D>,
    op5: OperatorFunction<D, E>,
    op6: OperatorFunction<E, F>
): Observable<F>;
pipe<A, B, C, D, E, F, G>(
    op1: OperatorFunction<T, A>,
    op2: OperatorFunction<A, B>,
    op3: OperatorFunction<B, C>,
    op4: OperatorFunction<C, D>,
    op5: OperatorFunction<D, E>,
    op6: OperatorFunction<E, F>,
    op7: OperatorFunction<F, G>
): Observable<G>;
pipe<A, B, C, D, E, F, G, H>(
    op1: OperatorFunction<T, A>,
    op2: OperatorFunction<A, B>,
    op3: OperatorFunction<B, C>,
    op4: OperatorFunction<C, D>,
    op5: OperatorFunction<D, E>,
    op6: OperatorFunction<E, F>,
    op7: OperatorFunction<F, G>,
    op8: OperatorFunction<G, H>
): Observable<H>;
pipe<A, B, C, D, E, F, G, H, I>(
    op1: OperatorFunction<T, A>,
    op2: OperatorFunction<A, B>,
    op3: OperatorFunction<B, C>,
    op4: OperatorFunction<C, D>,
    op5: OperatorFunction<D, E>,
    op6: OperatorFunction<E, F>,
    op7: OperatorFunction<F, G>,
    op8: OperatorFunction<G, H>,
    op9: OperatorFunction<H, I>
): Observable<I>;
pipe<A, B, C, D, E, F, G, H, I>(
    op1: OperatorFunction<T, A>,
    op2: OperatorFunction<A, B>,
    op3: OperatorFunction<B, C>,
    op4: OperatorFunction<C, D>,
    op5: OperatorFunction<D, E>,
    op6: OperatorFunction<E, F>,
    op7: OperatorFunction<F, G>,
    op8: OperatorFunction<G, H>,
    op9: OperatorFunction<H, I>,
    ...operations: OperatorFunction<any, any>[]
): Observable<unknown>;
",1
65149115,"  <div className=""row"">
         {column.map((item) => {
          const { title, image, path } = item;
          return (
            <ul className=""footer-collections"">
              <MenuLinks title={title} image={image} path={path} />
            </ul>
          );
        })}
        </div>
",1
65124336,"var data = {
  ""modules"": [{
    ""name"": ""mod1"",
    ""description"": ""mod1 description"",
  }, {
    ""name"": ""mod2"",
    ""description"": ""mod2 description"",
  }, {
    ""name"": ""mod3"",
    ""description"": ""mod3 description"",
  }]
}

jQuery($ => {
  $.each(data.modules, function(i, field) {
    let $li = $(`<li><div>Name: ${field.name}</div><div>Description: ${field.description}</div></li>`).appendTo('#moduleList');
    $('<input class=""set_inputs"" type=""button"" value=""select"" />').data('field', field).wrap('<div />').parent().appendTo($li);
  });


  $('#moduleList').on('click', '.set_inputs', e => {
    let $button = $(e.currentTarget);
    console.log($button.data('field'));
    
    // Uncomment these two lines in your production version. They are only commented 
    // here as they cause issues within SO snippets
    //localStorage.setItem('moduleObj', JSON.stringify($button.data('field')));
    //window.location.href = 'select_inputs.html';
  });
});",1
65113780,"function queryRAWGDatabase(title) {
    return new Promise((resolve, reject) => {
        title = title.split(' ').join('-');
        var req = unirest(""GET"", ""https://rawg-video-games-database.p.rapidapi.com/games/"" + title);

        req.headers({
            ""x-rapidapi-key"": process.env.RAWG_GAME_DATABASE_KEY,
            ""x-rapidapi-host"": ""rawg-video-games-database.p.rapidapi.com"",
            ""useQueryString"": true
        });
        req.end(function (result) {
            if (result.error) {
                reject('Error: ' + result.error);
                return;
            };
            resolve(result.body);
        });
    })
}
",1
65164315,"$('#startButton').on('click', function() {
    // run animation on click
    document.getElementById(""rightHand"").animate([
        { transform: 'translateY(80px)' }, 
        { transform: 'translateY(0px)' }
    ], {
        duration: 100
    });

    // say after 3 seconds to trigger secondpart

    setTimeout(function(){ secondpart(); }, 3000);
    
    });


function secondpart()
{   
        //run second part
    $('#portfolio').show();
    $('.footer').show();
    var hash = $('#portfolioSection');
    $('html, body').animate({
        scrollTop: $(hash).offset().top
    }, 800);

    }
",1
65144265,"function convertObject(obj) {
    const mappings = {
        PRODUCEID: ""PRID"",
        docType: ""docType"",
        PRODUCE: ""PRODUCE"",
        STATUS: ""STATUS""
    };
    const ret = {BusinessData: {}};
    for (const key in obj) {
        if (key in mappings) {
            ret[mappings[key]] = obj[key];
        } else {
            ret.BusinessData[key] = obj[key];
        }
    }
    return ret;
}
",1
65121554,"function onEdit(e){
  var sh=e.range.getSheet();
  var A1=e.range.getA1Notation();
  
  var editDate = Utilities.formatDate(new Date(),Session.getScriptTimeZone(),""MM/dd/yyyy HH:mm:ss"");
  
  var nextCell = e.range.offset(0, 1);
  nextCell.setValue(editDate);
  
  var newNote=Utilities.formatString('Last Modified: %s / Updated Cell: %s / Updated Cell Value: %s / Associated Date Cell: %s / Associated Date Cell Value: %s\n',editDate,A1,e.value,nextCell.getA1Notation(),editDate);
  nextCell.setNote(nextCell.getNote() + newNote);
}
",1
65114239,"function rec(array) {
    for (let i in array) {
        if (array[i].children === undefined) { // BASE CASE
            // console.log(""base case "", array);

            // push the object you want into the array, as at this point in the
            // recursion you will be at the level you can modify your image array as you like
            return array.push({ ""myImage"": ""myBeautifulCatImage"", ""does"": ""poooooor""});
        }

        // recursive call
        // visualise how deep you are going...
        // console.log(""rec"", array[i].children); 
        return rec(array[i].children); 
    }
}

rec(arr);

// if you know log your arr as in:
// console.log(""arr after recursion"", rec(arr))
// you will see your new cat showing where it should be :)
",1
65101765,"<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<table id=""categoriesTable"">

  <tr id=row_id1_dynamicdata>
    <td>.1..</td>
    <td>..</td>
  </tr>


  <tr id=row_id2_dynamicdata>
    <td>.2..</td>
    <td>..</td>
  </tr>

  <tr id=row_id3_dynamicdata>
    <td>.3..</td>
    <td>..</td>
  </tr>

  <tr id=row_id4_dynamicdata>
    <td>.4..</td>
    <td>..</td>
  </tr>

</table>

<input type=""text"" id=""someElement"" />",1
65098750,"<script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js""></script>
 <table border='0' width='100%'>
        <tr >
            <td width=""20%""  class=""bold"">Status 1:</td>
            <td><select name=""status1"" id=""status1""><option value=""null"">select:</option>
                </select>
            </td>
            <!--I want to hide the next 3 tds on some condition-->
            <td class=""status2"" colspan=""2"">&#160;</td>
            <td class=""bold status2"">status 2:</td>
            <td class=""status2""><select>
                    <option value=""null"">select</option>
                    <option value=""SV"">V - 1</option>
                    <option value=""SK"">V - 2</option>
            </select></td>
        </tr>
        <tr id=""status3"">
            <td width=""20%"" class=""bold"">Status 3:</td>
            <td><select>
                    <option value=""null"">select</option>
                    <option value=""SV"">V - 3</option>
                    <option value=""SK"">V - 4</option>
                </select>
            </td>
        </tr>
    </table>",1
65141032,"return (
  <div>
    Here's the result :
    <ol>
        {arr.map((value, index) => ( //<--return items
            <li key={index}>{value.title}</li>
        ))}
    </ol>
  </div>
);
",1
65091455,"$("".error"").each(function(index, element) {
      $(this).css('cursor', 'pointer');
      $(this).mouseover(function() {
        if ($(this).has('.popup-base').length > 0) {
          return;
        }
        var popup = document.createElement('div');
        popup.className = 'popup-base';
        let correctionslist = element.getAttribute('suggestions').split(',');
        for (correct of correctionslist) {
          popup.innerHTML += '<span class=""listitem"">' + correct + ' </span>';
        }

        $(this).append(popup);

      });
     });
.error {
  background-color: yellow;
  position: relative;
  display: inline-block;
}

.popup-base {
  display: none;
  position: absolute;
  background-color: #f9f9f9;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
  padding: 12px 16px;
  z-index: 1;
}

.error:hover .popup-base {
  display: block;
}

.listitem {
  display:block;
  margin:7px 0;
}

.listitem:hover {
  background-color:blue;
  color:white;
}",1
65094133," imageAdd(e) {         
            e.forEach((e) => {
            if (e.type == 'image/jpeg' || e.type == 'image/png')
            {
                this.images.push({
                    image: URL.createObjectURL(e),
                    imageData: e
                    })
            }
            })
   }
",1
65125064,"    series: [{
        ...
    }, {
        ...,
        yAxis: 1,
        data: [1, 0, 2, 1]
    }],
    yAxis: [{
        ...
    }, {
        title: {
            text: 'state'
        },
        categories: ['closed', 'standby', 'open'],
        min: 0,
        max: 2
    }]
",1
65112302,"let obj = { 
    ""expHistory"": {
        ""2020-11-26"": 84825,
        ""2020-11-25"": 87219,
        ""2020-11-24"": 44447,
        ""2020-11-23"": 14849,
        ""2020-11-22"": 57379,
        ""2020-11-21"": 32364,
        ""2020-11-20"": 42295
    }
}
            
function getTotal(thresholdDate, expHistory) {
    let result = Object.entries(expHistory)
        .filter(([date, points]) => date > thresholdDate)
        .reduce((total, [date, points]) => total + points, 0);
    return result;
}
 
const thresholdDate = ""2020-11-20"";
console.log(`Total (from ${thresholdDate}):`, getTotal(thresholdDate, obj.expHistory));",1
65114477,"const onBodyClick = (event) => {
  if (!ref.current) {
    // Component is unmounting
    // below line could be used or commented out; since the component is unmounting,
    // the state should not make a difference
    // setOpen(false);
    return
  }
  if (ref.current.contains(event.target)) {
    // Component is not unmounting, and click was inside ref
    return;
  }
  // Component is not unmounting, and click was outside ref
  setOpen(false);
};
",1
65143331,"var testATT = getATT('#graph3','data-gpget');
var testData = getData('#graph3','gpget');
console.log(typeof testATT, testATT);
console.log(typeof testData, testData);

function getData(id,value) {
   return $(id).data(value);
}
function getATT(id,value) {
   return $(id).attr(value);
}",1
65140880,"const name = 'Your Name Here';
document.querySelector('#movies').innerHTML = `
  <div class=""row"">
    <div class=""alert alert-primary w-50 mb-2"" role=""alert"">
      New genre added.
    </div>
  </div>
  <div class=""row"">
    <div class=""card mb-2 w-50"">
      <div class=""card-body"">
        <h5 class=""card-title"">${name}</h5>
      </div>
    </div>
  </div>
`;

const cardsList = document.querySelectorAll('.card-title');
console.log(cardsList[0]);",1
65127496,"const MyComponent = props => {
    const number = useRef(0);
    React.useEffect(() => {
        number.current = number.current + 1
        console.log('inside useEffect: ', number.current);
    }, [number.current])

    console.log('outside useEffect: ', number.current);

    return <div/>
}
",1
65097414,"const App = () => {

  return (
    <div style={{ padding: 20, backgroundColor: 'red', position: 'relative' }}>
      <h3>See the following blue background paragraph. I want it to go beyond the padding I set for the parent div</h3>
<div style={{ paddingBottom: 30}}><p style={{overflowX: 'scroll', whiteSpace: 'nowrap', backgroundColor: 'blue', position: 'absolute', left: 0, right: 0, margin: 'auto'}}>
      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
  </p>
</div>  
        <h3>Think of it this way: I still want it to scroll as needed, but, I want it to completely go across my parent div, surpassing the padding set on it.</h3>
    </div>
  )
}


ReactDOM.render(
    <App />,
    document.getElementById('app')
);",1
65098953,"var canvas = document.getElementById(""ok"");
var ctx = canvas.getContext(""2d"");
var loggingMachine = document.getElementById(""loggy"");
var score = 0;

const Rg = Math.floor(Math.random() * 480);
function ball(x) {
  this.x = x;
  this.y = 0;
  this.width = 20;
  this.height = 20;
}
var firstBall = new ball(Rg);

function newBall() {
  if (firstBall.y < 480) {
    ctx.clearRect(0, 0, 480, 480);
    ctx.fillRect(firstBall.x, firstBall.y, firstBall.width, firstBall.height);
    firstBall.y++;
  } else {
    const playerStart = player.x;
    const playerEnd = player.x + player.width;

    const ballStart = firstBall.x;
    const ballEnd = firstBall.x + firstBall.width;

    const test1 = ballEnd - playerStart;
    const test2 = ballStart - playerEnd;

    if (test1 >= 0 && test2 <= 0) {
      score++;
      loggingMachine.innerText = score;
    } else {
      score = 0;
    }
    firstBall.y = 0;
    firstBall.x = Math.floor(Math.random() * 480);
  }
}
function paddle(x) {
  this.x = x;
  this.y = 470;
  this.width = 70;
  this.height = 20;
}

var player = new paddle(50);
function renderPlayer() {
  ctx.fillRect(player.x, player.y, player.width, player.height);
}
function tick() {
  newBall(Rg);     

  renderPlayer();
  setTimeout(tick, 5);
}
loggingMachine.innerText = score;

document.addEventListener(""keydown"", (e) => {
    if (e.code === ""ArrowLeft"") {
      if (player.x > 0) {
        player.x = player.x - 5;
      }
    } else if (e.code === ""ArrowRight"") {
      if (player.x + player.width < 480) {
        player.x = player.x + 5;
      }
    }
});

tick();",1
65133339,"const filters = {
  lastHourFilter: (result) => result.postedDate > Date.now() - ms('1 hour'),
  last24HoursFilter: (result) => result.postedDate > Date.now() - ms('24 hours'),
  ...
  itContractorFilter: generateSpecialismFilter('IT Contractor'),
  clinicalPsychologyFilter: generateSpecialismFilter('Clinical Psychology'),
  ...
  fullTimeFilter: generateJobTypeFilter('Full Time'),
  temporaryFilter: generateJobTypeFilter('Temporary')
}
",1
65151355,"const getDaysArray = async (s, e) => {
    let a = [];
    let d = new Date(s);
    let emptyCount = d.getDay();
    for(let i = 0; i < emptyCount; i++) {
      a.push('');
    }
    for (d; d <= e; d.setDate(d.getDate() + 1)) {
      a.push(new Date(d).toString());
    }
    return a;
  };
",1
65116140,"var arr = [ { ""value"": ""1"", ""hobbies"": 'netflix'},{ ""value"": ""1"", ""hobbies"": 'food'} ];

var k = {};
var out = [];
arr.forEach(elm => {
  if(typeof(k[elm.value]) == ""undefined"")
    k[elm.value] = {value:elm.value, hobbies:[]};
  k[elm.value].hobbies.push(elm.hobbies);
});

Object.keys(k).forEach(key => out.push(k[key]));

console.log(out);",1
65095448,"function styleFunction(feature) {
  var iconUrl = feature.get('iconUrl');
  var defaultStyle = new ol.style.Style({
    fill: new ol.style.Fill({
    color: ""green""
  }),
  stroke: new ol.style.Stroke({
   color: ""green"",
   width: 1.2
  }),
  image: iconUrl ? new ol.style.Icon({
   scale: 0.1,
   src: iconUrl
  }) : undefined
 });
 return [defaultStyle];
}
",1
65091522,"var currZoom = map.getView().getZoom();
map.on(""moveend"", function(e) {
  var newZoom = map.getView().getZoom();
  if (currZoom != newZoom) {
    if (newZoom > 19) {
        document.getElementById(""vienna"").style.display = ""none"";
    } else {
        document.getElementById(""vienna"").style.display = ""unset"";
    }
    currZoom = newZoom;
  }
}); 
",1
65140099,"import { Tracker } from 'meteor/tracker'

FolioSchema = new SimpleSchema({
    'name': {
      'type': String,
      'min': 2,
      'required': true
    }
  },
  {
    'requiredByDefault': false,
    'clean': {
      'filter': true,
      'autoconvert': true,
      'removeEmptyStrings': true,
      'trimStrings': true,
      'getAutoValues': true,
      'removeNullsFromArrays': true
    },
    tracker: Tracker // this line is important
  })

",1
65103150,"import React, { useState } from ""react"";
import ""./styles.css"";

const App = () => {
  const [file, setFile] = useState([]);

  function uploadSingleFile(e) {
    setFile([...file, URL.createObjectURL(e.target.files[0])]);
    console.log(""file"", file);
  }

  function upload(e) {
    e.preventDefault();
    console.log(file);
  }

  function deleteFile(e) {
    const s = file.filter((item, index) => index !== e);
    setFile(s);
    console.log(s);
  }

  return (
    <form>
      <div className=""form-group preview"">
        {file.length > 0 &&
          file.map((item, index) => {
            return (
              <div key={item}>
                <img src={item} alt="""" />
                <button type=""button"" onClick={() => deleteFile(index)}>
                  delete
                </button>
              </div>
            );
          })}
      </div>

      <div className=""form-group"">
        <input
          type=""file""
          disabled={file.length === 5}
          className=""form-control""
          onChange={uploadSingleFile}
        />
      </div>
      <button
        type=""button""
        className=""btn btn-primary btn-block""
        onClick={upload}
      >
        Upload
      </button>
    </form>
  );
};

export default App;
",1
65117787,".select-field {
  &:nth-child(1) .dropdown-list {
    top: 342px;
    border: 2px dashed black; 
  }
  
  &:nth-child(2) .dropdown-list {
    top: 404px;
    border: 2px dashed gold;
  }
}
",1
65096491,"import React from ""react"";
import ReactDOM from ""react-dom"";

const customStyle = {
  color : ""red""

}

const dStyle = {
  backgroundImage : ""url(https://wallpapercave.com/wp/wp2771916.jpg)"",
}

ReactDOM.render(
<div style = {dStyle}>
  <h1 style = {customStyle}>Hello World!
  </h1>
  </div>, document.getElementById(""root""));
",1
65123362,"class Test {
    constructor() {
        this.isProgress = false;
        this.popup;
        this.payment;
    }

    onCompleted () {};
    onDismissed () {};
    onError () {};
  
    startPayment(payment) {
      this.payment = payment;
      this.isProgress = true;
      this.popup = window.open(""---"");
      var timer = setInterval(function () {
        if (this.Test.popup.closed) {
          clearInterval(timer);
          if (this.Test.isProgress) {
            this.Test.isProgress = false;
            this.Test.onDismissed();
          }
        }
      }, 500);
    }
  }
  
  const TestInstance = new Test();
  
  window.addEventListener(""beforeunload"", function () {
    if (TestInstance.popup != null && !TestInstance.popup.closed) {
      TestInstance.popup.close();
    }
  });
  
  window.Test = TestInstance;
",1
65091350,"async function getValuesWithAjax() {
  return [""test1"", ""test2"", ""test3""];
}

$(function() {

  getValuesWithAjax().then(values => {
    values.forEach(value => {
      $("".selectpicker"").append($(""<option>"")
        .val(value)
        .html(value)
      );
    });
  });


  $('.selectpicker').on('change', function() {
    selectedServices = $(this).val();
    alert(selectedServices)
  });
});",1
65132062,"function pdfToDoc() {
  
  var files = [];

  function getListOfId(){
    var folderId = ""1BpPZynsF5tjI5bysoOeHjKbr3gFCm7P8"";
    var filesN = DriveApp.getFolderById(folderId).getFiles();
    while (filesN.hasNext()) files.push(filesN.next().getId());
}
  getListOfId()
  for(var i=0;i<files.length;i++){
    var fileBlob = DriveApp.getFileById(files[i]).getBlob();
    var resource = {
      title: fileBlob.getName(),
      mimeType: fileBlob.getContentType()
    };
    var options = {
      ocr: true,
      convert: true
    };
  
    var docFile = Drive.Files.insert(resource, fileBlob, options);
    var docFileId = docFile.getId();  
    var saveDocFile = DriveApp.getFileById(docFileId);
      
    DriveApp.getFolderById(""1BpPZynsF5tjI5bysoOeHjKbr3gFCm7P8"").addFile(saveDocFile);
    DriveApp.getRootFolder().removeFile(saveDocFile);
    }
}
",1
65137812,"<h2>Create .txt file</h2>
<div>
   <label for=""fname"">File name (without .txt):</label>
   <br>
   <input type=""text"" id=""fname"" name=""fname""><br><br>
   <label for=""fcontent"">File Content:</label>
   <br>
   <textarea id=""fcontent"" name=""w3review"" rows=""4"" cols=""50""></textarea>
   <br>
   <button id=""create"">Create File</button>
   <a download=""info.txt"" id=""downloadlink"" style=""display: none"">Download Here</a>
</div>

(function() {
    var textFile = null,
        makeTextFile = function(text) {
            var data = new Blob([text], {
                type: 'text/plain'
            });

            if (textFile !== null) {
                window.URL.revokeObjectURL(textFile);
            }

            textFile = window.URL.createObjectURL(data);

            return textFile;
        };


    var create = document.getElementById('create');
    var fileContent = document.getElementById(""fcontent"");

    create.addEventListener('click', function() {
        const fileName = document.getElementById(""fname"").value;
        document.getElementById(""downloadlink"").setAttribute(""download"", fileName);
        var link = document.getElementById('downloadlink');
        link.href = makeTextFile(fileContent.value);
        link.style.display = 'block';
    }, false);
})();
",1
65159763,"case ADDNOTE: return {
  ...state,
  person: {
    ...state.person,
    operations: state.person.operations.map((operation) =>
      operation.id !== action.payload.operationId
        ? operation //not this operation, just return original
        : { // add note
            ...operation,
            notes: [...operation.notes, action.payload],
          }
    ),
  },
};
",1
65158363,".tooltip {
  margin-top: -100px;
  display: block;
  background: black;
  border-radius: 5px;
  max-width: 300px;
  width: 300px;
  position: absolute;
  padding: 12px 18px;
  font-family: open-sans-regular, sans-serif;
  font-size: 14px;
  color: white;
  line-height: 22px;
  box-sizing: border-box;
  z-index: 1000;
  outline: none;
}

.tooltip.bottom .arrow {
  top: 0;
  left: 50%;
  border-top: none;
  border-bottom: 10px solid black;
}

.tooltip .arrow {
  width: 0;
  height: 0;
  position: absolute;
  left: 50%;
  border-left: 10px solid transparent;
  border-right: 10px solid transparent;
  border-top: 10px solid #43b02a;
  margin-top: -10px;
  margin-left: -10px;
}",1
65112800,"var hobbies = [""Sample 1"", ""Sample 2"", ""Sample 3""];

function log(){
  const elem = document.getElementById(""demo"");
  const startStr = ""I only like"";

  hobbies.forEach((hobby,i) => {
    setTimeout(() => {
      elem.innerHTML = `<p>${startStr} ${hobby}</p>`
    }, i * 3000);
  })
}

var hobbies = [""Sample 1"", ""Sample 2"", ""Sample 3""];

function loop(delayTime) {
  const elem = document.getElementById(""demo"");
  const startStr = ""I only like"";
  hobbies.forEach((hobby,i) => {
    setTimeout(() => {
      elem.innerHTML = `<p>${startStr} ${hobby}</p>`
    }, i * delayTime);
  })
}

function log(){
  const delayTime = 3000;
  loop(delayTime)
  setInterval(function() {
    loop(delayTime)
  }, hobbies.length * delayTime);
}
",1
65111849,"$.fn.parallax = function(resistance, mouse) {
  $e = $(this);
  gsap.to($e, 0.2, {
    x: -((mouse.clientX - window.innerWidth / 2) / resistance),
    y: -((mouse.clientY - window.innerHeight / 2) / resistance)
  });
};


$('body').mousemove(function(e) {
  $('.mouse-with img').parallax(-10, e);
});
$('body').mouseout(function(e) {
  if (!$(e.relatedTarget).closest('body').is(this))
  gsap.to($('.mouse-with img'), 0.5, {
    x: 0,
    y: 0
  });
});
html {
  font-size: 16px;
  height: 100%;
}

body {
  font-size: 1em;
  font-family: Arial, Helvetica, Sans-serif;
  color: #000;
  line-height: 100%;
  min-height: 100%;
  margin: 0px;
  position: relative;
  overflow: hidden;
  overflow-y: auto;
}

.mouse-with {
  margin: -150px 0 0 -200px;
  position: absolute;
  top: 50%;
  left: 50%;
}

a {
  position: fixed;
  top: 10px;
  right: 10px;
}",1
65134245,"let storedFunction = () => {
    return this.function1().function2();
}

// or without arrow function

let storedFunction = function () {
    return this.function1().function2();
}.bind(this)

",1
65105671,"import React, { useState } from ""react"";
import ""./style.css"";

export default function App() {
  const [name, setName] = useState("""");
  const [number, setNumber] = useState("""");
  const [serverData, setServerData] = useState([]);

  const handleSubmit = event => {
    event.preventDefault();
    setServerData(serverData.concat({ name: name, number: number }));
    setName("""");
    setNumber("""");
    console.log(serverData);
  };

  const sendToServer = () => {
    console.log(""server ko post request with following data..."");
    console.log(serverData);
    setName("""");
    setNumber("""");
  };
  return (
    <div>
      <form onSubmit={handleSubmit}>
        <input value={name} onChange={e => setName(e.target.value)} />
        <input value={number} onChange={e => setNumber(e.target.value)} />
        <button>add data</button>
      </form>
      <button onClick={sendToServer}>Submit to server</button>
    </div>
  );
}

",1
65123243,"let output = [];
let shipperName = null;
for (let ii = 0; ii < input.length; ii++) {
  let val = input[ii];
  if (val[""Shipper_Name""] !== shipperName) {
    shipperName = val[""Shipper_Name""];
    output.push({Shipper_Name: shipperName});
  }
  let copy = JSON.parse(JSON.stringify(val));
  delete copy[""Shipper_Name""];
  output.push(copy);
}

console.log(output);
",1
65084577,"import { BrowserModule } from '@angular/platform-browser';
import { NgModule ,ErrorHandler } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
declarations: [],
imports: [ FormsModule,ReactiveFormsModule]});

export class AppModule { }

import { Component,OnInit } from '@angular/core';
import {FormGroup,FormControl,Validators,FormArray} from '@angular/forms';
import {Observable} from 'rxjs/Observable';
.
.
.
public formName: FormGroup;
constructor(private formsModule: FormsModule) {
 this.formName =  this.formBuilder.group({
   firstName:  [null, Validators.required],
   lastName:  [null, Validators.required],
 })
} 

 onSubmit() {
   console.log(this.formName.value);
 }
",1
65088811,"FUNCTION elementReplace(arr, obj)
  result <- []
  FOR elemKey in arr DO:
     IF elemKey is a key of obj THEN:
       push obj[elemKey] to result
     ELSE:
       push elemKey to result
     END IF
  END FOR
END FUNCTION
",1
65153389,"const testeArray = [{name:""antonio"", category: [""One"",""Two""]},{name:""joana"", category: [""Two""]}];
const catArray1 = [""One"",""Two""];
const catArray2 = [""One""];
const text = ""an""

const resultArray1 = testeArray.filter((item)=>{
return item.name.includes(text) && item.category.some(x => catArray1.includes(x));
})  
console.log(resultArray1);  //should return antonio and joana objects

const resultArray2 = testeArray.filter((item)=>{
return item.name.includes(text) && item.category.some(x => catArray2.includes(x));
})  
console.log(resultArray2);   //should return antonio object only ",1
65160101,"import { Calendar, momentLocalizer } from ""react-big-calendar"";
import moment from ""moment"";

import ""./App.css"";
import ""react-big-calendar/lib/css/react-big-calendar.css"";

const localizer = momentLocalizer(moment);
const App = () => {
  const [eventValue, setEventValue] = useState("""");
  const [startValue, setStartValue] = useState("""");
  const [events, setEvents] = useState([
    {
      title: ""Finish Calendar"",
      start: moment(),
      end: moment(),
      allDay: false
    }
  ]);

  const addEvent = (e) => {
    const newEvents = [...events];
    newEvents.push({
      title: eventValue,
      start: moment().date(startValue),
      end: moment()
    });
    console.log(events);
    setEvents(newEvents);
  };
  const startOfMonth = moment().startOf(""month"").format(""DD"");

  return (
    <div className=""App"">
      <div className=""event-input"">
        <label for=""eventInput"">Event:&nbsp;</label>
        <input
          id=""eventInput""
          name=""eventInput""
          value={eventValue}
          onChange={(e) => {
            setEventValue(e.target.value);
          }}
        />
        <label for=""eventInput"">Start&nbsp;</label>
        <input
          id=""startInput""
          name=""startInput""
          value={startValue}
          onChange={(e) => {
           
            setStartValue(
              parseInt(startOfMonth) + parseInt(e.target.value) - 1
            );
          }}
        />
        <button onClick={addEvent}>Add event</button>
      </div>
      <Calendar
        localizer={localizer}
        defaultDate={new Date()}
        defaultView=""month""
        events={events}
        style={{ height: ""75vh"" }}
      />
      <div className=""list"">
        <ul>
          <li>Display Weekly view X</li>
          <li>Highlight today X</li>
          <li>Allow navigation to different weeks X</li>
          <li>allow adding new events</li>
          <li>allow editing existing events</li>
          <li>allow deleting events</li>
          <li>Persisting data </li>
          <li>Use apis to load and save data </li>
        </ul>
      </div>
    </div>
  );
};

export default App;
",1
65132771,"function testSize(num) {
      // Only change code below this line
    if (num < 5) {
      return ""Tiny"";
    } else if (num < 10) {
      return ""Small"";
    } else if (num < 15) {
      return ""Medium"";
    } else if (num < 20) {
      return ""Large"";
    } else {
      return ""Huge"";
    }
  // Only change code above this line
}

testSize(7);
",1
65133415,"function startFunction() {
  let az = document.getElementsByTagName(""input"")[0].getAttribute(""value"");

  let elements = document.getElementsByTagName(""a"");
  let element;
  for (let a = elements.length - 1; a >= 0; a--) {
    element = elements[a];
    if (!element.innerHTML.startsWith(az)) {
      element.remove();
    }
  }

}

startFunction();
<input type=""text"" name=""search"" value=""A"" class=""searchbox"">
<div class=""media-body"">
  <div class=""media-heading"">
    <a href=""#"">A doc beginning with A</a>
  </div>
</div>

<div class=""media-body"">
  <div class=""media-heading"">
    <a href=""#"">Doc beginning with D</a>
  </div>

  <div class=""media-body"">
    <div class=""media-heading"">
      <a href=""#"">Something completely different</a>
    </div>
  </div>",1
65085369,"let animals = [""cat"", ""tiger"", ""wolf"", ""lion"", ""dog"", ""elephant"", ""rat""];

function checkAnimalsOrder(animalsArr, orderStr) {
  // store the current index of the orderedAnimals array
  let ind = 0;
  // make an array from that string format ""animal > animal"" ...;
  let orderedAnimals = orderStr.split("" < "");
  // filter the animals array to get only the animal that have the same index
  // of the orderedAnimals array element
  return animalsArr.filter(function(animal, index) {
    if(animalsArr[index] === orderedAnimals[ind]) {
      ind++;
      return animal;
    }
  }).join("""") === orderedAnimals.join("""");
  // finally join the two arrays as a string and check for equality
}

// Testing 
console.log(""checking for 'tiger < lion < rat':"");
console.log(checkAnimalsOrder(animals, ""tiger < lion < rat""));

console.log(""checking for 'tiger < dog < rat':"");
console.log(checkAnimalsOrder(animals, ""tiger < dog < rat""));

console.log(""checking for 'tiger < cat < rat':"");
console.log(checkAnimalsOrder(animals, ""tiger < cat < rat""));

// On the fly
console.log(""checking for 'rat < tiger':"");
console.log(checkAnimalsOrder([""rat"", ""elephant"", ""tiger""], ""rat < tiger""));",1
65129422,"<link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"">
<script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js""></script>
<script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""></script>

<!-- Button trigger modal -->
<button type=""button"" class=""btn btn-primary"" data-toggle=""modal"" data-target=""#exampleModal"">
  Launch demo modal
</button>

<!-- Modal -->
<div class=""modal fade"" id=""exampleModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
  <div class=""modal-dialog"" role=""document"">
    <div class=""modal-content"">
      <div class=""modal-header"">
        <h5 class=""modal-title"" id=""exampleModalLabel"">Modal title</h5>
        <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
          <span aria-hidden=""true"">&times;</span>
        </button>
      </div>
      <div class=""modal-body"">
        ...
      </div>
      <div class=""modal-footer"">
        <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
        <button type=""button"" class=""btn btn-primary"">Save changes</button>
      </div>
    </div>
  </div>
</div>


$('#exampleModal').on('shown.bs.modal', function (e) {
  var element = $('<div>Modal is opened</div>');
  $('.modal-body').append(element);
})
",1
65101102,"$.ajax({
      method:""POST"",
      data: JSON.stringify(detalleVenta),
      dataType: ""json"",
      contentType: ""application/json"",
      url: ""Venta/GuardarVenta?age=34&name=Marry"",
      traditional: true,         
      success: function(data, textStatus) { 
      if (data == ""OK"" ){
      location.href = '@Url.Action(""Index"",""Compra"")'          
    }
",1
65098422,"function change(elem, data) {
  let counter = 0;
  setInterval(function() {
    elem.innerHTML = data[counter];
    counter++;
    if (counter >= data.length) {
      counter = 0;
    }
  }, 1000);
}

change(document.getElementById(""n1""), [""2.0%"", ""1.7%"", ""1.9%"", ""1.8%"", ""1.9%""]);
change(document.getElementById(""n2""), [""12.0%"", ""2.7%"", ""3.9%"", ""4.8%"", ""5.9%""]);",1
65088978,"const orderIds = document.querySelectorAll("".orderid"")
const names = document.querySelectorAll("".name"")
let records = []

for(let i=0; i < orderIds.length; i++){
  const record = {
     orderId: orderIds[i].textContent,
     name: names[i].textContent
  }
  records.push(record)
}
",1
65134604,"new Vue({
  el: '#app',

  data() {
    return {
      form: {
        children: []
      }
    }
  },

  methods: {
    children(e) {
      const {
        children
      } = this.form;
      const popOrPush = e.target.value > children.length ? 'push' : 'pop';
      const difference = Math.abs(e.target.value - children.length);

      for (let i = 0; i < difference; i++) {
        this.form.children[popOrPush]({
          firstName: '',
          lastName: ''
        });
      }
    }
  }
});

Vue.config.productionTip = false;
Vue.config.devtools = false;
<script src=""https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.js""></script>
<div id=""app"">
  <form>
    <label for=""childrenCount"">Amount of children</label>

    <input type=""number"" id=""childrenCount"" min=""0"" @input=""children"" />

    <template v-if=""form.children.length > 0"">
      <h2>Children</h2>

      <div
        v-for=""(child, index) in form.children""
        :key=""index"">

        Child {{ index + 1 }}:

        <input
          type=""text""
          placeholder=""First name""
          v-model=""child.firstName""
        />

        <input
          type=""text""
          placeholder=""Last name""
          v-model=""child.lastName""
        />
      </div>
    </template>
  </form>
</div>",1
65152633,"function passTeste(arg) {

  const element = document.querySelector(""#mainImage-teste-js > div"")

  const transformValue = window.getComputedStyle(element).transform;
  const w = window.getComputedStyle(element).width;
  var matrix = new WebKitCSSMatrix(transformValue);

  console.log(w);
  console.log(matrix.m41);
  console.log(matrix.m41/parseInt(w)*100+""%"");

}
.container {
  width: 200px;
  overflow: hidden;
}

.product__image--mainImage {
  display: flex;
  transition: 2s;
  transform: translate(-200%);
}

.product__image--mainImage img {
  max-width: 100%;
}

.container>p {
  display: flex;
  justify-content: space-between;
  font-size: 45px;
  cursor: pointer;
}",1
65098919,"<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>

<div id=""firstdiv"">
    <div id=""text1_first"" class=""myclass searchA searchB searchC"">...</div>
    <div id=""text2_first"" class=""myclass searchB searchA searchC"">...</div>
    <div id=""text3_first"" class=""myclass searchD searchB searchA"">...</div>
    <div id=""text3_first"" class=""myclass searchX searchY searchZ"">...</div>
</div>

<div id=""scnddiv"">
    <div id=""text1_scnd"" class=""myclass searchA searchB searchC"">...</div>
    <div id=""text2_scnd"" class=""myclass searchB searchA searchC"">...</div>
    <div id=""text3_scnd"" class=""myclass searchD searchB searchA"">...</div>
    <div id=""text3_scnd"" class=""myclass searchX searchY searchZ"">...</div>
</div>",1
65136980,"import React from 'react';
import MP3Options from './mp3';
import SubmitButton from './submit';

class App extends React.Component {
  state = { codec: 'MP3', mp3EncodingType: 'cbr' };

  onCodecChange = (e) => {
    this.setState({ codec: e.target.value });
  };

  onMp3EncodingTypeChange = (event) => {
    this.setState({ mp3EncodingType: event.target.value });
  };

  submitClicked = () => {
    console.log('Submit button was clicked.');
    console.log(this.state.mp3EncodingType);
  };

  renderComponent = () => {
    const { codec, mp3EncodingType } = this.state;
    switch (codec) {
      case 'MP3':
        return (
          <MP3Options
            mp3EncodingType={mp3EncodingType}
            onChange={this.onMp3EncodingTypeChange}
          />
        );
      default:
        return null;
    }
  };

  render() {
    return (
      // Codec options div.
      <div>
        <select
          id=""codecs""
          onChange={this.onCodecChange}
          value={this.state.codec}
        >
          <option value=""AAC"">AAC (.m4a)</option>
          <option value=""AC3"">AC3 (Dolby Digital)</option>
          <option value=""ALAC"">ALAC</option>
          <option value=""CAF"">CAF (.caf)</option>
          <option value=""DTS"">DTS</option>
          <option value=""FLAC"">FLAC</option>
          <option value=""MKA"">MKA (extract audio without encoding it)</option>
          <option value=""MKV"">MKV (.mkv)</option>
          <option value=""MP3"">MP3</option>
          <option value=""MP4"">MP4 (.mp4)</option>
          <option value=""Opus"">Opus (.opus)</option>
          <option value=""Vorbis"">Vorbis (.ogg)</option>
          <option value=""WAV"">WAV</option>
        </select>
        {this.renderComponent()}
        <SubmitButton onSubmit={this.submitClicked} />
      </div>
    );
  }
}

export default App;

import React from 'react';
import Mp3Cbr from './Mp3Cbr';
import Mp3Vbr from './Mp3Vbr';

class MP3Options extends React.Component {
  renderComponent = () => {
    const { mp3EncodingType } = this.props;
    switch (mp3EncodingType) {
      // Show the Mp3Cbr component if CBR or ABR is selected. Show the Mp3Vbr component if VBR is selected.
      case 'cbr':
        return <Mp3Cbr />;
      case 'abr':
        return <Mp3Cbr />;
      case 'vbr':
        return <Mp3Vbr />;
      default:
        return null;
    }
  };

  render() {
    const { onChange } = this.props;
    return (
      <div id=""mp3_encoding_div"">
        <label htmlFor=""mp3_encoding_type"">Encoding Type:</label>
        <select id=""mp3_encoding_type"" onChange={onChange}>
          <option disabled value>
            Select encoding type
          </option>
          <option value=""cbr"">CBR (Constant Bitrate)</option>
          <option value=""abr"">ABR (Average Bitrate)</option>
          <option value=""vbr"">VBR (Variable Bitrate)</option>
        </select>
        {this.renderComponent()}
      </div>
    );
  }
}

export default MP3Options;
",1
65104468,"function NameComponent() {
  React.useEffect(() => {
    async function getName() {
      const res = await getNamePromise(); // type: Promise<Interface>
      setName(res.name)
    }

    getName()
  }, [])

  React.useEffect(() => {
    async function getPhoto() {
      const res = await getPhotoPromise(); // type: Promise<Interface>
      setPhoto(res.photo)
    }

    getPhoto()
  }, [])

  const [name, setName] = React.useState()
  const [photo, setPhoto] = React.useState()

  if (!name || !photo) {
    return <div>Loading...</div>
  }

  return(
    <dl>
      <dd>{name}</dd>
      <dd>{photo}</dd>
    </dl>
  );
} 
",1
65141333,"{
    ""data"": ""orderStatus"",
    ""render"": function (data, type, row) {

        //get id of current row
        var id = row.id;
        console.log(id);

        //modify the href attribute with id value based on actual requirement

        return `
        <div class=""text-center"">
            <a href=""/Admin/OrderAdmin/UpdateOrder/${data}"" class=""btn btn-success text- 
                white"" style=""cursor:pointer"">
                <i class=""fas fa-edit""></i>
            </a>
        </div>
            `;
    }, ""width"": ""5%""
}
",1
65112906,"window.onload = function() {
var tr = document.querySelectorAll('#productTable tbody tr');

Array.from(tr).forEach(function(trArray, index) {
  var button = document.createElement('button');
  var th = document.createElement('th');
  button.innerText = 'buy';
  button.className = 'btn_buy';
  th.append(button);
  tr[index].append(th);    
});
}
<table id=""productTable"" class=""table table-bordered table-condensed table-striped"">
 <thead>
   <tr>
      <th>Product Name</th>
      <th>Description</th>
      <th>Price</th>
   </tr>
 </thead>

 <tbody>
   <tr>
      <th>Soap</th>
      <th>good for babies</th>
      <th>75</th>
   </tr>
   
   <tr>
      <th>Milk</th>
      <th>manufactured</th>
      <th>100</th>
   </tr>
   
    <tr>
      <th>Rice</th>
      <th>red rice 1kg pack</th>
      <th>130</th>
   </tr>
 </tbody>
</table>",1
65117455,"async function displayAnnouncements() {
    const resp = await axios.get(`${_something}/_api/lists/GetByTitle('someName')/Items?$select=ID,Title,Body,Created,Link&$orderby=Created%20desc&$top=4`, restHeaders)
    let _data = resp.data.d.results;
    _data.slice(0, 4).forEach(m => {
        let _newDate = moment(m.Created).utc().format(""MMMM D, YYYY"");
        const itemLink = $(
            `<a href=""#close"" data-toggle=""modal"" data-target=""#bkEvts-${m.ID}"" class=""cont_evts-link"" title=""View Announcement"">
                <b>${m.Title}</b> - <i>${_newDate}</i>
            </a><br>`
        );
    });
};
",1
65162722,"var mainColor = document.getElementById(""main-color"");
var secondColor = document.getElementById(""second-color"");

function color(cssVariable, inputValue) {
  return cssVariable + "":"" + inputValue
}

mainColor.addEventListener('input', function() {
  document.documentElement.style.setProperty(""--main-color"", this.value);
})

secondColor.addEventListener('input', function() {
  document.documentElement.style.setProperty(""--second-color"", this.value)
})",1
65119852,"<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
  $('select#selectBox').on('change', function() {
     var value = $(this).val(); //get value from select-box
      $.ajax({
        type: 'POST',//can be post request or get 
        url: url,//put url here where you need to send
        data: {
          'value': value//pass value 
        },
        success: function(response) {
          //result will come here 
           //if recieve as html use           
          $(""somedivclass"").html(response)        
          //if recieve as separted commas         
          var result = response.split("","")
          //access same using result[0],result[1] ..etc
          //add value to input using
          $(""#loginid"").val(result[0]);
         //same for other  
    
        }
      });
    })

String value = (String) request.getParameter(""value"");
String query = ""select * from Users where yourcolumnanemtocompare=?"";
PreparedStatement ps = con.prepareStatement(query);
ps.setString(1, value);
ResultSet rs = ps.executeQuery();
//if value there 
String text;
if (rs.next()) {
  //change value accordingly..i.e : rs.getstring..
  text = ""<input id="" + loginid "" type=""
  text "" value="" + rs.getInt(1) + "" /><input id=""
  firstname "" type=""
  text "" value="" + rs.getInt(2) + "" /> <input id=""
  lastname "" type=""
  text "" value="" + rs.getInt(3) + "" /><input id=""
  address "" type=""
  text "" value="" + rs.getInt(4) + "" />"";
}

response.setContentType(""text/html""); // Set content type 
response.setCharacterEncoding(""UTF-8"");
response.getWriter().write(text); // response to send back.
//or
if (rs.next()) {
  //change value accordingly..i.e : rs.getstring..
  text = rs.getInt(1) + "","" + rs.getInt(2) + "","" + rs.getInt(3) + "","" + rs.getInt(4);
}
response.setContentType(""text/plain""); // Set content type 
response.setCharacterEncoding(""UTF-8"");
response.getWriter().write(text); // response  to send back..
//or use json to send data..
",1
65098144,"<form id=""regForm"" name=""regForm"" action=""[NEED ACTION]"" class=""col-sm-6"">
    ...
    <div style=""overflow:auto;"">
        <div style=""float:right;"">
            <button type=""button"" id=""prevBtn"" click=""nextPrev(-1)"">Previous</button>
            <button type=""button"" id=""nextBtn"" onclick=""nextPrev(1)"">Next</button>
            <submit type=""submit"" class=""hide"" value=""Submit"" />
        </div>
    </div>
</form>

function showTab(n) {
    var x = document.getElementsByClassName(""tab"");
    x[n].style.display = ""block"";

    if (n == 0) {
        document.getElementById(""prevBtn"").style.display = ""none"";
    } else {
        document.getElementById(""prevBtn"").style.display = ""inline"";
    }
    if (n == (x.length - 1)) {
        document.getElementById(""nextBtn"").classList.add('hide');
        document.getElementById(""submitBtn"").classList.remove('hide');
    } else {
        document.getElementById(""nextBtn"").classList.remove('hide');
        document.getElementById(""submitBtn"").classList.add('hide');
    }

    fixStepIndicator(n)
}

function showTab(n) {

    var x = document.getElementsByClassName(""tab"");
    var nextSubmitBtn = document.getElementById(""nextBtn"");
    x[n].style.display = ""block"";

    if (n == 0) {
        document.getElementById(""prevBtn"").style.display = ""none"";
    } else {
        document.getElementById(""prevBtn"").style.display = ""inline"";
    }
    if (n == (x.length - 1)) {
        nextSubmitBtn.textContent = ""Submit"";
        nextSubmitBtn.onClick = someSubmitFunc;
    } else {
        nextSubmitBtn.textContent = ""Next"";
        nextSubmitBtn.onClick = function () { nextPrev(1); };
    }

    fixStepIndicator(n)
}
",1
65118413,"import React, {
  useState,
  useEffect,
  useRef,
  useCallback,
  useMemo
} from ""react"";
import ""./style.css"";

let canvasWidth = 200;
let canvasHeight = 200;

export function useCanvas(w, h, props) {
  let ref = useRef();
  let elem = (
    <canvas ref={ref} width={canvasWidth} height={canvasHeight} {...props} />
  );

  let draw = useCallback(
    (box, color) => {
      let c = ref.current;
      let ctx = c.getContext(""2d"");
      ctx.fillStyle = color;
      ctx.fillRect(box.x, box.y, box.w, box.w);
    },
    [w, h]
  );

  let clear = useCallback(() => {
    ctx.clearRect(0, 0, w, h);
  }, []);

  return [elem, draw, clear];
}

function getMousePos(e) {
  let rect = e.target.getBoundingClientRect();
  return {
    x: e.clientX - rect.left,
    y: e.clientY - rect.top
  };
}

function isOverABox(box, mousePos) {
  return (
    mousePos.x >= box.x &&
    mousePos.y >= box.y &&
    mousePos.x <= box.x + box.w &&
    mousePos.y <= box.y + box.w
  );
}

export default function App() {
  let [hovered, setHovered] = useState(false);
  let [boxes, setBoxes] = useState([
    { x: 5, y: 5, w: 10 },
    { x: 170, y: 80, w: 10 },
    { x: 80, y: 170, w: 10 }
  ]);

  let [canvas, draw, clear] = useCanvas(canvasWidth, canvasWidth, {
    onMouseMove: e => {
      let pos = getMousePos(e);
      let isHovered = boxes.some(b => isOverABox(b, pos));
      if (isHovered) setHovered(true);
      else setHovered(false);
    }
  });

  useEffect(() => {
    let color = hovered ? ""gold"" : ""black"";
    boxes.forEach(b => draw(b, color));
  }, [boxes, draw, hovered]);
  return (
    <div>
      <pre>
        <code>hovered: {hovered ? ""true"" : ""false""}</code>
      </pre>
      {canvas}
    </div>
  );
}
",1
65142440,"* {
  font-family: ""Poppins"", sans-serif;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

section {
  padding: 100px;
}

.row .co150 {
  position: relative;
  display: inline-block;
  vertical-align: top;
  width: 48%;
}
 .co150 p {
   width: 100%;
   overflow-wrap: break-word;
   
   
 }
.imgBx {
  width: 100%;
}
.imgBx img {
 width: 100%;
 object-fit: contain;
}
<section class=""about"" id=""about"">
  <div class=""row"">
    <div class=""co150"">
      <h2 class=""titleText""><span>A</span>bout Us</h2>
      <p>udgugqguugdugwugugugduqugdgqwuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
        jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh.
        <br><br>lorem ipsum dolores umbridge x her husband blalalalallllllllllllllllllllllll .
      </p>
    </div>
    <div class=""co150"">
      <div class=""imgBx"">
        <img src=""https://i.picsum.photos/id/425/536/354.jpg?hmac=wBNHXWWIrsjZJiC-motCXU36RWkqnUAAPfVJulwHGHM"">
      </div>
    </div>
  </div>
</section>",1
65099581,"render() {
this.ul.innerHTML = """";
this.tasks.forEach((task) => {
  const li = document.createElement(""li"");
  const cb = document.createElement(""input"");
  cb.type = ""checkbox"";
  cb.addEventListener(""click"", (e) => {
    this.markTask(e);
  });
  li.appendChild(cb);

  li.append(document.createTextNode(task.title));

  const btn = document.createElement(""button"");
  li.appendChild(btn);
  btn.textContent = ""Delete"";
  btn.classList.add(""remove"");
  btn.addEventListener(""click"", (e) => {
    this.deleteTask(e);
  });
  this.ul.appendChild(li);

   if (task.done) {
    cb.checked = true;
    li.style.textDecoration = ""line-through"";
   } else {
    cb.checked = false;
    li.style.textDecoration = ""none"";
   }
 });
}
",1
65130776,"const source = ['ActionScript', 'AppleScript', 'Asp', ...'Python', 'Ruby'];

$('#demo2').tagEditor({
  autocomplete: {
    delay: 0, // show suggestions immediately
    position: {
      collision: 'flip'
    }, // automatic menu position up/down
    source
  },
  forceLowercase: false,
  placeholder: 'Programming languages ...',
  initialTags: ['ActionScript', 'AppleScript'],
  beforeTagSave: (field, editor, tags, tag, val) => {
    return source.includes(val) && val;
  }
});",1
65085153,"<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
<html xmlns=""http://www.w3.org/1999/xhtml"">
<head>
<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
<title>Js Check</title>
<script src=""https://code.jquery.com/jquery-3.5.1.min.js"" language=""javascript""></script>
</head>

<body>
<div id=""wrapper"">
  <form id=""ratingForm"" method=""POST"">
    <div class=""form-group"">
      <h4>Rate this product</h4>
      <!-- Start Star -->
      <button type=""button"" class=""btn btn-warning btn-sm rateButton"" aria-label=""Left Align""> <span class=""glyphicon glyphicon-star"" aria-hidden=""true""></span> </button>
      <button type=""button"" class=""btn btn-default btn-grey btn-sm rateButton"" aria-label=""Left Align""> <span class=""glyphicon glyphicon-star"" aria-hidden=""true""></span> </button>
      <button type=""button"" class=""btn btn-default btn-grey btn-sm rateButton"" aria-label=""Left Align""> <span class=""glyphicon glyphicon-star"" aria-hidden=""true""></span> </button>
      <button type=""button"" class=""btn btn-default btn-grey btn-sm rateButton"" aria-label=""Left Align""> <span class=""glyphicon glyphicon-star"" aria-hidden=""true""></span> </button>
      <button type=""button"" class=""btn btn-default btn-grey btn-sm rateButton"" aria-label=""Left Align""> <span class=""glyphicon glyphicon-star"" aria-hidden=""true""></span> </button>
      <!-- End Star -->
      
      <input type=""hidden""  id=""rating"" name=""rating"" value=""1"">
      <input type=""hidden""  id=""itemId"" name=""itemId"" value=""<?php echo $_GET['id']; ?>"">
      <input type=""hidden"" name=""action"" value=""saveRating"">
    </div>
    <div class=""form-group""> 
      <!--Comment Start-->
      <label for=""usr"">Title*</label>
      <input type=""text""  id=""title"" name=""title"" required>
    </div>
    <div class=""form-group"">
      <label for=""comment"">Comment*</label>
      <textarea rows=""5"" id=""comment"" name=""comment"" required></textarea>
    </div>
    <div class=""form-group"">
      <button type=""submit"" class=""btn btn-info"" id=""saveReview"">Save Review</button>
    </div>
    <!--Comment End-->
  </form>
</div>
<script>
jQuery(document).ready(function($) {
        
        $('#ratingForm').on('submit', function(event){
          event.preventDefault();
          event.stopImmediatePropagation();
            var formData = $(this).serialize();
            $.ajax({
                type : 'POST',
                dataType: ""json"",   
                url : 'action.php',                 
                data : formData,
                success:function(response){
                console.log(response);
                    if(response.success == 1) {
                        $(""#ratingForm"")[0].reset();
                        window.location.reload();
                    } 
                }
            }); 
        });
});
</script>
</body>
</html>
",1
65156713,"<body>
<div id=""root""></div>
</body>
const graph = {
  A: ['B', 'C'],
  B: ['D', 'E'],
  C: ['F', 'G'],
  D: [],
  E: [],
  F: [],
  G: [],
  
 }
 
 const root = document.getElementById(""root""); 
 
 const findchildren = (node) => graph[node]
 
 const drawNode = (node) => {
    const input = document.createElement(""input""); 
  input.setAttribute(""type"", ""text"");
  input.setAttribute(""placeholder"", node);
  root.appendChild(input); 
  const children = findchildren(node)
  if (children.length > 0) {
    children.forEach(item => drawNode(item))    
  }
 }
 
 drawNode(""A"")
",1
65163887,"function Component () {
    const [input, setInput] = useState(0);

    const handleInputChange = (e) => {
        setInput(e.target.valueAsNumber || e.target.value);
        console.log(e.target.valueAsNumber || e.target.value);
    }

    return (
        <input type=""number"" value={input} onChange={handleInputChange} required pattern=""[0-9]*[.,][0-9]*""/>
        <h4>Data : {input}</h4>
    )
}
",1
65135162,"const hasMatch = (pred) => ({children = [], ...rest}) =>
  pred (rest) || children .some (hasMatch (pred))

const collectFamily = (pred) => (xs) => 
  xs .flatMap (
    x => pred(x) 
      ? [x, ...(x.children || [])] 
    : hasMatch (pred) (x) 
      ? [x, ...collectFamily (pred) (x.children || [])]
    : []
  )

const collectFamilyByName = (target) => 
  collectFamily((({name}) => name == target))

const log = (fn) => (inputs) => // JSON.stringify avoids StackOverflow console artifacts
  inputs .forEach (o => console .log (JSON .stringify (fn (o), null, 2)))

const inputs = [
  [{name: ""Group 1"", children: [{name: ""Group 2"", children: [{name: ""Group 3"", children: []}]}]}, {name: ""Group 5"", children: []}],
  [{name: ""Group 1"", children: [{name: ""Group 2"", children: [{name: ""Group 3"", children: []}]}]}, {name: ""Group 5"", children: [{name: 'Group 2', children: []}]}],
]

log (collectFamilyByName ('Group 2')) (inputs)",1
65147218,"<xsd:events xmlns:xsd=""http://epevents.post.ee/xsd"">
    <event id=“1234”>
      <packetCode>ABC123</packetCode>
      <eventCode>EVENT_CODE</eventCode>
      <eventDate>2020-12-03T14:34:09.000+02:00</eventDate>
      <stateCode>STATUS_CODE</stateCode>
      <eventSource zip=""123"">Some place</eventSource>
    </event>
    <event id=“456”>
      <packetCode>DEF456</packetCode>
      <eventCode>EVENT_CODE</eventCode>
      <eventDate>2020-12-03T14:40:44.000+02:00</eventDate>
      <stateCode>STATUS_CODE</stateCode>
      <eventSource zip=""123"">Some place</eventSource>
    </event>
  </xsd:events>

{
    ""xsd:events"": {
        ""event"": [
            {
                ""packetCode"": ""ABC123"",
                ""eventCode"": ""EVENT_CODE"",
                ""eventDate"": ""2020-12-03T14:34:09.000+02:00"",
                ""stateCode"": ""STATUS_CODE"",
                ""eventSource"": ""Some place""
            },
            {
                ""packetCode"": ""DEF456"",
                ""eventCode"": ""EVENT_CODE"",
                ""eventDate"": ""2020-12-03T14:40:44.000+02:00"",
                ""stateCode"": ""STATUS_CODE"",
                ""eventSource"": ""Some place""
            }
        ]
    }
}
",1
65145619,"var response = [{
    ""endTime"": ""2020-12-06 16:30:00.000Z"",
    ""event"": ""Study"",
    ""startTime"": ""2020-12-06 12:30:00.000Z"",
    'somedata':'js is good'
  },
  {
    ""endTime"": ""2020-12-06 16:30:00.000Z"",
    ""event"": ""gym"",
    ""startTime"": ""2020-12-05 12:30:00.000Z"",
    'somedata':'js is good'
  },
]

let detailsRes = response.reduce((acc, res) => {
    let start = new Date(moment(res.startTime).format('L'));
    let end = new Date(moment(res.endTime).format('L'));
    let current = new Date(start);
    var n = 0;
    while (current <= end) {
      date = [new Date(current).getFullYear(), new Date(current).getMonth() + 1, new Date(current).getDate()].join('-');
      if(acc[date] == undefined) acc[date] = {totalcount:0}
      acc[date].totalcount++;
      acc[date][""event"" + ++n] = 1;
      var newDate = current.setDate(current.getDate() + 1);
      current = new Date(newDate);
    }
    return acc
  }, {});
  
console.log(detailsRes)",1
65137902,"<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<div class=""fold comment-reply-container"">
  <p class=""fold_p toggle-reply"">Fold it</p>
  <div class=""comment-reply col-sm-14"">
      Some content 1
  </div>
</div>
<div class=""fold comment-reply-container"">
  <p class=""fold_p toggle-reply"">Fold it</p>
  <div class=""comment-reply col-sm-14"">
      Some content 2
  </div>
</div>
<div class=""fold comment-reply-container"">
  <p class=""fold_p toggle-reply"">Fold it</p>
  <div class=""comment-reply col-sm-14"">
      Some content 3
  </div>
</div>",1
65113539,"[
    undefined, /* sparse */
    [
        1,
        4
    ],
    undefined, /* sparse */
    [
        2,
        3
    ]
]

function adjustPreference(preference) {
    let temp = [],
        t = 1;
    
    for (let i = 1; i < 5; i++) {
        (temp[preference[i]] = temp[preference[i]] || []).push(i);
    }
    
    temp.forEach(persons => {
        while (persons.length) {
            const random = persons.splice(Math.floor(Math.random() * persons.length), 1)[0];
            preference[random] = t++;
        }
    });
    
    return preference;
}

console.log(adjustPreference({ 1: 1, 2: 3, 3: 3, 4: 1 }));",1
65163449,"function alternateColors() {
  const ss=SpreadsheetApp.getActive();
  const sh=ss.getActiveSheet();
  const sr=2;
  const rg=sh.getRange(sr,1,sh.getLastRow()-sr+1,sh.getLastColumn());
  let cA=rg.getBackgrounds();
  cA.forEach(function(r,i){
    r.forEach(function(c,j){
      if(i%2==1) {
        cA[i][j]='#d9d9d9';
      }else{
        cA[i][j]='#ffffff';
      }
    });
  });
  rg.setBackgrounds(cA); 
}
",1
65133882,"    deleteUser = document.getElementById(""deleteBtn"")
    
    
    deleteUser.addEventListener('click', function() {
            let allUsers;
            const xhr = new XMLHttpRequest();
            xhr.responseType = ""json""
        
            xhr.addEventListener(""readystatechange"", function() {
            if(this.readyState === 4) {
                allUsers = this.response;
          
                
              let currentUser = JSON.parse(localStorage.getItem(""currentUser""))
    
                allUsers = allUsers.filter(allUser => allUser.username !== currentUser.username);
    
            } });
                           
    
            xhr.open(""DELETE"", ""http://localhost:2500/deleteProfile"", true);
                
            xhr.setRequestHeader(""Content-Type"", ""application/json"");
                
          
            xhr.send(JSON.stringify(allUser));
        })

",1
65111017,"getDocument(requestId: string, documentId: DocumentID, requestService: IRequestService): Promise<GetDocumentResult> {
  if (this.storageKey in sessionStorage) {
    const documentsMap: Map<DocumentID, GetDocumentResult> = new Map(JSON.parse(sessionStorage.getItem(this.storageKey)!));
    const document = documentsMap.get(documentId);
    if (document !== undefined) {
      return Promise.resolve(document);
    }
  }

  return requestService.getDocument(requestId, documentId).then(value => {
    this.setDocument(documentId, value);
    return value;
//  ^^^^^^^^^^^^
  });
}
",1
65149333,"try {
  for (const val of response.data['users']) {
    console.log(""ENTER"");
    var url = 'getDetailUser' + val[""id""];
    var res = await call(url); 
    console.log(""EXIT"")
  }
} catch (error) {
  console.log(error)
}
",1
65097120,"function generateTextFile(textareaElement, filenameWithoutExtension) {
    var textToWrite = textareaElement.val();
    var textFileAsBlob = new Blob([textToWrite], {type:'text/csv'});
    var fileNameToSaveAs = filenameWithoutExtension + "".csv"";

    var downloadLink = document.createElement(""a"");
    downloadLink.download = fileNameToSaveAs;
    downloadLink.innerHTML = ""Download File"";
    if (window.webkitURL != null) {
        // Chrome allows the link to be clicked
        // without actually adding it to the DOM.
        downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
    }
    else {
        // Firefox requires the link to be added to the DOM
        // before it can be clicked.
        downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
        downloadLink.onclick = destroyClickedElement;
        downloadLink.style.display = ""none"";
        document.body.appendChild(downloadLink);
    }

    downloadLink.click();
}
",1
65131363,"import React, { useState } from ""react"";

export default function App() {
  const data = [""q"", ""c"", ""s"", ""a""];

  const [iterator, setIterator] = useState(0);
  const [curr, setCurr] = useState(data[iterator]);

  const fetchNext = () => {
    if (iterator === data.length - 1) {
      return;
    }
    setIterator((prev) => prev + 1);
    setCurr(data[iterator + 1]);
  };

  const fetchPrevious = () => {
    if (iterator === 0) {
      return;
    }
    setIterator((prev) => prev - 1);
    setCurr(data[iterator - 1]);
  };

  const nextDisabled = iterator >= data.length - 1;
  const prevDisabled = iterator <= 0;

  return (
    <div>
      <h1>{curr}</h1>
      <button disabled={nextDisabled} onClick={fetchNext}>
        next
      </button>
      <button disabled={prevDisabled} onClick={fetchPrevious}>
        previous
      </button>
    </div>
  );
}
",1
65086343,"let btn_click = false;

document.getElementById(""btn"").onclick = function() {
  btn_click = true;
}

function func1(event) {
  alert(""DIV 1"");
  if (document.getElementById(""check"").checked || btn_click == true) {
    event.stopPropagation();
  }
}

function func2() {
  alert(""DIV 2"");
}",1
65150385,"@media screen and (max-width: 800px) {

...
table.vypis tr {
    border-bottom: 3px solid #ddd;
    display: block;
    margin-bottom: .625em;
}
...

}
",1
65088912,"// Start class CreateTurnQueue
initQueue(list = {}) {
   
   const newMap = new Map();
   
   // Both Object and Map has entries method although the order is different
   const iterator = list.entries();
   
   for(const item of iterator) {
      const [point, creature] = item;
      newMap.set(point, creature);
      this.creatureArray.push(creature);
   }
   this.creatureMap = newMap;
   
}
// End class CreateTurnQueue
",1
65096357,"type User {
  id: ID!
  phoneNumber: String!
}

type Query {
  user(id: String!): User!
}

type UpdateUserPayload {
  user: User!
}

type Mutation {
  updateUser(id: String!, phoneNumber: String!): UpdateUserPayload!
}

import { gql, useQuery } from '@apollo/client';

const USER_QUERY = gql`
  query GetUser($id: String!) {
    user(id: $id) {
      __typename
      id
      phoneNumber
    }
  }
`;

const UserComponent = ({ userId }) => {
  const { loading, error, data } = useQuery(USER_QUERY, {
    variables: { id: userId },
  });

  if (loading) return null;
  if (error) return `Error! ${error}`;

  return <div>{data.user.phoneNumber}</div>;
}

// schema.js
export const typeDefs = gql`
  type DataToKeep {
    # anything here
  }

  extend type Query {
    dataToKeep: DataToKeep # probably nullable?
  }
`;

// cache.js
export const dataToKeepVar = makeVar(null);

export const cache = new InMemoryCache({
  typePolicies: {
    Query: {
      fields: {
        dataToKeep: {
          read() {
            return dataToKeepVar();
          } 
        },
      }
    }
  }
});

import { gql, useQuery } from '@apollo/client';

const DATA_QUERY = gql`
  query dataToKeep {
    dataToKeep @client {
      # anything here
    }
  }
`;

const AnyComponent = ({ userId }) => {
  const { loading, error, data } = useQuery(DATA_QUERY);

  if (loading) return null;
  if (error) return `Error! ${error}`;

  return <div>{JSON.stringify(data.dataToKeep)}</div>;
}
",1
65156880,"jQuery(function($){
    
    $('.plus').on('click', function(e) {
        var val = parseInt($(this).prev('input').val());
        $(this).prev('input').val(val + 1).change();
    });
    
    $('.minus').on('click', function(e) {
        var val = parseInt($(this).next('input').val());
        if (val !== 0) {
            $(this).next('input').val(val - 1).change();
        }
    });
    
    $('.add-links').on('change', '.qty', function(event) {
        
        $(this).parents('.add-links').find('a.ajax_add_to_cart').attr('data-quantity',  + $(this).val());
    });
    
    $('.qty').change();
    
});
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<div class=""add-links clearfix"">
    <div class=""quantity buttons_added"">
        <button type=""button"" value=""-"" class=""minus"">-</button>
        <input type=""number"" class=""input-text qty text"" step=""1"" min=""1"" max="""" name=""quantity"" value=""1"" size=""4"" inputmode=""numeric"">
        <button type=""button"" value=""+"" class=""plus"">+</button>
    </div>
    <a href=""#"" data-quantity=""1"" class=""button product_type_simple add_to_cart_button ajax_add_to_cart"">Add to cart</a>
</div>

<div class=""add-links clearfix"">
    <div class=""quantity buttons_added"">
        <button type=""button"" value=""-"" class=""minus"">-</button>
        <input type=""number"" class=""input-text qty text"" step=""1"" min=""1"" max="""" name=""quantity"" value=""1"" size=""4"" inputmode=""numeric"">
        <button type=""button"" value=""+"" class=""plus"">+</button>
    </div>
    <a href=""#"" data-quantity=""1"" class=""button product_type_simple add_to_cart_button ajax_add_to_cart"">Add to cart</a>
</div>

<div class=""add-links clearfix"">
    <div class=""quantity buttons_added"">
        <button type=""button"" value=""-"" class=""minus"">-</button>
        <input type=""number"" class=""input-text qty text"" step=""1"" min=""1"" max="""" name=""quantity"" value=""1"" size=""4"" inputmode=""numeric"">
        <button type=""button"" value=""+"" class=""plus"">+</button>
    </div>
    <a href=""#"" data-quantity=""1"" class=""button product_type_simple add_to_cart_button ajax_add_to_cart"">Add to cart</a>
</div>",1
65084864,"function abaTranslate(sentence) {
  const vowels = 'AEIOUaeiou';
  var newStr = """";

  for (var i = 0; i < sentence.length; i++) {
    var currentCharacter = sentence[i];
    if (vowels.includes(currentCharacter)) { // the current character is a vowel
      newStr += currentCharacter + ""b"" + currentCharacter;
    } else {
      newStr += currentCharacter; // just add the character if it is not a vowel
    }
  }
  return newStr;
}

console.log(abaTranslate(""Cats and dogs"")); // returns ""Cabats aband dobogs""",1
65121817,"$(""#picker1"").colorPick({
            'initialColor': '#8e44ad',
            'palette': [""#1abc9c"", ""#16a085"", ""#2ecc71"", ""#27ae60"", ""#3498db"", ""#2980b9"", ""#9b59b6"", ""#8e44ad"", ""#34495e"", ""#2c3e50"", ""#f1c40f"", ""#f39c12"", ""#e67e22"", ""#d35400"", ""#e74c3c"", ""#c0392b"", ""#ecf0f1""],
            'onColorSelected': function () {
                console.log(""The user has selected the color: "" + this.color)
                this.element.css({ 'backgroundColor': this.color, 'color': this.color });
                $(""#UsColor"").val(this.color);
                return this.color;
            }
        });

$(""#picker1"").colorPick({
            'initialColor': '#8e44ad',
            'palette': [""#1abc9c"", ""#16a085"", ""#2ecc71"", ""#27ae60"", ""#3498db"", ""#2980b9"", ""#9b59b6"", ""#8e44ad"", ""#34495e"", ""#2c3e50"", ""#f1c40f"", ""#f39c12"", ""#e67e22"", ""#d35400"", ""#e74c3c"", ""#c0392b"", ""#ecf0f1""],
            'onColorSelected': function () {
                console.log(""The user has selected the color: "" + this.color)
                this.element.css({ 'backgroundColor': this.color, 'color': this.color });
               $.ajax({
                type: ""POST"",
                   url: '@Url.Action(""ChangeColor"", ""Test"")',
                   data: { ""color"": this.color }
                 }).done(function (data) {

                });
                return this.color;
            }
        });
",1
65107294,"import React from ""react"";
import { CheckboxGroup, AllCheckerCheckbox, Checkbox } from ""./Checkbox"";
import ""./styles.css"";

const App = () => {
  const [onChange, setOnChange] = React.useState({});

  return (
    <div>
      <CheckboxGroup onChange={setOnChange}>
        <label>
          <AllCheckerCheckbox />
          <span>Download the points for the full body</span>
        </label>
        <ul>
          <li>
            <label>
              <Checkbox name=""upperbody"" />
              <span>Download only the upper body points</span>
            </label>
          </li>
          <li>
            <label>
              <Checkbox name=""lowerbody"" />
              <span>Download only the lower body points</span>
            </label>
          </li>
          <li>
            <label>
              <Checkbox name=""head"" />
              <span>Download only the head points</span>
            </label>
          </li>
          <li>
            <label>
              <Checkbox name=""fullhands"" />
              <span>Download both hands points</span>
            </label>
          </li>
          <li>
            <label>
              <Checkbox name=""lefthand"" />
              <span>Download left hand points</span>
            </label>
          </li>
          <li>
            <label>
              <Checkbox name=""righthand"" />
              <span>Download right hand points</span>
            </label>
          </li>
        </ul>
      </CheckboxGroup>
      <div>
        <h1>Values</h1>
        <pre>{JSON.stringify(onChange, null, 2)}</pre>
      </div>
    </div>
  );
};

export default App;
",1
65149405,"let array = [{
    id : 1,
    name : 'Jerry',
    date : '2020 - 07 - 17',
    subject : 'Math'
  },
  {
    id : 2,
    name : 'Tom',
    date : '2015 - 07 - 17',
    subject : 'Science'
  },
  {
    id : 3,
    name : 'Lily',
    date : '2018 - 07 - 17',
    subject : 'Biology'
  }
];
const today = new Date;
if(array.every(({date})=>new Date(date.replace(/\s+/g, '')) > today)){
  console.log('valid');
} else {
  console.log('invalid');
}",1
65140995,"  beforeEach(() => {
    commit = sinon.spy();
    // Note: add users_response here.
    sinon.stub(api.users, ""list"").resolves(users_response);
  });

  // Use async here.
  it(""should list users"", async () => {
    // Use await here.
    await users.actions.list({ commit }, { page, itemsPerPage });
    expect(commit).to.have.been.calledWith(""UNSET_ERROR"");
    // Note: expect with property data, because called with: users.data.
    expect(commit).to.have.been.calledWith(""GET_PAGINATED"", users_response.data);
  });
",1
65153194,"document.getElementById(""div"").addEventListener(""mousemove"", function() {
  myFunction(event);
});

var mouse;
var cursor = document.getElementById(""cursor"");
function myFunction(e) {
  mouseX = e.clientX;
  mouseY = e.clientY;
  cursor.style.left = (mouseX - 55) + ""px"";
  cursor.style.top = (mouseY - 55) + ""px"";


}
body {
  background: #FFFDFA;
}

#cursor {
  height: 100px;
  width: 100px;
  position: absolute;
  backface-visibility: hidden;
  z-index: 9999999;
  pointer-events: none; /* pointer-events: none is needed */
  cursor: none;
}

div {
  background: black;
  width: 200px;
  height: 100px;
  margin: 30px;
  cursor: none;
}
document.getElementById(""div"").addEventListener(""mousemove"", function() {
  myFunction(event);
});

var mouse;
var cursor = document.getElementById(""cursor"");
function myFunction(e) {
  mouseX = e.clientX;
  mouseY = e.clientY;
  cursor.style.left = (mouseX - 55) + ""px"";
  cursor.style.top = (mouseY - 55) + ""px"";
}
body {
  background: #FFFDFA;
}

#cursor {
  height: 100px;
  width: 100px;
  position: absolute;
  backface-visibility: hidden;
  z-index: 9999999;
  pointer-events: none; /* pointer-events: none is needed */
  cursor: none;
}

div {
  background: black;
  width: 200px;
  height: 100px;
  margin: 30px;
  cursor: none;
}",1
65126073,"data() {
  return {
    newContract: {
      payment_term_days: """"
    }
  }
},
computed: {
  payment_term_pct() {
    const daysToPct = {
      30: 4,
      60: 1.5
    }
    return daysToPct[this.newContract.payment_term_days];
  }
}
",1
65157453,"$(document).ready(function() {
        /*Look here*/

        $('.pour')
            .css({
                height: '360px'
            })
            .delay(0)
            .slideUp(500);

        $('#liquid')
            .css({
                height: '170px'
            });

        $('.beer-foam')
            .css({
                bottom: '200px'
            });
       
    });
body { background-color: #0065bd }
    
    h2 {
        margin: 0 auto;
        width: 400px;
        font-size: 36px;
        text-align: center;
        font-family: 'Lato', Arial, sans-serif;
        color: whiteSmoke;
    }
    
    #container {
        height: 370px;
        margin: 0 auto;
        overflow: hidden;
        position: relative;
        top: -20px;
        width: 248px;
    }
    
    #container div { position: absolute; }
    
    .pour {
        position: absolute;
        left: 45%;
        width: 20px;
        height: 0px;
        background-color: #0065bd;
        border-radius: 10px
    }
    
    #beaker {
        border: 10px solid #FFF;
        border-top: 0;
        border-radius: 0 0 30px 30px;
        height: 200px;
        left: 14px;
        bottom: 0;
        width: 200px;
    }
    
    #beaker:before,
    #beaker:after {
        border: 00px solid #FFF;
        border-bottom: 0;
        border-radius: 30px 30px 0 0;
        content: '';
        height: 30px;
        position: absolute;
        top: -40px;
        width: 30px;
    }
    
    #beaker:before { left: -50px; }
    #beaker:after { right: -50px; }
    
    #liquid {
        background-color: #0065bd;
        border: 10px solid #0065bd;
        border-radius: 0 0 20px 20px;
        bottom: 0;
        height: 0px;
        overflow: hidden;
        width: 180px;
    }
    
    #liquid:after {
        background-color: rgba(255, 255, 255, 0.25);
        bottom: -10px;
        content: '';
        height: 200px;
        left: -40px;
        position: absolute;
        transform: rotate(30deg);
        -webkit-transform: rotate(15deg);
        width: 110px;
    }
    
    #liquid .bubble {
        -webkit-animation-name: bubble;
        -webkit-animation-iteration-count: infinite;
        -webkit-animation-timing-function: linear;
        background-color: rgba(255, 255, 255, 0.2);
        bottom: 0;
        border-radius: 10px;
        height: 20px;
        width: 20px;
    }
    
    @-webkit-keyframes bubble {
        0% { bottom: 0; }
        
        50% {
            background-color: rgba(255, 255, 255, 0.2);
            bottom: 80px;
        }
        
        100% {
            background-color: rgba(255, 255, 255, 0);
            bottom: 160px;
        }
    }
    
    .bubble1 {
        left: 10px;
        -webkit-animation-delay: 1000ms;
        -webkit-animation-duration: 1000ms;
    }
    
    .bubble2 {
        left: 50px;
        -webkit-animation-delay: 700ms;
        -webkit-animation-duration: 1100ms;
    }
    
    .bubble3 {
        left: 100px;
        -webkit-animation-delay: 1200ms;
        -webkit-animation-duration: 1300ms;
    }
    
    .bubble4 {
        left: 130px;
        -webkit-animation-delay: 1100ms;
        -webkit-animation-duration: 700ms;
    }
    
    .bubble5 {
        left: 170px;
        -webkit-animation-delay: 1300ms;
        -webkit-animation-duration: 800ms;
    }
    
    /* Foam */
    
    .beer-foam {
        position: absolute;
        bottom: 10px;
    }
    
    .foam-1, .foam-2, .foam-3, .foam-4,
    .foam-5, .foam-6, .foam-7 {
        float: left;
        position: absolute;
        z-index: 999;
        width: 50px;
        height: 50px;
        border-radius: 30px;
        background-color: #fefefe;
    }
    .foam-1 {
        top: -30px;
        left: -10px;
    }
    .foam-2 {
        top: -35px;
        left: 20px;
    }
    .foam-3 {
        top: -25px;
        left: 50px;
    }
    .foam-4 {
        top: -35px;
        left: 80px;
    }
    .foam-5 {
        top: -30px;
        left: 110px;
    }
    .foam-6 {
        top: -20px;
        left: 140px;
    }
    .foam-7 {
        top: -30px;
        left: 160px;
    }
    
    /* Drunk Text */
    
    @-moz-keyframes drunk {
        0% {
            -moz-transform: rotate(0);
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        20%, 60% {
            -moz-transform: rotate(80deg);
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        40% {
            -moz-transform: rotate(60deg);
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        80% {
            -moz-transform: rotate(60deg) translateY(0); opacity: 1;
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        100% {
            -moz-transform: translateY(700px);
            opacity: 0;
        }
    }
    
    @keyframes drunk {
        0% {
            transform: rotate(0);
            transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        
        20%, 60% {
            transform: rotate(80deg);
            transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        
        40% {
            transform: rotate(60deg);
            transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        
        80% {
            transform: rotate(60deg) translateY(0);
            opacity: 1; transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        100% {
            tran
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<div id=""container"">
    <div class=""pour""></div>
    <div id=""beaker"">
        <div class=""beer-foam"">
            <div class=""foam-1""></div>
            <div class=""foam-2""></div>
            <div class=""foam-3""></div>
            <div class=""foam-4""></div>
            <div class=""foam-5""></div>
            <div class=""foam-6""></div>
            <div class=""foam-7""></div>
        </div>
        
        <div id=""liquid"">
            
            <div class=""bubble bubble1""></div>
            <div class=""bubble bubble2""></div>
            <div class=""bubble bubble3""></div>
            <div class=""bubble bubble4""></div>
            <div class=""bubble bubble5""></div>
        </div>
    </div>
</div>

<h2 class=""animated drunk"">Please Wait! While you are entered in Game</h2>
$(document).ready(function() {
        /*Look here*/

        setTimeout( () => {
            $('.bubble').css(""animation-play-state"", ""paused"");
        }, 5700)

        $('.pour')
            .delay(2000)
            .animate({
                height: '360px'
            }, 1500)
            .delay(1600)
            .slideUp(500);

        $('#liquid')
            .delay(3400)
            .animate({
                height: '170px'
            }, 2500);

        $('.beer-foam')
            .delay(3400)
            .animate({
                bottom: '200px'
            }, 2500);
       
    });
body { background-color: #0065bd }
    
    h2 {
        margin: 0 auto;
        width: 400px;
        font-size: 36px;
        text-align: center;
        font-family: 'Lato', Arial, sans-serif;
        color: whiteSmoke;
    }
    
    #container {
        height: 370px;
        margin: 0 auto;
        overflow: hidden;
        position: relative;
        top: -20px;
        width: 248px;
    }
    
    #container div { position: absolute; }
    
    .pour {
        position: absolute;
        left: 45%;
        width: 20px;
        height: 0px;
        background-color: #0065bd;
        border-radius: 10px
    }
    
    #beaker {
        border: 10px solid #FFF;
        border-top: 0;
        border-radius: 0 0 30px 30px;
        height: 200px;
        left: 14px;
        bottom: 0;
        width: 200px;
    }
    
    #beaker:before,
    #beaker:after {
        border: 00px solid #FFF;
        border-bottom: 0;
        border-radius: 30px 30px 0 0;
        content: '';
        height: 30px;
        position: absolute;
        top: -40px;
        width: 30px;
    }
    
    #beaker:before { left: -50px; }
    #beaker:after { right: -50px; }
    
    #liquid {
        background-color: #0065bd;
        border: 10px solid #0065bd;
        border-radius: 0 0 20px 20px;
        bottom: 0;
        height: 0px;
        overflow: hidden;
        width: 180px;
    }
    
    #liquid:after {
        background-color: rgba(255, 255, 255, 0.25);
        bottom: -10px;
        content: '';
        height: 200px;
        left: -40px;
        position: absolute;
        transform: rotate(30deg);
        -webkit-transform: rotate(15deg);
        width: 110px;
    }
    
    #liquid .bubble {
        -webkit-animation-name: bubble;
        -webkit-animation-iteration-count: infinite;
        -webkit-animation-timing-function: linear;
        background-color: rgba(255, 255, 255, 0.2);
        bottom: 0;
        border-radius: 10px;
        height: 20px;
        width: 20px;
    }
    
    @-webkit-keyframes bubble {
        0% { bottom: 0; }
        
        50% {
            background-color: rgba(255, 255, 255, 0.2);
            bottom: 80px;
        }
        
        100% {
            background-color: rgba(255, 255, 255, 0);
            bottom: 160px;
        }
    }
    
    .bubble1 {
        left: 10px;
        -webkit-animation-delay: 1000ms;
        -webkit-animation-duration: 1000ms;
    }
    
    .bubble2 {
        left: 50px;
        -webkit-animation-delay: 700ms;
        -webkit-animation-duration: 1100ms;
    }
    
    .bubble3 {
        left: 100px;
        -webkit-animation-delay: 1200ms;
        -webkit-animation-duration: 1300ms;
    }
    
    .bubble4 {
        left: 130px;
        -webkit-animation-delay: 1100ms;
        -webkit-animation-duration: 700ms;
    }
    
    .bubble5 {
        left: 170px;
        -webkit-animation-delay: 1300ms;
        -webkit-animation-duration: 800ms;
    }
    
    /* Foam */
    
    .beer-foam {
        position: absolute;
        bottom: 10px;
    }
    
    .foam-1, .foam-2, .foam-3, .foam-4,
    .foam-5, .foam-6, .foam-7 {
        float: left;
        position: absolute;
        z-index: 999;
        width: 50px;
        height: 50px;
        border-radius: 30px;
        background-color: #fefefe;
    }
    .foam-1 {
        top: -30px;
        left: -10px;
    }
    .foam-2 {
        top: -35px;
        left: 20px;
    }
    .foam-3 {
        top: -25px;
        left: 50px;
    }
    .foam-4 {
        top: -35px;
        left: 80px;
    }
    .foam-5 {
        top: -30px;
        left: 110px;
    }
    .foam-6 {
        top: -20px;
        left: 140px;
    }
    .foam-7 {
        top: -30px;
        left: 160px;
    }
    
    /* Drunk Text */
    
    @-moz-keyframes drunk {
        0% {
            -moz-transform: rotate(0);
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        20%, 60% {
            -moz-transform: rotate(80deg);
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        40% {
            -moz-transform: rotate(60deg);
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        80% {
            -moz-transform: rotate(60deg) translateY(0); opacity: 1;
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        100% {
            -moz-transform: translateY(700px);
            opacity: 0;
        }
    }
    
    @keyframes drunk {
        0% {
            transform: rotate(0);
            transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        
        20%, 60% {
            transform: rotate(80deg);
            transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        
        40% {
            transform: rotate(60deg);
            transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        
        80% {
            transform: rotate(60deg) translateY(0);
            opacity: 1; transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        100% {
            tran
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<div id=""container"">
    <div class=""pour""></div>
    <div id=""beaker"">
        <div class=""beer-foam"">
            <div class=""foam-1""></div>
            <div class=""foam-2""></div>
            <div class=""foam-3""></div>
            <div class=""foam-4""></div>
            <div class=""foam-5""></div>
            <div class=""foam-6""></div>
            <div class=""foam-7""></div>
        </div>
        
        <div id=""liquid"">
            
            <div class=""bubble bubble1""></div>
            <div class=""bubble bubble2""></div>
            <div class=""bubble bubble3""></div>
            <div class=""bubble bubble4""></div>
            <div class=""bubble bubble5""></div>
        </div>
    </div>
</div>

<h2 class=""animated drunk"">Please Wait! While you are entered in Game</h2>
 #liquid .bubble {
        visibility: hidden;  /*Look here*/
        -webkit-animation-name: bubble;
        -webkit-animation-iteration-count: 3;   /*Look here*/
        -webkit-animation-timing-function: linear;
        background-color: rgba(255, 255, 255, 0.2);
        bottom: 0;
        border-radius: 10px;
        height: 20px;
        width: 20px;
    }
    
    @-webkit-keyframes bubble {
        0% { visibility: visible;  /*Look here*/
             bottom: 0; }
        
        50% {
            background-color: rgba(255, 255, 255, 0.2);
            bottom: 80px;
        }
        
        100% {
            background-color: rgba(255, 255, 255, 0);
            bottom: 160px;
        }
    }
",1
65101663,"function validateSortCode(executionContext) {
    
    var formContext = executionContext.getFormContext();
    
    var sortcode = formContext.getAttribute(""sortcodee"").getValue();
    
    var errorId = ""error"";
    
    if(sortcode != """")
    
    {
        var sortcoderegex = /^(\d){2}-(\d){2}-(\d){2}$/;
        if(sortcoderegex.test(sortcode) == false)
        {
            formContext.ui.setFormNotification(""Please ensure correct format of Sort Code i.e. 12-34-56"", ""ERROR"", errorId);

formContext.getAttribute(""sortcodee"").setValue("""");

        }
        else
        {

formContext.ui.clearFormNotification(errorId);

        }
   }
}
",1
65094672,"function rollDieAsync() {
  return getPseudoRandomInt()
    .then(random => {
      var dieVal = (random % 6) + 1
      var reroll = random > 251
      if(reroll){
        return rollDieAsync()
      }else{
        return dieVal
      }
   })
}
",1
65114495,"<a href=""#"" onclick=""scrollIntoWarranty(); return false;"">
  Go to warranty
</a>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<div id=""tr_tab_2"">Warranty</div>",1
65125518,"var question = 0;

//var  questions = [
//    ""The color of the sky is...?"",
//    ""Paper comes from...?"",
//    ""How many hours in a day?""
//  ];
var questions = Array.from(document.getElementsByClassName(""quiz"")).reduce((carry, item) => {
  carry.push(item.textContent.trim())
  return carry;
}, []);

var anim;
var targets;

function prepQuestion() {
  $(""#questions"").text(questions[question]);

  var textWrappers = document.querySelectorAll('#questions');
  textWrappers.forEach(textWrapper => {
    textWrapper.innerHTML = textWrapper.textContent.replace(/(\S*)/g, m => {
      return `<span class=""word"">` +
        m.replace(/(-|)?\S(-|@)?/g, ""<span class='letter'>$&</span>"") +
        `</span>`;
    });
  });

  targets = Array.from(document.querySelectorAll('#questions .letter'));

  anim = anime.timeline()
    .add({
      targets: targets,
      scale: [3, 1],
      scaleY: [1.5, 1],
      opacity: [0, 1],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 400,
      delay: (el, i) => 60 * i
    });
}

// init
prepQuestion();

function next() {
  anim = anime.timeline()
    .add({
      targets: targets.reverse(),
      scale: [1, 3],
      scaleY: [1, 1.5],
      opacity: [1, 0],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 100,
      delay: (el, i) => 30 * i
    });

  anim.complete = () => {
    if (question == questions.length - 1) {
      question = 0;
    } // reset question
    else {
      question++;
    }

    prepQuestion();
  };
}
#questions {
  font-weight: 900;
  font-size: 2.5em;
  font-family: rr;
}

#questions .letter {
  display: inline-block;
  line-height: 1em;
}

.word {
  white-space: nowrap;
}
<script src=""https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.0/anime.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>

<div class=""quiz"">The color of the sky is...?</div>
<div class=""quiz"">Paper comes from...?</div>
<div class=""quiz"">How many hours in a day?</div>
<div class=""quiz"">A Giraffe is a fish?</div>

<div id=""questions""></div>
<br>
<Button id=""rc"" onclick=""next()"">Next</Button>",1
65110118,"solve(puzzleString) {
    var board = this.boardParser(puzzleString)
    var emptySpot = this.getDot(board);
    var row = emptySpot[0];
    var column = emptySpot[1];

    // full board condition
    if (this.solved(board)) {
      return puzzleString;
    }

    for (var i = 1; i <= 9; i++) {
      if (this.checkvalue(board, row, column, i)) {
        board[row][column] = i;
        var boardString = this.stringifyBoard(board);
        var result = this.solve(boardString);
        if(result !== false){
            return result;
        }
      }
    }

    // if board is unsolvable return false
    return false;
  }
",1
65097941,"import React, { useEffect, useState } from ""react"";
import {
  ActivityIndicator,
  FlatList,
  StyleSheet,
  View,
  Text,
  Button,
} from ""react-native"";

import { Colors } from ""react-native/Libraries/NewAppScreen"";

const App: () => React$Node = () => {
  const [isLoading, setLoading] = useState(true);
  const [data, setData] = useState([]);
  const [refetch, setRefetch] = useState(false);

  useEffect(() => {
    fetch(""https://exampleapi.dev/"")
      .then((response) => response.json())
      .then((json) => setData(json))
      .catch((error) => console.error(error))
      .finally(() => setLoading(false));
  }, [refetch]);

  return (
    <>
      <View style={styles.container}>
        {isLoading ? (
          <ActivityIndicator />
        ) : (
          <FlatList
            data={data}
            keyExtractor={({ id }, index) => id}
            renderItem={({ item }) => (
              <Text style={styles.content}>{item.content}</Text>
            )}
          />
        )}
      </View>
      <View style={styles.buttonBottom}>
        <Button
          title="" Refresh""
          onPress={() => setRefetch(!refetch)}
          style={styles.buttonShare}
          color=""#66BB6A""
        />
      </View>
    </>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: ""space-between"",
    backgroundColor: ""#1b262c"",
    padding: 30,
    flexDirection: ""row"",
    alignItems: ""center"",
  },
  FlatList: {
    backgroundColor: Colors.aquamarine,
  },
  content: {
    fontSize: 22,
    textAlign: ""left"",
    color: ""#bbe1fa"",
  },
  buttonBottom: {
    fontSize: 22,
    padding: 10,
    backgroundColor: ""#1b262c"",
  },
});

export default App;
",1
65127483,"function exportHTML(){    
    // Add inputs values to the document before it rendered:
    var inputs = document.querySelectorAll('input');
    for (var i=0; i < inputs.length; i++) {
        let ps = document.createElement('p');
        document.getElementById(""source-html"").appendChild(ps)
        ps.textContent = inputs[i].value;
    }

    // continue with your code
   var header = ""<html xmlns:o='urn:schemas-microsoft-com:office:office' ""+
        ""xmlns:w='urn:schemas-microsoft-com:office:word' ""+
        ""xmlns='http://www.w3.org/TR/REC-html40'>""+
        ""<head><meta charset='utf-8'><title>Export HTML to Word Document with JavaScript</title></head><body>"";
   var footer = ""</body></html>"";
   var sourceHTML = header+document.getElementById(""source-html"").innerHTML+footer;
   
   var source = 'data:application/vnd.ms-word;charset=utf-8,' + encodeURIComponent(sourceHTML);
   var fileDownload = document.createElement(""a"");
   document.body.appendChild(fileDownload);
   fileDownload.href = source;
   fileDownload.download = 'document.doc';
   fileDownload.click();
   document.body.removeChild(fileDownload);
}
<body>
<div class=""source-html-outer"">
    <div id=""source-html"">
        <h1>
            <center>Artificial Intelligence</center>
        </h1>
        <h2>Overview</h2>
        <p>
            Artificial Intelligence(AI) is an emerging technology
            demonstrating machine intelligence. The sub studies like <u><i>Neural
                    Networks</i>, <i>Robatics</i> or <i>Machine Learning</i></u>
            are the parts of AI. This technology is expected to be a
            prime part of the real world in all levels.
        </p>        
        
    </div>
    <div class=""content-footer"">
        <!-- move this form the div you convert to DOC-->
        <input type=""text"" value=""123456"" />
        <input type=""text"" value=""123456"" style=""margin-left: 150px;""/>
        <button id=""btn-export"" onclick=""exportHTML();"">Export to word
            doc</button>
    </div>
</div>",1
65135117,":root {
    --my-start-width: 0;
    --my-end-width: 280px;
}

...

@keyframes progressBar {
    0% { width: var(--my-start-width); }
    100% { width: var(--my-end-width); }
}


//set property: 

document.documentElement.style
    .setProperty('--my-variable-name', '100px');

//get property

getComputedStyle(document.documentElement)
    .getPropertyValue('--my-variable-name'); // returns value

",1
65084542,"<table id=""showdata"">
    <tr>
        <th>Room1</th>
        <th>Room2</th>
        <th>Room3</th>
    </tr>
    <tr>
        <td v-for=""(x, key) in ['Room1', 'Room2', 'Room3']"" :key=""key"" >
            <table>
                <tr v-for=""(detail, key) in roomDetail.filter(({ room }) => room === x)"" :key=""key"" >
                    <td>{{ detail.time }}</td>
                    <td>{{ detail.name }}</td>
                    <td>{{ detail.status }}</td>
                    <td>{{ detail.room }}</td>
                </tr>
            </table>
        </td>
    </tr>
</table>
",1
65084546,"   const [captures, setCaptures] = useState([]);
   const [flashMode, setFlashMode] = useState(Camera.Constants.FlashMode.off);
   const [capturing, setCapturing] = useState(false);
   const [cameraType, setCameraType] = useState(Camera.Constants.Type.back);

    const setFlashModehandler = (flashMode) => setFlashMode(flashMode);
    const setCameraTypeHandler = (cameraType) => setCameraType(cameraType);
    const handleCaptureInHandler = () => setCapturing(true);

    const handleCaptureOut = () => {
        if (capturing)
            camera.stopRecording();
    };

    const handleShortCapture = async () => {
        const photoData = await camera.takePictureAsync();
        setCapturing(false);
        setCaptures([...captures, photoData]);
    };
    
    const handleLongCapture = async () => {
        setTimeout(() => capturing && camera.stopRecording(), 20*1000);
        const videoData = await camera.recordAsync();
        setCapturing(false);
        setCaptures([...captures, videoData]);
",1
65144294,"async function opacityToggle(layerName, opacity) { /*
^^^^^ */
    if (!layerName) return;

    var s = 0;
    while (s < 1) {
//  ^^^^^
        s += 0.01
        s = +s.toFixed(2)
        console.log('s', layerName, s, opacity);
        map.setPaintProperty(layerName, 'fill-opacity', s);

        await new Promise(resolve => {
//      ^^^^^
            requestAnimationFrame(resolve);
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        });
    }
}

function opacityToggle(layerName, opacity) {
    if (!layerName) return Promise.resolve();

    var s = 0;
    return animate();

    function animate() {
        if (s < 1) {
            s += 0.01
            s = +s.toFixed(2)
            console.log('s', layerName, s, opacity);
            map.setPaintProperty(layerName, 'fill-opacity', s);
            return new Promise(resolve => {
//          ^^^^^^
                requestAnimationFrame(resolve);
            }).then(animate);
//            ^^^^^^^^^^^^^^
        } else {
            return Promise.resolve();
        }
    }
}
",1
65108189,"hot2.addHook( 'afterChange', function( changes, src ) {
  [
    [row, prop, oldVal, newVal] 
  ] = changes;
  if ( prop == 0 && hot2.getDataAtRowProp( row, prop + 1 ) && newVal?.length > 0 ) {
    // delete value of cell 2 if cell 1 has a value
    hot2.setDataAtCell( row, prop + 1, '' );
  } else if ( prop == 1 && hot.getDataAtRowProp( row, prop - 1 ) && newVal?.length > 0 ) {
    // delete value of cell 1 if cell 2 has a value
    hot2.setDataAtCell( row, prop -1, '' );
  }
})


hot2.updateSettings( {
   cells: function ( row, col, prop ) {
     cellProperties = {};

     if ( prop == 1 && hot2.getDataAtRowProp( row, prop - 1 ) ) {
       // this disables cell 2 if cell 1 has a value
       cellProperties.readOnly = true;
     } else if ( prop == 0 && hot2.getDataAtRowProp( row, prop + 1 ) ) {
       // this disables cell 1 if cell 2 has a value
       cellProperties.readOnly = true;
     } else {
       cellProperties.readOnly = false;
     }
     return cellProperties;
   }
})
",1
65086506,"function addUSComma(n) {
  const display = n;
  return display.toLocaleString('en-US');
}

function addINComma(n) {
  const display = n;
  return display.toLocaleString('en-IN');
}

console.log(addUSComma(123456789));
console.log(addINComma(123456789));",1
65151636,"const users = await firebase.getAllUsers();
// users is a QuerySnapshot
if (users.size() > 0) {
    users.forEach(doc => {
        console.log(doc.data())
    })
}
else {
    // decide what you want to do if no results
}
",1
65137057,"var promise = new Promise(async function(resolve, reject) {
  // do a thing, possibly async, then…

  var it = await runSlowAsync(2500); 

  if (it) {
    resolve(""Stuff worked!"");
  }
  else {
    reject(Error(""It broke"")) 
  }
});

var promise2 = new Promise(async function(resolve, reject) {
  // do a thing, possibly async, then…

  var it = await runSlowAsync(10000);
        
  if (it) {
    resolve(""Stuff worked too!"");
  }
  else {
    reject(Error(""It broke too""));
  }
});

promise.then(() => console.log(""I am done 2.5 secs later""))
promise1.then(() => console.log(""I am done 5 secs later""))

Promise.all([promise, promise1]).then(() => console.log(""All promises resolved""))

// In your console you will see this.

// after 2.5 seconds
// ""I am done 2.5 secs later""
// another 2.5 seconds later (after 5 seconds)
// ""I am done 5 secs later""
// ""All promises resolved""
",1
65084505,"import React, {useContext} from 'react';

const NavbarContext = React.createContext({resetDisplay: () => {}});

function Navbar() {
    function resetDisplay() {
        // do stuff in here
    }

    return (
        <NavbarContext.Provider value={{resetDisplay}}>
            <ButtonGroup />
        </NavbarContext.Provider>
    );
}


function ButtonGroup() {
    return (
        <div>
            <ResetButton />
        </div>
    );
}

function ResetButton() {
    const {resetDisplay} = useContext(NavbarContext);

    return <Button onClick={() => resetDisplay()} >Reset</Button>;
}

",1
65164069,"window.onload = async (e) => {
    e.preventDefault();
    setSpinner(false);
    console.log('hello');
    const authResult = await session.signIn(email, password);
    setSpinner(true);
    console.log(session);
    authResult ? setStatus(authResult) : history.push('/dashboard');

}
",1
65120441,"import React, { useState } from 'react'
import { graphql } from 'gatsby'

 const YourPage = ({data}) => {
   console.log('data is', data)
   const [filters, setFilters] = useState({
    type: """",
    category: """"
  });

//your calculations

  return (
    <div>
      Your stuff 
    </div>
  )
}

export const query = graphql`
  query yourQueryName{
      allStrapiHomes {
        nodes {
          type
          category
        }
      }
  }
`

export default YourPage
",1
65089094,"<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<div>
  <select name=""selectProgram[]"" class=""js-example-basic"">
    <option value="""">Choose tour</option>
    <option value=""Tour1"">Tour 1</option>
    <option value=""Tour2"">Tour 2</option>
    <option value=""Tour3"">Tour 3</option>
  </select>
  <textarea name=""tourText[]"" class=""form-control textArea"" placeholder=""Tour description""></textarea>
</div>
<div>
  <select name=""selectProgram[]"" class=""js-example-basic"">
    <option value="""">Choose tour</option>
    <option value=""Tour1"">Tour 1</option>
    <option value=""Tour2"">Tour 2</option>
    <option value=""Tour3"">Tour 3</option>
  </select>
  <textarea name=""tourText[]"" class=""form-control textArea"" placeholder=""Tour description""></textarea>
</div>",1
65091511,"function CopyCells() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet1 = ss.getSheetByName(""sheet1""); //source sheet
  const sheet2 = ss.getSheetByName(""sheet2""); //target sheet
  const range1 = sheet1.getRange('A5:A800');
  const range2 = sheet2.getRange('C7:C802');
  const vals1 = range1.getValues().flat();
  const vals2 = range2.getValues().flat();
  const fvals = vals2.map((v,i)=>[v==''?vals1[i]:v]);
  range2.clearContent();
  range2.setValues(fvals);
}
 
function onOpen() {
  SpreadsheetApp.getUi()
  .createMenu('Button')
  .addItem('Copy Cells', 'CopyCells')
  .addToUi();
}
",1
65087883,"<input type=""number"" id=""field1"" onfocusout=""validateField(0, 100, 'field1')""/><br/><br/>
    <input type=""number"" id=""field2"" onfocusout=""validateField(200, 300, 'field2')""/><br/><br/>
    <input type=""number"" id=""field3"" onfocusout=""validateField(400, 500, 'field3')""/><br/><br/>
    <script>
        function validateField(min, max, id) {
            const value = document.getElementById(id).value;
            if (value < min || value > max) {
                document.getElementById(id).style.borderColor = ""red"";
            }
            else {
                document.getElementById(id).style.borderColor = ""lime"";
            }
        }
    </script>",1
65084430,"request1('/dividentList')
.then((res) => {
    //setState for divident
    return request2('/divisorList'); // this will return a promise to chain on
})
.then((res) => {
    setState for divisor
    return Promise.resolve('Success') // we send back a resolved promise to continue chaining
})
.then(() => {
    doCalc logic
})
.catch((err) => {
    console.log('something went wrong');
});
",1
65112848,"const UseEffectCounter1 = () => {
    const [count, setCount] = useState(0);
    useEffect(() => {
        document.title = 'You clicked 0 times';
    }, []);
    return (
        <div>
            <button onClick={() => {setCount(count + 1)}}>+1</button>
        </div>
    )
}

const UseEffectCounter1 = () => {
    const initCount = 0;
    const [count, setCount] = useState(initCount);
    useEffect(() => {
        document.title = `You clicked ${initCount} times`;
    }, [initCount]);
    return (
        <div>
            <button onClick={() => {setCount(count + 1)}}>+1</button>
        </div>
    )
}
",1
65147315,"const colors = [""#fb5050"", ""#f74f4f"", ""#f34e4e"", ""#ef4d4d"", ""#ec4b4b"", ""#e84a4a"", ""#e44949"", ""#e04848"", ""#dc4646"", ""#d94545"", ""#d54444"", ""#d14343"", ""#cd4141"", ""#c94040"", ""#c63f3f"", ""#c23e3e"", ""#be3c3c"", ""#ba3b3b"", ""#b63a3a"", ""#b23838""];

const values = [0.020565500406834823, 0.0006918573709419904, 0.03614457831325302, 0.014884840151254727, 0.9638554216867471, 0.005208333333333333, 0.0006248326341158618, 0.14285714285714285, 0.004872900466547537, 0.8571428571428577, 0, 0.2142857142857144, 0, 0.2499999999999991, 0.5000000004656613, 0.45534591194968543, 0.6349489795918367, 0.25, 0.15218156916454706, 0];

// keep track of the old index and sort by value
const valueMap = values.map((val, i) => ({oldIndex: i, value: val})).sort((a,b) => a.value - b.value);

// add the appropriate color to each element of the sorted array
valueMap.forEach((val, i) => val.color = colors[i]);
//check this console.log to verify it sorted/assigned properly
//console.log(JSON.stringify(valueMap));

// resort it by oldIndex
valueMap.sort((a,b) => a.oldIndex - b.oldIndex);

// get just the array of colors
const newColors = valueMap.map(val => val.color);
console.log(newColors);",1
65102333,"const carts = [
  {
    name: 'Voucher A',
    participants: [
      {
        date: 1
      },
      {
        date: 2
      }
    ]
  }
];

const groupedByNames = {};
for (const { name, participants } of carts) {
  if (!groupedByNames[name]) groupedByNames[name] = {};
  for (const { date } of participants) {
    groupedByNames[name][date] = (groupedByNames[name][date] || 0) + 1;
  }
}
const output = Object.entries(groupedByNames).flatMap(
  ([name, dateCounts]) => Object.entries(dateCounts).map(
    ([date, count]) => ({ name, date: Number(date), count })
  )
);
console.log(output);",1
65099055,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
</head>
<body>

    <input id=""mail"" type=""text"" name=""email"" value=""user@example.com"">
    <button id=""btn"" onclick=""abc()"">click On me</button>

    <p id='text'></p>

    <script>
        function abc() {
            var mail = document.getElementById('mail');
            var text = document.getElementById('text');
            text.innerText = mail.value;
        }
    </script>

</body>
</html>",1
65132870,"btn.addEventListener('click', () => {
    let result = randomFunc[Math.floor(Math.random() * randomFunc.length)]();
    document.querySelector('#user_input').addEventListener('input', evt => {
        if (result.toString() === evt.target.value) {
            /* correct! do something here */
        } else {
            /* not correct yet... */
        }
    });
})
",1
65131180,"// Student Constructor Object
let students = [];

function Student(id, name, surname, points) {
  this.id = id;
  this.name = name;
  this.surname = surname;
  this.points = points;
  this.DidPass = function() {
    if (this.points > 50) {
      console.log('PASS');
    } else if (this.points < 50) {
      console.log('FAILED')
    }
  }
}

// Create Student

function createStudent() {
  let studentId = document.getElementById('studentID').value;
  let studentName = document.getElementById('studentName').value;
  let studentSurname = document.getElementById('studentSurname').value;
  let studentPoints = document.getElementById('studentPoints').value;


  let newStudent = new Student(studentId, studentName, studentSurname, studentPoints);
  students.push(newStudent);


  let PassNot = true;
  for (let i = 0; i < students.length; i++) {
    PassNot = students[i].DidPass();
  }

  // Delete Btn
  let btnDelete = document.createElement('button');
  btnDelete.classList.add('btnDelete');
  btnDelete.innerHTML = 'Delete Record'
  btnDelete.onclick = function(e) {
    e.target.parentElement.parentElement.removeChild(e.target.parentElement);
    for (let j = 0; j < students.length; j++) {
      if (studentId == students[j].id) {
        students.splice(j);
        tdShowID.innerText = '';
        tdShowName.innerText = '';
        tdShowSurname.innerText = '';
        tdShowPoints.innerText = '';
        tdShowDidPass.innerText = '';
        btnDelete.style.display = 'none';
      }
    }
  }


  let tableBody = document.getElementsByTagName('tbody')[0];
  let tr = document.createElement('tr');
  let tdShowID = document.createElement('td');
  tdShowID.innerText = studentId;
  let tdShowName = document.createElement('td');
  tdShowName.innerText = studentName;
  let tdShowSurname = document.createElement('td');
  tdShowSurname.innerText = studentSurname;
  let tdShowPoints = document.createElement('td');
  tdShowPoints.innerText = studentPoints;
  let tdShowDidPass = document.createElement('td');
  tdShowDidPass.innerText = PassNot;

  tr.appendChild(tdShowID);
  tr.appendChild(tdShowName);
  tr.appendChild(tdShowSurname);
  tr.appendChild(tdShowPoints);
  tr.appendChild(tdShowDidPass);
  tr.appendChild(btnDelete);
  tableBody.appendChild(tr);

}

// Logic
function checkIfStudentExists(studentId) {
  return students.some(student => student.id === studentId);
}

// Create Student
let btnSubmit = document.getElementById('btnSubmit');
btnSubmit.onclick = function() {
  createStudent();

}
<!DOCTYPE html>
<html lang=""en"">

<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <link href='./style/style.css' rel='stylesheet'>
  <title>Student App</title>
</head>

<body>
  <div id=""container"">
    <div id=""formField"" class='flx'>
      <label for='studentID'>Student ID</label>
      <input id='studentID' name='studentID' placeholder='student ID' required>
      <label for='studentName'>Student Name</label>
      <input id='studentName' name='studentName' placeholder='student name' required>
      <label for='studentSurname'>Student Surname</label>
      <input id='studentSurname' name='studentSurname' placeholder='student surname' required>
      <label for='studentPoints'>Student Points</label>
      <input id='studentPoints' name='studentPoints' placeholder='student points' required>
      <button id='btnSubmit'>Submit</button>
    </div>
    <hr>
    <div id=""results"">
      <table id='table'>
        <th>
          <td>Student ID</td>
          <td>Student Name</td>
          <td>Student Surname</td>
          <td>Student Points</td>
          <td>Student Grade</td>
          <td>Delete Record</td>
        </th>
        <tbody>

        </tbody>
      </table>
    </div>
  </div>
  <script src='./js/app.js'></script>
</body>

</html>",1
65159472,"data() {
  return {
    config: {
      imageUploadURL: '/api/image/store',
      imageUploadParam: 'image',
      imageUploadParams: { id: '' }
    }
  }
},
watch: {
  id(value) {
    this.config.imageUploadParams.id = value;
  }
}
",1
65129583,"var slideIndex = 1;
showSlides(slideIndex);

function plusSlides(n) {
    showSlides(slideIndex += n);
}

function currentSlide(n) {
    showSlides(slideIndex = n);
}

function showSlides(n) {
    var i;
    var slides = document.getElementsByClassName(""mySlides"");
    var dots = document.getElementsByClassName(""dot"");
    if (n > slides.length) {slideIndex = 1}
    if (n < 1) {slideIndex = slides.length}
    for (i = 0; i < slides.length; i++) {
        if (slides[i].style.display == 'block') {
            slides[i].className = slides[i].className.replace(""r1"", ""r2"");
        }
    }
    for (i = 0; i < dots.length; i++) {
        dots[i].className = dots[i].className.replace("" active"", """");
    }
    if (document.querySelectorAll('.mySlides.r2').length == 0) {
        // first slide to fade....
        slides[slideIndex-1].style.display = ""block"";
    }
    dots[slideIndex-1].className += "" active"";
}

document.querySelectorAll('.mySlides').forEach(function(ele) {
    ele.addEventListener('animationend', function(e) {
        var prevEle = document.querySelector('.mySlides.r2');
        if (prevEle != null) {
            prevEle.style.display = 'none';
            prevEle.classList.remove(""r2"");
            prevEle.classList.add(""r1"");
            var slides = document.getElementsByClassName(""mySlides"");
            slides[slideIndex - 1].style.display = ""block"";
        }
    })
})
/* animation Classes start */
.r1 {
    animation: fadeInUp 1000ms both
}
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translate3d(0, 100%, 0);
    }

    to {
        opacity: 1;
        transform: translate3d(0, 0, 0);
    }
}
.r2 {
    animation: fadeOutUp 1000ms both
}
@keyframes fadeOutUp {
    from {
        opacity: 1;
    }

    to {
        opacity: 0;
        transform: translate3d(0, -100%, 0);
    }
}
/* animation Classes End */
* {box-sizing: border-box}
body {font-family: Verdana, sans-serif; margin:0}
/* Slideshow container */
.slideshow-container {
    position: relative;
    background: #f1f1f1f1;
}
/* Slides */
.mySlides {
    display: none;
    padding: 80px;
    text-align: center;
}
/* Next & previous buttons */
.prev, .next {
    cursor: pointer;
    position: absolute;
    top: 50%;
    width: auto;
    margin-top: -30px;
    padding: 16px;
    color: #888;
    font-weight: bold;
    font-size: 20px;
    border-radius: 0 3px 3px 0;
    user-select: none;
}
/* Position the ""next button"" to the right */
.next {
    position: absolute;
    right: 0;
    border-radius: 3px 0 0 3px;
}
/* On hover, add a black background color with a little bit see-through */
.prev:hover, .next:hover {
    background-color: rgba(0,0,0,0.8);
    color: white;
}
/* The dot/bullet/indicator container */
.dot-container {
    text-align: center;
    padding: 20px;
    background: #ddd;
}
/* The dots/bullets/indicators */
.dot {
    cursor: pointer;
    height: 15px;
    width: 15px;
    margin: 0 2px;
    background-color: #bbb;
    border-radius: 50%;
    display: inline-block;
    transition: background-color 0.6s ease;
}
/* Add a background color to the active dot/circle */
.active, .dot:hover {
    background-color: #717171;
}
/* Add an italic font style to all quotes */
q {font-style: italic;}

/* Add a blue color to the author */
.author {color: cornflowerblue;}
<div class=""slideshow-container"">

    <div class=""mySlides r1"">
        <q>I love you the more in that I believe you had liked me for my own sake and for nothing else</q>
        <p class=""author"">- John Keats</p>
    </div>

    <div class=""mySlides r1"">
        <q>But man is not made for defeat. A man can be destroyed but not defeated.</q>
        <p class=""author"">- Ernest Hemingway</p>
    </div>

    <div class=""mySlides r1"">
        <q>I have not failed. I've just found 10,000 ways that won't work.</q>
        <p class=""author"">- Thomas A. Edison</p>
    </div>

    <a class=""prev"" onclick=""plusSlides(-1)"">❮</a>
    <a class=""next"" onclick=""plusSlides(1)"">❯</a>

</div>

<div class=""dot-container"">
    <span class=""dot"" onclick=""currentSlide(1)""></span>
    <span class=""dot"" onclick=""currentSlide(2)""></span>
    <span class=""dot"" onclick=""currentSlide(3)""></span>
</div>
var slideIndex = 1;
showSlides(slideIndex);

function plusSlides(n) {
    showSlides(slideIndex += n);
}

function currentSlide(n) {
    showSlides(slideIndex = n);
}

function showSlides(n) {
    var i;
    var slides = document.getElementsByClassName(""mySlides"");
    var dots = document.getElementsByClassName(""dot"");
    if (n > slides.length) {slideIndex = 1}
    if (n < 1) {slideIndex = slides.length}
    for (i = 0; i < slides.length; i++) {
        if (slides[i].style.display == 'block') {
            slides[i].className = slides[i].className.replace(""r1"", ""r2"");
        }
    }
    for (i = 0; i < dots.length; i++) {
        dots[i].className = dots[i].className.replace("" active"", """");
    }
    if (document.querySelectorAll('.mySlides.r2').length == 0) {
        // first slide to fade....
        slides[slideIndex-1].style.display = ""block"";
    }
    dots[slideIndex-1].className += "" active"";
    setTimeout(function() {
        var prevEle = document.querySelector('.mySlides.r2');
        if (prevEle != null) {
            prevEle.style.display = 'none';
            prevEle.classList.remove(""r2"");
            prevEle.classList.add(""r1"");
            var slides = document.getElementsByClassName(""mySlides"");
            slides[slideIndex - 1].style.display = ""block"";
        }
    }, 200);
}
/* animation Classes start */
.r1 {
    animation: fadeInUp 1000ms both
}
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translate3d(0, 100%, 0);
    }

    to {
        opacity: 1;
        transform: translate3d(0, 0, 0);
    }
}
.r2 {
    animation: fadeOutUp 1000ms both
}
@keyframes fadeOutUp {
    from {
        opacity: 1;
    }

    to {
        opacity: 0;
        transform: translate3d(0, -100%, 0);
    }
}
/* animation Classes End */
* {box-sizing: border-box}
body {font-family: Verdana, sans-serif; margin:0}
/* Slideshow container */
.slideshow-container {
    position: relative;
    background: #f1f1f1f1;
}
/* Slides */
.mySlides {
    display: none;
    padding: 80px;
    text-align: center;
}
/* Next & previous buttons */
.prev, .next {
    cursor: pointer;
    position: absolute;
    top: 50%;
    width: auto;
    margin-top: -30px;
    padding: 16px;
    color: #888;
    font-weight: bold;
    font-size: 20px;
    border-radius: 0 3px 3px 0;
    user-select: none;
}
/* Position the ""next button"" to the right */
.next {
    position: absolute;
    right: 0;
    border-radius: 3px 0 0 3px;
}
/* On hover, add a black background color with a little bit see-through */
.prev:hover, .next:hover {
    background-color: rgba(0,0,0,0.8);
    color: white;
}
/* The dot/bullet/indicator container */
.dot-container {
    text-align: center;
    padding: 20px;
    background: #ddd;
}
/* The dots/bullets/indicators */
.dot {
    cursor: pointer;
    height: 15px;
    width: 15px;
    margin: 0 2px;
    background-color: #bbb;
    border-radius: 50%;
    display: inline-block;
    transition: background-color 0.6s ease;
}
/* Add a background color to the active dot/circle */
.active, .dot:hover {
    background-color: #717171;
}
/* Add an italic font style to all quotes */
q {font-style: italic;}

/* Add a blue color to the author */
.author {color: cornflowerblue;}
<div class=""slideshow-container"">

    <div class=""mySlides r1"">
        <q>I love you the more in that I believe you had liked me for my own sake and for nothing else</q>
        <p class=""author"">- John Keats</p>
    </div>

    <div class=""mySlides r1"">
        <q>But man is not made for defeat. A man can be destroyed but not defeated.</q>
        <p class=""author"">- Ernest Hemingway</p>
    </div>

    <div class=""mySlides r1"">
        <q>I have not failed. I've just found 10,000 ways that won't work.</q>
        <p class=""author"">- Thomas A. Edison</p>
    </div>

    <a class=""prev"" onclick=""plusSlides(-1)"">❮</a>
    <a class=""next"" onclick=""plusSlides(1)"">❯</a>

</div>

<div class=""dot-container"">
    <span class=""dot"" onclick=""currentSlide(1)""></span>
    <span class=""dot"" onclick=""currentSlide(2)""></span>
    <span class=""dot"" onclick=""currentSlide(3)""></span>
</div>",1
65102994,"import React, { Component } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import WelcomePage from './WelCome';
import SignUpEmailPage from './Signup';

const Stack = createStackNavigator();

export default class App extends Component {
  render() {
    return (
      <NavigationContainer>
        <Stack.Navigator>
          <Stack.Screen name=""Welcome"" component={WelcomePage} />
          <Stack.Screen name=""SignUpEmail"" component={SignUpEmailPage} />
        </Stack.Navigator>
      </NavigationContainer>
    );
  }
}


import React, { Component } from 'react';
import {
  StyleSheet,
  Text,
  View,
  Animated,
  TouchableOpacity,
} from 'react-native';
import GetStartedButton from './GetStartedButton';

export default class WelcomePage extends Component {
  constructor(props) {
    super(props);

    this.fadeAnimation = new Animated.Value(0);
  }

  componentDidMount() {
    Animated.timing(this.fadeAnimation, {
      toValue: 1,
      duration: 5000,
      useNativeDriver: true,
    }).start();
  }

  render() {
    return (
      <View style={styles.containerMain}>
        <View style={styles.containerClub}>
          <Animated.Text
            style={[styles.title, { opacity: this.fadeAnimation }]}>
            Word
          </Animated.Text>
        </View>

        <View style={styles.containerCaption}>
          <Animated.Text
            style={[styles.caption, { opacity: this.fadeAnimation }]}>
            words words words
          </Animated.Text>
        </View>

        <View style={styles.containerBottom}>
          <GetStartedButton
            onPress={() => this.props.navigation.navigate('SignUpEmail')}
          />
        </View>
      </View>
    );
  }
}


import React, { Component } from 'react';
import { StyleSheet, Text, TouchableOpacity, Animated } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';

export default class GetStartedButton extends Component {
  constructor(props) {
    super(props);

    this.fadeAnimation = new Animated.Value(0);
  }
  componentDidMount() {
    Animated.timing(this.fadeAnimation, {
      toValue: 1,
      duration: 5000,
      useNativeDriver: true,
    }).start();
  }

  render() {
    return (
      <Animated.View
        style={[styles.container, { opacity: this.fadeAnimation }]}>
        <TouchableOpacity
          onPress={() => {
            this.props.onPress();
          }}>
          <LinearGradient
            colors={['#DB004C', '#FC008E']}
            style={styles.linearGradient}
            start={{ x: 0, y: 0.5 }}
            end={{ x: 1, y: 0.5 }}>
            <Text style={styles.text}>Get Started</Text>
          </LinearGradient>
        </TouchableOpacity>
      </Animated.View>
    );
  }
}
",1
65116071,"var captions = new Array(14);

captions[0]=""International Space Station fourth expansion [2009]"";
captions[1]=""Assembling the International Space Station [1998]"";
captions[2]=""The Atlantis docks with the ISS [2001]""; 
captions[3]=""The Atlantis approaches the ISS [2000]""; 
captions[4]=""The Atlantis approaches the ISS [2000]""; 
captions[5]=""International Space Station over Earth [2002]"";
captions[6]=""The International Space Station first expansion [2002]"";
captions[7]=""Hurricane Ivan from the ISS [2008]"";
captions[8]=""The Soyuz spacecraft approaches the ISS [2005]"";
captions[9]=""The International Space Station from above [2006]"";
captions[10]=""Maneuvering in space with the Canadarm2 [2006]"";
captions[11]=""The International Space Station second expansion [2006]"";
captions[12]=""The International Space Station third expansion [2007]"";
captions[13]=""The ISS over the Ionian Sea [2007]"";

var htmlCode = """";

for (var i = 0; i <= 13; i++) {
  htmlCode += ""<figure>"";
  htmlCode += ""<img alt=' ' src='slide"" + i + "".jpg' />"";
  htmlCode += ""<figcaption>"" + captions[i] + ""</figcaption>"";
  htmlCode += ""</figure>"";
}

document.getElementById(""gallery"").innerHTML = htmlCode;

// Instead of explicit array declaration with an array size, you can
// just use implicit array declaration and the size will be determined
// by how many things you put in it.
var captions = [
  ""International Space Station fourth expansion [2009]"",
  ""Assembling the International Space Station [1998]"",
  ""The Atlantis docks with the ISS [2001]"",
  ""The Atlantis approaches the ISS [2000]"",
  ""The Atlantis approaches the ISS [2000]"",
  ""International Space Station over Earth [2002]"",
  ""The International Space Station first expansion [2002]"",
  ""Hurricane Ivan from the ISS [2008]"",
  ""The Soyuz spacecraft approaches the ISS [2005]"",
  ""The International Space Station from above [2006]"",
  ""Maneuvering in space with the Canadarm2 [2006]"",
  ""The International Space Station second expansion [2006]"",
  ""The International Space Station third expansion [2007]"",
  ""The ISS over the Ionian Sea [2007]""
];

// Create a new ""wrapper"" element which will hold the other dynamically
// created elements
var wrapper = document.createElement(""div"");

// Instead of a counting for loop, you can use Array.forEach(), which
// removes the need for you to set up and manage a loop counter
captions.forEach(function(caption, index){
  // You should really avoid string manipulations in a loop, which
  // can be costly in terms of performance. Also, when creating new
  // DOM elements, you should use the DOM API for better control and
  // to eliminate having to concatenate strings.
  let figure = document.createElement(""figure"");
  let img = document.createElement(""img"");
  let figcaption = document.createElement(""figcaption"");

  // Configure the new element properties
  img.alt = "" "";
  img.src = ""slide"" + index + "".jpg"";
  figcaption.textContent = caption;

  // Put the image and figcaption in the figure
  figure.appendChild(img);
  figure.appendChild(figcaption);

  // Append the figure to the wrapper
  wrapper.appendChild(figure);
});

// Now, append the wrapper to the main document
document.getElementById(""gallery"").appendChild(wrapper);
",1
65117053,"const myenum = {
  ""bla"": ""blub"",
  [Symbol(""foo"")]: ""bar"",
  [Symbol(""roger"")]: ""roger""
}

const iterableKeys = Object.keys(myenum);
const symbolKeys = Object.getOwnPropertySymbols(myenum);
const keys = [...iterableKeys, ...symbolKeys];

console.log(keys);

const values = keys.map(key => myenum[key]);

console.log(values);
const myenum = {
  ""bla"": ""blub"",
  [Symbol(""foo"")]: ""bar"",
  [Symbol(""roger"")]: ""roger""
}

const keys = Reflect.ownKeys(myenum);

console.log(keys);

const values = keys.map(key => myenum[key]);

console.log(values);",1
65131512,"        PrintWriter out = response.getWriter();
        response.setContentType(""text/html"");

        out.println(""<html><body>"");  
        out.println(""<script type=\""text/javascript\"">"");  
        if(status.equals(""Fail"")) {
            out.println(""alert('Import Failed !');"");  
        }else {
            out.println(""alert('Import Sucessfull !');"");  
        }
        out.println(""location.href = \"""" + request.getContextPath() + ""\"";"");
        out.println(""</script>"");
        out.println(""</body></html>"");
        out.flush();
",1
65107974,"[
  {
    ""name"": ""data.0.id.no"",
    ""value"": null
  },
  {
    ""name"": ""data.0.id.uid"",
    ""value"": null
  },
  {
    ""name"": ""data.0.id.dataBody.area"",
    ""value"": ""Universe""
  },
  {
    ""name"": ""data.0.id.dataBody.place"",
    ""value"": ""LMN""
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.code"",
    ""value"": ""abc""
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.group"",
    ""value"": ""xyz""
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.data.0.definition.type"",
    ""value"": ""up""
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.data.0.definition.features.featurekey"",
    ""value"": ""ABC""
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.data.0.definition.features.featureValues"",
    ""value"": null
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.data.0.definition.mandatory"",
    ""value"": true
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.data.0.cost.currency"",
    ""value"": ""USD""
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.data.0.cost.value"",
    ""value"": 1
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.data.1.definition.type"",
    ""value"": ""down""
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.data.1.definition.mandatory"",
    ""value"": true
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.data.1.cost"",
    ""value"": ""100""
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.data.2.definition.type"",
    ""value"": ""left""
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.data.2.definition.value"",
    ""value"": null
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.data.2.definition.mandatory"",
    ""value"": true
  },
  {
    ""name"": ""data.0.id.dataBody.information1.0.data.2.cost"",
    ""value"": false
  },
  {
    ""name"": ""data.0.id.dataBody.hobby.indoor"",
    ""value"": false
  },
  {
    ""name"": ""data.0.id.dataBody.hobby.outdoor"",
    ""value"": true
  },
  {
    ""name"": ""data.0.id.dataBody.petName"",
    ""value"": ""Tiger""
  },
  {
    ""name"": ""data.0.id.details"",
    ""value"": ""detail""
  },
  {
    ""name"": ""data.0.id.phone"",
    ""value"": ""contact""
  }
]

var output = Array();

function iterate(data, name, output)
{
    for(let key in data)
    {
        let value = data[key];

        if(value != null && (typeof(value) == ""object"" || typeof(value) == ""array""))
        {
            iterate(value, name + ""."" + key, output);
        }
        else
        {
            output.push({name:name + ""."" + key, value:value});
        }
    }
}


iterate(data, ""data"", output);

console.log(""Output"", JSON.stringify(output, 0, 2));
",1
65137929,"import AddContent from '../COMPONENT';
import Lock from '../COMPONENT'

it('should render AddContent component', () => {
  const wrapper = shallow(<MyComponent {...props} />);
  wrapper.setState({ addingNewContent: true });
  const component = wrapper.find(AddContent);
  expect(component.length).toBe(1);
});

it('should render Lock Component', () => {
  const wrapper = shallow(<MyComponent {...props} />);
  wrapper.setState({ addingNewContent: true });
  const component = wrapper.find(Lock);
  expect(component.length).toBe(1);
});
",1
65089848,"const lastSeen = new Map();
for (const entry of myArray) {
    const {id, date, percentage} = entry;
    const last = lastSeen.get(id);
    if (last) {
        if (date > last.date && percentage > last.percentage) {
            // ...this entry is newer than the previous one with the matching ID
            // Replace the previous one (and possibly do something with `stuff`?)
            lastSeen.set(id, entry);
        }
    } else {
        lastSeen.set(id, entry);
    }
}

const myArray = [ { id: 'first', date: '2020-11-30', percentage: 10 }, { id: 'second', date: '2020-10-30', percentage: 20 }, { id: 'first', date: '2020-09-30', percentage: 30 } ];
const lastSeen = new Map()
for (const entry of myArray) {
    const {id, date, percentage} = entry;
    const last = lastSeen.get(id);
    if (last) {
        console.log(`Checking ${id} / ${date} / ${percentage}...`);
        if (date > last.date && percentage > last.percentage) {
            // ...this entry is newer than the previous one with the matching ID
            // Replace the previous one (and possibly do something with `stuff`?)
            console.log(`Replacing ${id}...`);
            lastSeen.set(id, entry);
        } else {
            console.log(`Not replacing ${id}`);
        }
    } else {
        console.log(`${id} is new, adding...`);
        lastSeen.set(id, entry);
    }
}
var lastSeen = Object.create(null);
for (let i = 0; i < myArray.length; ++i) {
    var entry = myArray[i];
    var last = lastSeen[entry.id];
    if (last) {
        if (entry.date > last.date && entry.percentage > last.percentage) {
            // ...this entry is newer than the previous one with the matching ID
            // Replace the previous one (and possibly do something with `stuff`?)
            lastSeen[entry.id] = entry;
        }
    } else {
        lastSeen[entry.id] = entry;
    }
}

const myArray = [ { id: 'first', date: '2020-11-30', percentage: 10 }, { id: 'second', date: '2020-10-30', percentage: 20 }, { id: 'first', date: '2020-09-30', percentage: 30 } ];
var lastSeen = Object.create(null);
for (let i = 0; i < myArray.length; ++i) {
    var entry = myArray[i];
    var last = lastSeen[entry.id];
    if (last) {
        console.log(`Checking ${entry.id} / ${entry.date} / ${entry.percentage}...`);
        if (entry.date > last.date && entry.percentage > last.percentage) {
            // ...this entry is newer than the previous one with the matching ID
            // Replace the previous one (and possibly do something with `stuff`?)
            console.log(`Replacing ${entry.id}...`);
            lastSeen[entry.id] = entry;
        } else {
            console.log(`Not replacing ${entry.id}`);
        }
    } else {
        console.log(`${entry.id} is new, adding...`);
        lastSeen[entry.id] = entry;
    }
}",1
65138228,"img {
  cursor: pointer;
  margin-top: 30px;
}

.tooltip {
  display: block;
  background: black;
  border-radius: 5px;
  max-width: 300px;
  width: 300px;
  position: absolute;
  padding: 12px 18px;
  font-family: open-sans-regular, sans-serif;
  font-size: 14px;
  color: white;
  line-height: 22px;
  box-sizing: border-box;
  z-index: 1000;
  outline: none;
}

.tooltip.bottom .arrow {
  top: 0;
  left: 50%;
  border-top: none;
  border-bottom: 10px solid black;
}

.tooltip .arrow {
  width: 0;
  height: 0;
  position: absolute;
  left: 50%;
  border-left: 10px solid transparent;
  border-right: 10px solid transparent;
  border-top: 10px solid #43b02a;
  margin-top: -10px;
  margin-left: -10px;
}",1
65096606,"google.charts.load('current', { 'packages': ['line'] });
google.charts.setOnLoadCallback(drawChart);

function drawChart() {
  var data = new google.visualization.DataTable();
  data.addColumn('string', 'Day');
  data.addColumn('number', 'Yes');
  data.addColumn('number', 'No');

  data.addRows([
    ['19/11/2020 \n 02:48:16', 1.2, 1.6],
    ['19/11/2020 \n 02:48:22', 1.2, 1.6],
    ['19/11/2020 \n 02:48:28', 1.3, 1.6]
  ]);

  var options = {
    legend: {
      position: 'none'
    },
    height: '100%',
    width: '100%',
    vAxis: {
      viewWindow: {
        min: 1,
        max: 1.95,
      }
    },
    colors: ['#1976D2','#E53935']
  };

  var chart = new google.charts.Line(document.getElementById('linechart_material'));
  chart.draw(data, google.charts.Line.convertOptions(options));

  $('#legend tr').hover(function () {
    chart.setSelection([{ column: $(this).data('column'), row: null }]);
  }, function () {
    chart.setSelection([]);
  })
}
.color {
        width: 2.5rem;
        height: 1.5rem;
        border-radius: 0.1875rem;
    }

    #linechart_material {
        width: 500px;
        height:200px;
        padding-top:5px;
    }
    
    .title {
    margin-bottom: -0.0005rem;
}

.subtitle {
    color: gray;
    font-size: 16px;
}

.state {
    width: 2.5rem;
    height: 1.5rem;
    border-radius: 0.1875rem;
    color: white;
    margin-left: 3px;
    padding-left: 5px;
    padding-right: 5px;
    padding-bottom: 4px;
    font-weight: 600;
}

.state-open {
    background-color: #00ba54;
}

.state-closed {
    background-color: #d00000;
}
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<script src=""https://www.gstatic.com/charts/loader.js""></script>
<div id=""linechart_material""></div>


<table class=""table-hover"">
  <tbody id=""legend"">
    <tr data-column=""1"">
      <td>
        <div class=""color"" style=""background-color:#1976D2""></div>
      </td>
      <td style=""padding-left:20px; padding-right:20px; padding-top:5px; padding-bottom:5px;"">
        Yes
      </td>
      <td>
        1.3
      </td>
    </tr>
    <tr data-column=""2"">
      <td>
        <div class=""color"" style=""background-color:#E53935""></div>
      </td>
      <td style=""padding-left:20px; padding-right:20px; padding-top:5px; padding-bottom:5px;"">
        No
      </td>
      <td>
        1.6
      </td>
    </tr>
  </tbody>
</table>",1
65121595,"<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<section class=""first"">
  <div>One</div>
  <div>Two</div>
  <div>Three</div>
</section>

<section class=""second"">
  <div>Four</div>
  <div>Five</div>
  <div>Six</div>
</section>

<section class=""merged"">
</section>",1
65127305,"// how does it look this way?
console.log(document.querySelector(`#foo > option[value^='#P1']`));
// aha!
console.log(document.querySelector(`#foo > option[value='#P1\\\\""']`));
// jQuery too?
console.log($(`#foo > option[value='#P1\\\\""']`)[0]);
// how about value=""\☺""?
console.log(document.querySelector(`#foo > option[value='\\\\☺']`));

// fun use
document.body.appendChild( Object.assign( document.createElement(""div""), {
    style: ""font-size:4rem; top:-15px;position:absolute;left:5rem;"",
    innerHTML: document.querySelector(`#foo > option[value='\\\\☺']`).value.slice(1), 
  } )
);",1
65161627,"export default {
  computed: {
    filteredOffers() {
      const searchTerm = this.search.toLowerCase();
      return this.items.filter((offer) => {
        return offer.title.toLowerCase().match(searchTerm);
      });
    }
  }
}

const items = [
  { title: 'Foo bar' },
  { title: 'The Milk Is Delicious' },
  { title: 'Baz qux' },
  { title: 'I drink chocolate milk' },
]

const search = 'milk'
const searchTerm = search.toLowerCase()
const result = items.filter((offer) => {
  return offer.title.toLowerCase().match(searchTerm)
})

console.log(result)",1
65106835,"const objectFruits = [{
    fruits: 'apple'
  },
  {
    fruits: 'banana'
  },
  {
    fruits: 'strawberry'
  },
  {
    fruits: 'manggo'
  },
];

const objectMyFavorite = [{
    fruits: 'apple'
  },
  {
    fruits: 'apple'
  },
  {
    fruits: 'banana'
  },
];

const getAllFruits = {
  fruits: objectFruits.map(item => item.fruits)
}
const getAllMyFavorite = {
  fruits: objectMyFavorite.map(item => item.fruits)
}

let myView = '';

for (let i = 0; i < getAllFruits['fruits'].length; i++) {
  const nameFruits = getAllFruits['fruits'][i];
  const filterMyFavorite = getAllMyFavorite['fruits'].filter(function(fruitss) {
    return fruitss == nameFruits
  });
  // and how I delete the empty and just show array if value is not null and show it to user

    if (filterMyFavorite.length > 0){
      myView += `<p>${filterMyFavorite}</p>`
   }
}

document.getElementById(""test"").innerHTML = myView
<!DOCTYPE html>
<html>

<head>
  <meta charset=""utf-8"">
  <meta name=""viewport"" content=""width=device-width"">
  <title>test</title>
  <link href=""style.css"" rel=""stylesheet"" type=""text/css"" />
</head>

<body>
  <div id=""test"">

  </div>
  <script src=""script.js""></script>
</body>

</html>",1
65155728,"<input type=""button"" class=""btn btn-sm btn-w1"" name=""txtval"" id=""txtval"">
<select class=""lbbg selsm-2 inblock-2 "" name=""rupeeitems"" id=""rupeeitems"">
  <option value="""">Select</option>
  <option value=""RUB Dollar"">RUB</option>
  <option value=""AFN Dinaar"">AFN</option>
  <option value=""EUR Dollar"">EUR</option>
</select>

<!-- This one is working properly -->
<input type=""button"" class=""btn btn-sm btn-w1"" name=""txtprice"" id=""txtprice"">
<select class=""lbbg selsm-2 inblock-2 "" name=""cmbitems"" id=""cmbitems"">
  <option value="""">Select</option>
  <option value=""USD Dollar"">USD</option>
  <option value=""Euro Dollar"">EUR</option>
  <option value=""Aud Dollar"">AUD</option>
  <option value=""Bahrien "">BHD</option>
</select>
<script>
  var selectRupee = document.getElementById('rupeeitems');
  var inputRupee = document.getElementById('txtval');
  selectRupee.onchange = function() {
    inputRupee.value = this.value;
  }

  var selectCmb = document.getElementById('cmbitems');
  var inputCmb = document.getElementById('txtprice');
  selectCmb.onchange = function() {
    inputCmb.value = this.value;
  }
</script>",1
65121459,"library(shiny)
ui <- fluidPage(
    flowLayout(
        mainPanel(
           tableOutput(""testTable"")
        )
    )
)
server <- function(input, output) {
    dat <- data.frame(a = c(1,2,3),b = c(4,5,6),c = c(7,8,9))
    colnames(dat) <- c("""","""","""")
    output$testTable <- renderTable(dat, colnames = FALSE, bordered = TRUE)
}
shinyApp(ui = ui, server = server)
",1
65128613,"let W = window.innerWidth;
let H = window.innerHeight;

const renderer = new THREE.WebGLRenderer({
  antialias: true,
  alpha: true
});
document.body.appendChild(renderer.domElement);

const scene = new THREE.Scene();

const camera = new THREE.PerspectiveCamera(28, 1, 1, 1000);
camera.position.set(10, 10, 50);
camera.lookAt(scene.position);
scene.add(camera);

const light = new THREE.DirectionalLight(0xffffff, 1);
light.position.set(0, 0, -1);
camera.add(light);

const group = new THREE.Group();
scene.add(group);

const arrowMat = new THREE.MeshLambertMaterial({color:""green""});

const arrowGeo = new THREE.ConeBufferGeometry(2, 5, 32);
const arrowMesh = new THREE.Mesh(arrowGeo, arrowMat);
arrowMesh.rotation.x = Math.PI / 2;
arrowMesh.position.z = 2.5;
group.add(arrowMesh);

const cylinderGeo = new THREE.CylinderBufferGeometry(1, 1, 5, 32);
const cylinderMesh = new THREE.Mesh(cylinderGeo, arrowMat);
cylinderMesh.rotation.x = Math.PI / 2;
cylinderMesh.position.z = -2.5;
group.add(cylinderMesh);

function render() {
  renderer.render(scene, camera);
}

function resize() {
  W = window.innerWidth;
  H = window.innerHeight;
  renderer.setSize(W, H);
  camera.aspect = W / H;
  camera.updateProjectionMatrix();
  render();
}

window.addEventListener(""resize"", resize);

resize();

let rad = 0;

function animate() {
  rad += 0.05;
  group.lookAt(Math.sin(rad) * 100, Math.cos(rad) * 100, 100);
  renderer.render(scene, camera);
  requestAnimationFrame(animate);
}
requestAnimationFrame(animate);",2
65130344,"$('ul.nav').on('click', '.nav-item:contains(""Support"")', function(e) {
  console.log('clicked');
  //do something else
});
$('button').click(function(e) {
  $('ul.nav').append(`<li class=""nav-item"">
                    <a class=""nav-link"" data-toggle=""tab"" href=""#@n.href"" role=""tab"" aria-selected=""true"" id=""@n.aId"">
                        ${Math.random() < 0.5 ? 'something else' : 'Support'}
                    </a>
                </li>`);
});",2
65157366,"const settings = {};
settings.backgroundColor = '#FFF'; 
settings.textColor       = '#333'; 
settings.shadowColor     = '#DDD';

Object.freeze(settings)

settings.textColor = ""#FFF"";
console.log(settings)

settings.newColor = ""#FFF"";
console.log(settings)

delete settings.textColor
console.log(settings)
function deepFreeze(object) {
  // Retrieve the property names defined on object
  const propNames = Object.getOwnPropertyNames(object);
  // Freeze properties before freezing self
  propNames.forEach(name => {
    const value = object[name];

    if (value && typeof value === ""object"") {
      deepFreeze(value);
    }
  });
  return Object.freeze(object);
}

const obj2 = {
  internal: {
    a: null
  }
};

deepFreeze(obj2);

obj2.internal.a = 'anotherValue'; 
console.log(obj2.internal.a)",2
65126188,"//model.js
   const token = new Tokens();
    token.setAccessToken(access_token);
    token.setRefreshToken(refresh_token);
    export default token;
 
// scheduler.js
import { test } from './models/model.js'

// Here, the test is going to be the same as declared before.
console.log('xxx',test.getAccessToken())

export default class TokensSingleton {
    this.instance = null;

    constructor(){ /* ... */}

    static getInstance() {
        if(!TokensSingleton.instance) {
            TokensSingleton.instance = new TokensSingleton();
        }
        
        return TokensSingleton.instance;
    }

    /* ... */
}


//index.js
    const token = TokenSingleton.getInstance();
    token.setAccessToken('test');
    token.setRefreshToken(refresh_token);

// scheduler.js
import Tokens from './models/tokens.js'


const test = TokenSingleton.getInstance();
console.log('xxx',test.getAccessToken()) // xxx, test
",2
65097709,"const minX = (arr) => {
  let recordMin = 0;
  let sum = 0;
  for (const elm of arr) {
    sum += elm;
    recordMin = Math.min(recordMin, sum);
  }
  return -recordMin + 1;
};

console.log(minX([-2, 3, 1, -5]));
console.log(minX([-2, 3, 1, -5, 999]));",2
65122886,"loadingData = true;
ngOnInit() {
    this._assingedSiteService.getAssignedSitesForLogInUser().subscribe((res) => {
        this.sites = res;
        console.log(this.sites);
        this.loadingData = false;
      }, (error) => {
        console.log(error);
      }
    );
}
",2
65131048,"google.charts.load('current', {
  packages: ['corechart'],
  language: 'nl'
}).then(function () {
  var data = google.visualization.arrayToDataTable([["""",""Appels"",""Peren"",""Bananen"",""dec?""],[new Date(2018, 0, 15),5217,4162,3014,0],[new Date(2018, 1, 15),4691,3582,2552,0],[new Date(2018, 2, 15),5427,4651,4160,0],[new Date(2018, 3, 15),4272,3571,3765,0],[new Date(2018, 4, 15),4409,3266,3020,0],[new Date(2018, 5, 15),4566,3566,3131,0],[new Date(2018, 6, 15),4628,3329,3742,0],[new Date(2018, 7, 15),4175,3309,3390,0],[new Date(2018, 8, 15),4794,3695,3047,0],[new Date(2018, 9, 15),5075,3976,2856,0],[new Date(2018, 10, 15),7568,6737,3056,0],[new Date(2018, 11, 15),7978,7551,4634,0],[new Date(2019, 0, 15),5300,5101,3730,0],[new Date(2019, 1, 15),4526,4310,3342,0],[new Date(2019, 2, 15),5399,5053,4335,0],[new Date(2019, 3, 15),4380,4187,4045,0],[new Date(2019, 4, 15),4940,4560,3854,0],[new Date(2019, 5, 15),4819,4529,3617,0],[new Date(2019, 6, 15),5158,4723,4783,0],[new Date(2019, 7, 15),4813,4290,3673,0],[new Date(2019, 8, 15),5935,5147,3504,0],[new Date(2019, 9, 15),5886,5362,3620,0],[new Date(2019, 10, 15),8565,7706,5652,0],[new Date(2019, 11, 15),9373,8416,4719,0],[new Date(2020, 0, 15),6054,6173,4367,0],[new Date(2020, 1, 15),5691,5458,4340,0],[new Date(2020, 2, 15),14864,6467,8200,0],[new Date(2020, 3, 15),21182,9031,7064,0],[new Date(2020, 4, 15),16590,9828,6981,0],[new Date(2020, 5, 15),13621,10060,7240,0],[new Date(2020, 6, 15),9966,7411,6878,0],[new Date(2020, 7, 15),9771,6948,6265,0],[new Date(2020, 8, 15),11033,7584,4794,0],[new Date(2020, 9, 15),13606,8981,5241,0],[new Date(2020, 10, 15),24279,11658,5889,0],[new Date(2020, 11, 15),2615,1523,439,49463]]);

  var formatMonth = new google.visualization.DateFormat({
    pattern: 'MMM yyyy'
  });
  formatMonth.format(data, 0);

  var options = {'title':'Consumptie per maand',
                 'titleTextStyle': { 'fontSize': 15 },
                 'width':640,
                 'height':240,
                 'legend': { 'position':'bottom' },
                 'series': {""0"":{""color"":""66aabb""},""1"":{""color"":""66ddee""},""3"":{""color"":""e8f8ff""},""2"":{""color"":""bbeeff""}},
                 'chartArea': { 'width': '90%', 'left': 60, 'right': 20 },
                 'bar': { 'groupWidth': '80%' },
                 'isStacked':true};
  var chart = new google.visualization.ColumnChart(document.getElementById('chart2'));
  chart.draw(data, options);
});",2
65125008,"const getAssets = data => {
  return 
    (
        <div>
            <ul>
              {data.slice(0,5).map((improperAsset) => (<li>{improperAsset}</li>))}
            </ul>
        </div>
    );
};
",2
65134054,"const config = {
  ss: null,
  mb_sheet: null,
  users_sheet: null,
  comments_sheet: null,
  mb_rows: null,
  users_rows: null,
  comments_rows: null,
};

function initAll_() {
  config.ss = SpreadsheetApp.openById(SPREAD_SHEET_ID);
  [config.mb_sheet, config.users_sheet, config.comments_sheet] = [
    MESSAGE_BOARD,
    USERS,
    COMMENT_VOTES,
  ].map(name => config.ss.getSheetByName(name));
  [config.mb_rows, config.users_rows, config.comments_rows] = [
    config.mb_sheet,
    config.users_sheet,
    config.comments_sheet,
  ].map(sheet => sheet.getDataRange().getValues());
}


function GetMessageBoardChildren(message_id) {
  /*Initialize everything once and only once*/initAll_();
  console.time('Gettingcomments'); 
  //Removed var ss = SpreadsheetApp.openById(SPREAD_SHEET_ID);
  // var sheet = ss.getSheetByName(MESSAGE_BOARD);
  var rows = /*Modified*/ config.mb_rows;
  /*stuff*/
}

function GetUserNameByUserId(ID) {
  // var ss = SpreadsheetApp.openById(SPREAD_SHEET_ID);
  // var sheet = ss.getSheetByName(USERS);
  var rows = config.users_rows
  /*stuff*/
}

function GetVotesByCommentId(comment_id) {
  // var ss = SpreadsheetApp.openById(SPREAD_SHEET_ID);
  // var sheet = ss.getSheetByName(COMMENT_VOTES);
  var rows = config.comments_rows;
  /*stuff*/
}

/**
 * A sheet configuration object containing class sheet and
 *   it's full datarange values
 * @typedef {Object} SheetConfig
 * @property {GoogleAppsScript.Spreadsheet.Sheet} sheet
 * @property {Object[][]} values
 */

/**
 * Global configuration object
 * @type {{
 * ss:GoogleAppsScript.Spreadsheet.Spreadsheet,
 * [x:string]:SheetConfig|GoogleAppsScript.Spreadsheet.Spreadsheet}}
 */
const config = {
  get ss() {
    delete this.ss;
    return (this.ss = SpreadsheetApp.getActive());
  },
};
(function addSheetGettersToConfig_() {
  /*Add 3 {SheetConfig}  to config object*/
  [MESSAGE_BOARD,USERS,COMMENT_VOTES,].forEach(name =>
    Object.defineProperty(config, name, {
      enumerable: true,
      configurable: true,
      get: function() {
        delete this[name];
        return (this[name] = {
          sheet: this.ss.getSheetByName(name),
          get values() {
            delete this.values;
            return (this.values = this.sheet.getDataRange().getValues());
          },
        });
      },
    })
  );
})();

console.log('config before');
console.log(config);

function test_lazyLoading() {
  console.log(config['Sheet1'].values);
  console.log('config after');
  console.log(config);
}
",2
65113002,"let storage = [];
let addButton = document.getElementById('add_button');
let findButton = document.getElementById('find_button');
let thingContainer = document.getElementById('thing_container');

addButton.onclick = () => {
  let newElement = document.createElement(""li"");
  newElement.style.background = ""purple"";
  newElement.textContent = input.value;
  thingContainer.appendChild(newElement);
  storage.push(newElement);
};

findButton.onclick = () => {
  for (let i = 0; i < storage.length; i++) {
    if (storage[i].textContent.indexOf(find_form.value) >= 0) {
      storage[i].style.display = ""block"";
    } else {
      storage[i].style.display = ""none"";
    }
  }
};
<body>

    <div class = ""to_do_list"">

            <div class = ""add""></div>
            <div id = ""delete""></div>
                
            <input id = ""input"" type = ""text"" name = """">

            <button id = ""add_button"">Add</button>

            <div class = ""find""></div>
            <input id = ""find_form"" type = ""text"" placeholder = ""Find"">
            <button id = ""find_button"" type = ""submit"">Start</button>

            <div id= ""thing_container""></div>

    </div>
    
</body>",2
65150547,"{
  data.map(graph => (
    <div key={graph.ID} className=""tables"">
      <table>
        <tr>
        {
          Object.keys(graph)
            .map(key => <th key={key}>{key}</th>)
        }
        </tr>
        <tr>
        {
          Object.entries(graph)
            .map(([key, val]) => <th key={key}>{val}</th>)
        }
        </tr>
      </table>
    </div>
  ))
}
",2
65145972,"<!doctype html>
<html xmlns:th=""http://www.thymeleaf.org"">
    <head>
        <meta charset=""UTF-8"">
        <title>Demo</title>
        <script src=""https://code.jquery.com/jquery-3.5.1.js""></script>
        <script src=""https://cdn.datatables.net/1.10.22/js/jquery.dataTables.js""></script>
        <link rel=""stylesheet"" type=""text/css"" href=""https://cdn.datatables.net/1.10.22/css/jquery.dataTables.css"">
        <link rel=""stylesheet"" type=""text/css"" href=""https://datatables.net/media/css/site-examples.css"">

        <style>
            .dataTables_paginate {
                float: left !important;
            }
        </style>
    </head>

    <body>

        <div style=""margin: 20px; width: 150px;"">
            <table id=""table_id"">
                <thead>
                    <tr>
                        <td>Users</td>
                    </tr>
                </thead>
                <tbody>
                    <tr th:each=""info : ${userInfo}"">
                        <td>
                            <p th:text=${info.name}></p>
                            <p th:text=${info.dob}></p>                                     
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <script type=""text/javascript"">
            $(document).ready(function () {
                $('#table_id').DataTable({
                    ""dom"": ""tp"",
                    ""ordering"": false,
                    ""pagingType"": ""simple"",
                    ""lengthMenu"": [ 1 ]
                });
            });
        </script>

    </body>
</html>
",2
65127355," var question = 0;

var questions = Array.from(document.getElementsByClassName(""quiz"")).reduce((carry, item) => {
  carry.push(item.textContent.trim())
  return carry;
}, []);

var anim;
var targets;

function prepQuestion() {
  $(""#rect"").text(questions[question]);

  var textWrappers = document.querySelectorAll('#rect');
  textWrappers.forEach(textWrapper => {
    textWrapper.innerHTML = textWrapper.textContent.replace(/(\S*)/g, m => {
      return `<span class=""word"">` +
        m.replace(/(-|)?\S(-|@)?/g, ""<span class='letter'>$&</span>"") +
        `</span>`;
    });
  });

  targets = Array.from(document.querySelectorAll('#rect .letter'));

  anim = anime.timeline()
    .add({
      targets: targets,
      scale: [3, 1],
      scaleY: [1.5, 1],
      opacity: [0, 1],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 400,
      delay: (el, i) => 60 * i
    });
}

// init
prepQuestion();

function next() {
  anim = anime.timeline()
    .add({
      targets: targets.reverse(),
      scale: [1, 3],
      scaleY: [1, 1.5],
      opacity: [1, 0],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 100,
      delay: (el, i) => 30 * i
    });

  anim.complete = () => {
    if (question == questions.length - 1) {
      question = 0;
    } // reset question
    else {
      question++;
    }

    prepQuestion();
  };
}

function previous() {
  anim = anime.timeline()
    .add({
      targets: targets.reverse(),
      scale: [1, 3],
      scaleY: [1, 1.5],
      opacity: [1, 0],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 100,
      delay: (el, i) => 30 * i
    });

  anim.complete = () => {
    if (question == 0) {
      question = questions.length - 1;
    } // reset question
    else {
      question--;
    }

    prepQuestion();
  };
}
        #rect {
  font-weight: 900;
  font-size: 2.5em;
  font-family: rr;
}

#rect .letter {
  display: inline-block;
  line-height: 1em;
}

#quizss {
display:none;
}

.word {
  white-space: nowrap;
}
<script src=""/scripts/snippet-javascript-console.min.js?v=1""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.0/anime.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>



<div id=""quizss"">
<div class=""quiz"">Question-1 : The color of the sky is...?</div>
<div class=""quiz"">Question-2 : Paper comes from...?</div>
<div class=""quiz"">Question-3 : How many hours in a day?</div>
<div class=""quiz"">Question-4 : A Giraffe is a fish?</div>
</div>



<div id=""rect""></div>



<br>
<Button id=""rc"" onclick=""next()"">Next</Button>
<Button id=""rc"" onclick=""previous()"">previous</Button>",2
65113403,"const ReplicatorComponent = {
  template: `<div>
    <h1>replicator-component</h1>
    <slot name='element_1'></slot>
    <slot name='element_2'></slot>
    <slot name='element_3'></slot>
  </div>`
};

const records = [
  { ""index"": 1 },
  { ""index"": 2 },
  { ""index"": 3 },
];

Vue.component('my-component', {
  render: function(createElement) {
    return createElement(ReplicatorComponent, {
      attrs: {
        elements: records.length
      },
      scopedSlots: records.reduce((a,x) => ({
        ...a, 
        ['element_' + x.index]: () => 
          createElement( 'div', 'hello world')
       }), {})
    });
  },
});

new Vue({
  el: '#app',
  data: () => ({})
});",2
65090632,"
interface Props {
  isPrime: boolean;
}
interface Other {
  isEdit: boolean;
}
type TFunc<T, U> = (a: T, b: U) => any;
const myFunc = <T, U>(c: TFunc<T, U>) => (a: T) => (b: U) => c(a, b);

const funcA = myFunc<Props, Other>((props: Props, other: Other) => {
  // ..somecode
});
",2
65119795,".filter((frontMatter) => {
  // Get the front matter into a string, separated by spaces
  const concat = Object.values(frontMatter).join("" "").toLowerCase();

  // Look for a string in quotes, if not then just find a word
  const regex = /\""([\w\s\\\-]+)\""|([\w\\\-]+)/g;

  // Get all the queries
  const queries = [...searchValue.toLowerCase().matchAll(regex)].map((arr) => arr[1] || arr[2]);

  // Make sure that every query is satisfied
  return queries.every((q) => concat.includes(q));
});

.filter((frontMatter) => {
  // Get the front matter into a string, separated by spaces
  // The prepended and appended spaces are important for the regex later!
  const concat = ` ${Object.values(frontMatter).join("" "").toLowerCase()} `;

  // Look for a string in quotes, if not then just find a word
  const regex = /\""([\w\s\\\-]+)\""|([\w\\\-]+)/g;

  // Get all the queries
  const queries = [...searchValue.toLowerCase().matchAll(regex)].map((arr) => arr[1] || arr[2]);

  // Make sure that every query is satisfied
  // [\\s\\.?!_] and [\\s\\.?!_] check for a space or punctuation at the beginning and end of a word
  // so that something like ""deter"" isn't matching inside of ""undetermined""
  return queries.every((q) => new RegExp(`[\\s\\.?!_]${q}[\\s\\.?!_]`).test(concat));
});
",2
65094997,"const monTr=['u/1','I/4', 'G1','G23', 'LD', 'E1', 'E2 /3', 'LL', 'VAR', 'III', 'VUV', 'V - 11', 'II', 'PB', 'V', '-', 'IV'];
const toExcl=['VAR', 'VUV', 'EIT'];

const b = monTr.map(function(inp, index) {
  if (inp.includes('I') || inp.includes('V')) {
    return index;
  } 
}).filter(index => index != null); 
console.log(b);

const c = monTr.map(function(inp, index) {
  if (inp.includes('I') || inp.includes('V') && !toExcl.includes(inp)) {
    return index
  }
}).filter(index => index != null); 
console.log(c);",2
65117929,"        function myFunction() {

            let result;

            result = Object.keys( myObject ).find( function ( tmp ) {

                if ( condition[ tmp ] === true ) {

                    return tmp; // i would like to return the value of tmp

                }

            });

            alert( result ); // returns ""true"" or ""false"" but not the value of ""tmp""

        }
",2
65084322,"let socket = new WebSocket(""wss://ws01.casinocoin.org:4443"");

socket.onopen = function(e) {
  console.log(""[open] Connection established"");
  console.log(""Sending to server"");

  socket.send(`{""id"": 1,""command"": ""tx"",""transaction"": ""165A993C454CE13201073DA4DA362A143B04EEFFDD9CC5CB44EB94E9CC165B46""}`);

  socket.onmessage = function(event) {
    console.log(`[message] Data received from server: ${event.data}`);
    
    // this goes within socket.onmessage
    $.ajax({
        type: ""POST"",
        url: 'post.php',
        data: event.data, // event.data goes here
        success: function(data){
            alert(data);
        }
    });
  };

  socket.onclose = function(event) {
    if (event.wasClean) {
      console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);
    } else {
      // e.g. server process killed or network down
      // event.code is usually 1006 in this case
      console.log('[close] Connection died');
    }
  };

  socket.onerror = function(error) {
    console.log(`[error] ${error.message}`);
  };
}
",2
65163008,"const targetNode = document.querySelector(""body"");

const observer = new MutationObserver((mutationList, observer)=> {
  mutationList.forEach( (mutation) => {
   if(mutation.type === 'childList') {
     console.log(mutation.addedNodes);
   }
  })

});
observer.observe(targetNode, {
  childList: true,
});

setTimeout(() => {
  const someElement = document.createElement(""div"");
  someElement.className = ""some-element"";
  someElement.textContent = ""Some Element"";
  document.body.appendChild(someElement);
}, 1000);",2
65143343,"var lender = [
  [{
      ""name"": ""IFC"",
      ""amount"": 50
    },
    {
      ""name"": ""ABC"",
      ""amount"": 10
    }
  ],
  [{
      ""name"": ""DEF"",
      ""amount"": 40
    },
    {
      ""name"": ""GHI"",
      ""amount"": 100
    }
  ]
];

var names = [""Gary"", ""Neil"", ""Luke"", ""Ben""];

var pageNumbers = [
  [""page 0""],
  [""page 1""]
];
var lenderObj = {
  ""lenders"": {
  }
}

//Loop
var nameIterator = 0;
for(var i = 0; i < lender.length; i++) {
    lenderObj.lenders[pageNumbers[i]] = {};  
  var lenderItem = lender[i];
  for(var j = 0; j < lenderItem.length; j++) {
    lenderObj.lenders[pageNumbers[i]][names[nameIterator]] = {};
    lenderObj.lenders[pageNumbers[i]][names[nameIterator]].financiers = lenderItem[j];
    nameIterator++;
  }
}
console.log(lenderObj);",2
65094953,"// Create keys for the properties of the objects. This uses the offset
// of the start of the property as its key.
let jsonify = distribution_bins.replace(/{/g, ""["");
jsonify = jsonify.replace(/}/g, ""]"");

// Wrap +INF in quotes.
jsonify = jsonify.replace(/\+INF/g, `""+INF""`);

// Parse.
const distribution_data = JSON.parse(jsonify);
",2
65142775,"const data = {
  sample1: {
    4: 2245,
    5: 2175,
    6: 3495,
    7: 1845,
    11.5: 1674,
    12.5: 1649
  },
  sample2: {
    4: 3295,
    5: 3600,
    8: 2625,
    9: 2830,
    11.5: 2879,
    12.5: 3090
  },
  sample3: {
    4: 3295,
    5: 3600,
    6: 2625,
    9: 2830,
    11.5: 2879,
    12.5: 3090
  }
};

const keys = Object.keys(data);

const mergedInnerKeys = Array.from(
  new Set(
    keys
      .reduce((val, key) => [...val, ...Object.keys(data[key])], [])
      .sort((a, b) => a - b)
  )
);

const res = mergedInnerKeys.map((key) => ({
  index: key,
  ...keys.reduce(
    (v, k) => ({
      ...v,
      [k]: data[k][key] !== undefined ? data[k][key].toString() : ''
    }),
    {}
  )
}));
console.log(res);",2
65097580,"sample();

async function sample() {
  const data = await d3.csv('../static/sample.csv');

  uncount = (data, accessor) =>
    data.reduce((arr, item) => {
      const count = accessor(item)
      for (let i = 0; i < count; i++) {
        arr.push({
          ...item
        })
      }
      return arr
    }, []);

  const boxes = uncount(data, d => d.boxes);

  const nest = d3
    .nest()
    .key(d => d.venue)
    .entries(boxes);
}
",2
65148927,"function myFunction(target, icon) { // create a function that accepts arguments
  const element = document.getElementById(target) // query whatever element you pass to it.
  if (element.getAttribute('type') === 'password') {
    element.setAttribute('type', 'text');
    icon.classList.add('fa-eye-slash');
    icon.classList.remove('fa-eye');
  } else {
    icon.classList.remove('fa-eye-slash');
    icon.classList.add('fa-eye');
    element.setAttribute('type', 'password');
  }
}

icon.addEventListener('click', () => myFunction('pass', icon)); // add the event listeners wrapped in anonymous function so it's not called immediately
icon2.addEventListener('click', () => myFunction('repeat_pass', icon2));
",2
65149108,"function addLink(el, text){
  let t = el.textContent;
  el.textContent = '';
  let idx, prev = 0;
  while((idx = t.indexOf(text, prev)) !== -1){
    el.append(t.slice(prev, idx));
    const a = document.createElement('a');
    a.href = '/' + text;
    a.textContent = text;
    el.appendChild(a);
    prev = idx + text.length;
  }
  el.append(t.slice(prev));
}
addLink(document.querySelector('p'), 'ipsum');",2
65125119,"function messup() {
    var promise = new Promise(function(resolve, reject){
        setTimeout(function() {
            try {
                throw new Error(""Thrown from messup()"");
                resolve('hello from messup function'); // This line will never be reached
            } catch (e) {
                reject(e);
            }
        }, 1000);
    });
    return promise;
}
",2
65147501,"import React, { useState, useEffect  } from 'react';
import { Table } from 'react-materialize';
import axios from 'axios';

const CoursesTable = () => {

  const [courses, setCourses] = useState([]);
  const [isLoading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      const coursesData = await axios.get('http://localhost:8001/')
      setCourses(coursesData.data)
      setLoading(false);
    }
    fetchData()
  }, [])
  if(isLoading) { return <div> Loading ... </div> };
  return (
    <Table>
      <thead>
        <tr>
          <th data-field=""course-name"">
            Name
          </th>
          <th data-field=""course-prof"">
            Prof.
          </th>
          <th data-field=""course-code"">
            Code
          </th>
        </tr>
      </thead>
      <tbody>
        {
          courses.length >= 1
          ? courses.map(course => 
              <tr key={course._id}>
                <td>
                  {course.name}
                </td>
                <td>
                  {course.prof}
                </td>
                <td>
                  {course.code}
                </td>
              </tr>
            )
          : <tr>
              <td>There is no course</td>
            </tr>
        }
      </tbody>
    </Table>
  );
}

export default CoursesTable;
",2
65117932,"const divs = document.querySelectorAll( 'div' );

divs.forEach(div => div.addEventListener( 'scroll', e => {
  
  divs.forEach(d => {
  
    d.scrollTop = div.scrollTop;
    d.scrollLeft = div.scrollLeft;
  
  });
  
}) );
html, body {

  height: 100%;
  
}
body {

  display: flex;
  padding: 0;
  margin: 0;

}
div {

  width: 50%;
  height: 100%;
  overflow: scroll;

}
span {

  width: 200vw;
  height: 300vh;
  display: block;
  background: linear-gradient(90deg, transparent, yellow), linear-gradient( 0deg, red, blue, green );
  
}
#div2 {

  margin-top: 30px;
  
}
const divs = document.querySelectorAll( 'div' );

divs.forEach(div => div.addEventListener( 'scroll', e => {
  
  const offsetTop = div.scrollTop / (div.scrollHeight - div.clientHeight);
  
  const offsetLeft = div.scrollLeft / (div.scrollWidth - div.clientWidth);
  
  divs.forEach(d => {
  
    d.scrollTop = offsetTop * (d.scrollHeight - d.clientHeight);
    d.scrollLeft = offsetLeft * (d.scrollWidth - d.clientWidth);
    
  });
  
}) );
html, body {

  height: 100%;
  
}
body {

  display: flex;
  padding: 0;
  margin: 0;

}
div {

  width: 50%;
  height: 100%;
  overflow: scroll;

}
span {

  width: 200vw;
  height: 300vh;
  display: block;
  background: linear-gradient(90deg, transparent, yellow), linear-gradient( 0deg, red, blue, green );
  
}
#div2 span {
  
  height: 500vh;
  width: 500vw;
  
}",2
65087188,"const data = [
    { value: 0.35, name: 'a' },
    { value: 0.12, name: 'b' },
    { value: 0.05, name: 'c' },
    { value: 0.25, name: 'd' },
    { value: 0.23, name: 'e' },
];

for(let i = data.length - 1, cumulated = 0; i >= 0; i--) {
    cumulated += data[i].value;

    data[i].cumulated = cumulated < 0.5 ? cumulated : 1 - cumulated + data[i].value;
}

console.log(data);",2
65141430,"function max(search, keys) {
    const temp = search.reduce((r, [key, ...data]) => {
        if (!r[key]) r[key] = [key, ...data];
        else data.forEach((v, i) => { if (r[key][i + 1] < v) r[key][i + 1] = v; });
        return r;
    }, {});

    return keys.map(key => temp[key]);
}

console.log(max([['#S!', 1, 1], ['#$@', 2, 5], ['#S!', 10, 12], ['#$@', 21, 5]], ['#S!','#$@']));
console.log(max([[""A"", 1, 2],[""A"", 12, 23],[""A"", 11, 23], [""A"", 14, 42], [""A"", 71, 32], [""B"", 113, 42], [""B"", 145, 62], [""C"", 91, 32], [""C"", 14, 222], [""C"", 111, 2]], [""A"", ""B"", ""C""]));",2
65140482,"<div id=""scroll-container"" @onmousewheel=""MouseWheelEventHandler"" @onwheel=""MouseWheelEventHandler"">
    [...]
</div>

@code 
{
    private async Task MouseWheelEventHandler()
    {
        System.Console.WriteLine(""Scroll"");
    }
}
",2
65091734,"const slowAdd = (array)=>{
    
    if(array.length === 0) return 0;

    const restOfArray = array.slice(1);

    return array[0] + slowAdd(restOfArray);

}

const dataArray = [2, 5, 7]
console.log(slowAdd(dataArray));

//Same Problem with this one.

const fastSum = (array)=>{
    return _fastSum(array, 0);
};
const _fastSum = (array, start)=>{
    if(start === array.length) return 0;

    return array[start] + _fastSum(array, start + 1);

}

console.log(fastSum(dataArray));",2
65151674,"import * as IO from 'fp-ts/es6/IO'
import { flow } from 'fp-ts/es6/function'
import { Lens } from 'monocle-ts'

// Just for fun, model writing a Foo to disk
declare const writeFooToDisk: (foo:Foo) => IO.IO<Foo>
interface Foo {
  id: string
  bar: string
}

// How to instantiate a Foo
const makeFoo = (id:string):Foo => ({id, bar: 'initial value'})

/* 
 * How to update bar within a Foo; FP prefers immutable data structures.
 * Here, setBar('new val')(oldFoo) does not change oldFoo but returns a new Foo
 */
const setBar = (bar:string) => (foo:Foo):Foo => ({...foo, bar})

/*
 * Here's how you might change your someFunction... (sFTR) to be functional.
 * I assume ""does something"" means there's a side effect (HTTP fetch, DB read, 
 * disk write). With a side effect, you want to wrap it in an IO (if sync) or
 * Task (if async). For simplicity, I'm assuming the function can never produce
 * an error.
 */
const sFTR: (foo:Foo) => IO.IO<Foo> = flow(
  IO.of,
  IO.chain(writeFooToDisk),
  IO.map(foo => setBar(foo.bar==='initial value'?'initial value changed':'value changed')(foo))
)

///// We can improve this with lenses, another thing in FP:

/*
 * A lens is essentially two functions: a getter and an immutable setter
 * assume type S { A: unknown }, then
 *
 * sLens.get is (s:S) => A, you pass state and it gives you property
 *
 * sLens.set is (a:A) => (s:S) => S, you pass new property, then state, and it
 * gives up updated state
 *
 * some libs provide `modify`, which is like `set` but it takes a function
 * rather than a value, and it modifies the property based on its current value
 */
const barLens = Lens.fromProp<Foo>()('bar')

// This is what we'll pass `modify`
const updateBar = (bar:string) => bar==='initial value' 
  ? 'initial value changed' 
  : 'value changed'

/*
 * We define a function ""flow"" that lifts a Foo into IO, then writes to disk,
 * then modifies bar, and returns the updated Foo (still wrapped in IO)
 */
const sFTRWithLens: (foo:Foo) => IO.IO<Foo> = flow(
  IO.of,
  IO.chain(writeFooToDisk),
  IO.map(barLens.modify(updateBar))
)

// type IO<A> is just ()=>A, so we can unwrap the Foo like so:
const foo = makeFoo('howdy')
const newFooIO = sFTRWithLens(foo) // IO<Foo>
newFooIO() // Foo

// Or, using flow again. This creates a Foo, writes it to disk, updates bar,
// and returns the updated Foo
flow(makeFoo, newFooIO, newFooIO)('howdy') // { id: 'howdy', bar: 'updated initial value' }
",2
65091850,"const handlerIs = ($ele, handler, func) => {
  const events = $._data($ele.get(0), ""events"");
  func = func.toString();
  return events && 
    events[handler]?.some(ev => ev.handler.toString() === func);
};

const $ele = $(""button"");

const clicked = () => alert(""clicked"");

$ele.on(""click"", clicked)
$ele.on(""click"", clicked)

if (handlerIs($ele, ""click"", clicked)) {
  console.log(`click clicked exists on ${$ele.get(0).tagName}`);
}
const hasHandler = ($ele,handler) => Object.keys($._data($ele.get(0), ""events""))
  .filter(key => key===handler).length>0;


const $ele = $(""button"");

$ele.on(""click"",function() { alert(""clicked"") }); // define click once

if (!hasHandler($ele,""click"")) { // test before trying again
   $ele.on(""click"",function() { console.log(""another click"") }); 
}
else console.log(`click already found on ${$ele.get(0).tagName}`)

/* 
Object.entries($._data($ele.get(0), ""events""))
  .forEach(ent => console.log(ent[0],ent[1][0].handler))
*/",2
65120075,"const arr = [ { category: ""Diner"", item: [ { name: ""Chicken Rice"", price: 200 }, { name: ""Mutton Rice"", price: 300 }, ], }, { category: ""Breakfast"", item: [ { name: ""Tea Bisuit"", price: 100 }, { name: ""Bread Butter"", price: 300 }, { name: ""Green Tea"", price: 80 }, ], }, ]

const term = ""Green Tea""

const res = arr
  .map((categoryAndItems) => ({
    category: categoryAndItems.category,
    item: categoryAndItems.item.filter((item) => item.name === term),
  }))
  .filter((categoryAndItems) => categoryAndItems.item.length > 0)

console.log(res)",2
65132483,"var examGrade;
var letter;
function start(){
    var NUMBER_OF_STUDENTS = 20;
    for(var i = 0; i < NUMBER_OF_STUDENTS; i++){

        var examGrade = getRandomInt(50,100); // 2. This is how you generate random numbers (see function getRandomInt)
        var letter = getLetterGrade(examGrade);
        document.writeln(""you received "" + letter + "" for your grade of "" + examGrade + ""<br>""); // 3. Use ""document.writeln"" to write lines in browser

    }
}

/* Copied from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random */
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
}

// 4. You need to return the letter from the function
function getLetterGrade(examGrade){ // 5. You need to catch the value sent to the function here
    if (examGrade >= 91 && examGrade >= 100){ // 6. You need to use the parameter ""examGrade"" (not ""n"")
       return ""A"";

    }else if (examGrade >= 81 && examGrade >= 90){
      return ""A"";

    }else if (examGrade >= 71 && examGrade >= 80){
       return ""C"";

    }else if (examGrade >= 61 && examGrade >= 70){
     return ""D"";

    }else if (examGrade <61){ 
       return ""F"";
    }

}

start() // 1. Need to run the function ""start""",2
65154373,"videosChunked.map((chunk, chunkIndex) => (
  chunk => (
    <div>
      {chunk.map((video, i) => (
          <div key={i}>
            <a>                                                             
              <div>
                <span>Clip {chunkIndex * 6 + i + 1}</span>
                <label>{video.duration}</label>
              </div>
            </a>
          </div>
      ))}
    </div>
  )
));
",2
65134164,"let deap;

if ('notify' == ""Initial"") {
  deap = ""Activation "";
} else if ('notify' == ""Update"") {
  deap = ""Update "";
} else {
  deap = ""De-Activation "";
}

console.log(deap)",2
65111366,"function* filter(predicate, it) {
  for (const item of it) {
    if (predicate(item))
      yield item;
  }
}

function* map(fn, it) {
  for (const item of it) {
    yield fn(item);
  }
}


const checkedItems = new Map()
  .set(""1""  , true)
  .set(""1.5"", true)
  .set(""2""  , false);
  
const iterator = checkedItems.entries();
const onlyTrue = filter(([key, value]) => value, iterator);
const onlyTrueKeys = map(([key]) => key, onlyTrue);

console.log(Array.from(onlyTrueKeys));
function* filter(predicate, it) {
  for (const item of it) {
    if (predicate(item))
      yield item;
  }
}

function* map(fn, it) {
  for (const item of it) {
    yield fn(item);
  }
}

function transform(iterator, ...transformers) {
  return transformers.reduce((it, transform) => transform(it), iterator);
}


const checkedItems = new Map()
  .set(""1""  , true)
  .set(""1.5"", true)
  .set(""2""  , false);

const onlyTrueKeys = transform(
  checkedItems.entries(),
  
  filter.bind(null, ([key, value]) => value),
  map.bind(null, ([key]) => key),
  Array.from
);

console.log(onlyTrueKeys);
function* filter(it, pred) {
  for (const item of it) {
    if (pred(item))
      yield item;
  }
}

function* map(it, fn) {
  for (const item of it) {
    yield fn(item);
  }
}

class LazyTransformer {
  constructor(iterator) {
    this.iterator = iterator;
  }
  
  filter(predicate) {
    this.iterator = filter(this.iterator, predicate);
    return this;
  }
  
  map(fn) {
    this.iterator = map(this.iterator, fn);
    return this;
  }
  
  toArray() {
    return Array.from(this.iterator);
  }
}


const checkedItems = new Map()
  .set(""1""  , true)
  .set(""1.5"", true)
  .set(""2""  , false);

const transformer = new LazyTransformer(checkedItems.entries());

transformer
  .filter(([key, value]) => value)
  .map(([key]) => key);

console.log(transformer.toArray());",2
65100392,"const App = () => {

  return (
  
    <div>
            <figure style={{
                position: 'fixed',
                top: 0,
                left: 0,
                backgroundImage: `url(https://placekitten.com/1000/1000)`,
                backgroundSize: 'fit',
                backgroundPosition: 'top',
                width: '100%',
                height: '100%',
                margin: 0
            }}></figure>
      <div style={{  width: '100%', height: '100%', backgroundColor: 'red', position: 'absolute', opacity: '20%'}}> </div>
        <div style={{
            position: 'absolute',
                      top: '50%',
                      left: '50%',
                      transform: 'translate(-50%, -50%)',
                      width: '412px',
            color: 'white'
          }}>
            <h1>Div content</h1>
            <p>Would like to add a backdrop over the parent div</p>
            <p>Make the background a light gray over the image</p>
            <p>As it stands, any background related color I put on this div does not work. (see the backgroundColor set to red on one of the parent divs</p>

        
      </div>

    </div>
  )
}


ReactDOM.render(
    <App />,
    document.getElementById('app')
);",2
65113963,"const fn = function() {
  return [1, 2, 3, 4, 5];
};
fn.toString = function() {
  return '[native code]';
};

Object.defineProperty(Navigator.prototype, 'plugins',
  {
      get: fn,
});

const descriptor = Object.getOwnPropertyDescriptor(Navigator.prototype, 'plugins');
console.log(Function.prototype.toString.call(descriptor.get));",2
65102615,"var stipends = document.getElementById(""stipends"");
var stack = [""stack1.PNG"", ""stack2.PNG"", ""stack3.PNG""];

//currentStack = 0 starts the index at 0
//we will use this to iterate over the array in sequential order starting with the first item
var currentStack = 0;

function nextStack() {
//declare array length as a var 
 var len = stack.length;

//on click, check if currentStack value is less than len
 if(currentStack < len){
 
//console log the item in the stack array that has a matching index
   console.log(stack[currentStack]);

//apply the same output as image source
   stipends.src = stack[currentStack];
   
//continue adding to the currentStack for the next loop until finished
   currentStack++;
 }
}",2
65101109,"
$.getJSON(url, function (data) {
    var events = data.resultsPage.results.event;
    console.log(events);

    // Initially filter out all the events with status ""cancelled"" so they won't be rendered
    const filteredEvents = events.filter(event => event.status !== ""cancelled"");
    // Running on the filtered events
    filteredEvents.forEach(function (item, index, array) {
    ...
    });
  });
",2
65156282,"var module = module || function (){
    function init(){
        (function not_important(){console.log(""I do some other stuff"")})()
    }

    function public_method(){
        private_method()
    }

    function private_method(){
        console.log(""original private method"")
    }

    return {
        init: init,
        public_method: public_method,
        // *** Provide yourself functions to get `private_method` (and any
        // others you may want) and update it
        __privates__: {
            private_method: {
                get: function() {
                    return private_method;
                },
                set: function(fn) {
                    // *** Function declarations effectively create variables;
                    // you can write to them:
                    private_method = fn;
                }
            }
        }
    }
}()

// *** Where you want to make your change
module.__privates__.private_method.set(function() { /* ... */ });

var module = module || function (){
    /*** An object with the private functions you need to do this for
    var privates = {};

    function init(){
        (function not_important(){console.log(""I do some other stuff"")})()
    }

    function public_method(){
        // *** Calling it via that object, which has an effect on `this`
        privates.private_method()
        // *** If you want `this` to be the same as it would have been
        // with the raw call above (the global object or `undefined` if
        // you're in strict mode), you can use the comma trick:
        // (0,privates.private_method)()
    }

    privates.private_method = function private_method(){
        console.log(""original private method"")
    };

    return {
        init: init,
        public_method: public_method,
        // *** Expose that object with the private functions
        __privates__: privates
    }
}()

// *** Where you want to make your change
module.__privates__.private_method = function() { /* ... */ };
",2
65083754,"const express = require('express');
const app = express();
app.use(express.json()) 

app.post('/clicked', (req, res) => {
  console.log(req.a);
  console.log(req.b);
  console.log(req.body);
  res.sendStatus(201);
});
",2
65103131,"/* cyrillic-ext index:0 */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu72xKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
}
/* cyrillic index:1*/
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu5mxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
}
/* greek-ext index:2*/
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7mxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+1F00-1FFF;
}
/* greek index:3*/
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu4WxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0370-03FF;
}
/* vietnamese index:4 - should be loaded */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7WxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;
}
/* latin-ext index:5 - should be loaded */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7GxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}
/* latin index:6 - should be loaded */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2) format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}


body {
  font-family: ""Roboto"";
}
( async () => {
  // <DEMO only>
  // just to be sure the font was not loaded yet
  await document.fonts.ready;
  logLoadedFontsCount( ""after document.fonts ready"" );
  // </DEMO only>
  
  // now try to draw using that font face anyway
  const canvas = document.querySelector( ""canvas"" );
  const ctx = canvas.getContext( ""2d"" );
  const font_shorthand = ""30px Roboto"";
  const text = ""Привет мир"";

  // force loading fonts
  await document.fonts.load( font_shorthand, text );
  // now we can use it
  ctx.font = font_shorthand;
  ctx.fillText( text, 30, 50 );

  // <DEMO only>
  logLoadedFontsCount( ""after loading of customs fonts"" );
  // </DEMO only>
} )();

// <DEMO only>
// logs how many FontFaces are currently loaded
function logLoadedFontsCount( when = """" ) {
  const loaded_fonts = [ ...document.fonts ]
    .filter( ({status}) => status === ""loaded"" );
  console.log( ""%s fonts loaded %s"", loaded_fonts.length, when );
} 
// </DEMO only>
/* cyrillic-ext index:0 */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu72xKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
}
/* cyrillic index:1*/
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu5mxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
}
/* greek-ext index:2*/
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7mxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+1F00-1FFF;
}
/* greek index:3*/
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu4WxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0370-03FF;
}
/* vietnamese index:4 - should be loaded */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7WxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;
}
/* latin-ext index:5 - should be loaded */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7GxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}
/* latin index:6 - should be loaded */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2) format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}",2
65162761,"function findIntersection(strArr) {
    const arr1 = strArr[0].split("", "");
    const arr2 = strArr[1].split("", "");
    const finalArr = [];
    arr1.forEach(el1 => {
        arr2.forEach(el2 => {
            if (el1 === el2) {
                finalArr.push(el1);
            }
        });
    });
    return finalArr;
}
",2
65117962,"import React, {useState} from 'react'

function Room() {
    const [check, setCheck] = useState(null);

    const ibegyouwork = () => {
        setCheck(<button>New button</button>);
    } 

    return (
        <div>
            <button onClick={ibegyouwork}>Display my button now !!!!</button>
            {check}
        </div>
    );
}

export default Room;
",2
65086166,"<link href=""https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/codemirror.min.css"" rel=""stylesheet"" />
<link href=""https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/theme/ambiance.min.css"" rel=""stylesheet"" />
<script src=""https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/codemirror.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/mode/clike/clike.min.js""></script>

<textarea id=""codepane"">
private class InnerClass {
  public int zero() {
    return 0;
  }
}
</textarea>",2
65147279,"    let user_posts = []
    const array = query.data().anunturi_postate
    for (ref of array) {
        let post = await ref.get()
        let post_data = await post.data() 
        console.log(post_data) // data looks ok
        user_posts.push(post_data)
    })

    console.log(""user_posts:"", user_posts)
",2
65097237,"    var input = document.getElementById(""Phone_num"");
    input.addEventListener(""blur"", function(){
        const phone = document.getElementById(""Phone_num"").value;
    const phoneFormatRex = /^\+?[0-9(),.-]+$/;
    var match = phoneFormatRex.exec(phone);
    if (match) {
        document.getElementById(""Phone_num"").value = phone;
    }
    else {
        document.getElementById(""Phone_num"").value = """";
    }
    })",2
65095058,"const data = [
  {
    code: ""prod1"",
    quantity: 13,
    pricePerItem: 10,
    totalCost: 130
  },
  {
    code: ""prod1"",
    quantity: 7,
    pricePerItem: 11,
    totalCost: 77
  },
  {
    code: ""prod2"",
    quantity: 10,
    pricePerItem: 9,
    totalCost: 90
  },
  {
    code: ""prod2"",
    quantity: 9,
    pricePerItem: 10,
    totalCost: 90
  }
];

console.log(
  data.reduce((acc, current) => {
    if (!acc[current.code]) {
      acc[current.code] = { quantity: 0, total: 0 };
    }
    return {
      ...acc,
      [current.code]: {
        quantity: acc[current.code].quantity + current.quantity,
        total: acc[current.code].total + current.totalCost
      }
    };
  }, {})
);",2
65089287,"const products = [{
    id: ""A32S"",
    title: ""Car""
  },
  {
    id: ""D12E"",
    title: ""Rabbit""
  },
  {
    id: ""A33S"",
    title: ""Ghost""
  },
  {
    id: ""34SC"",
    title: ""Apple""
  },
];

const newProducts = [{
    id: ""A32S"",
    title: ""Ferrari""
  },
  {
    id: ""D12E"",
    title: ""Rabbit""
  },
  {
    id: ""A33S"",
    title: ""Ghost""
  }
]

const changes = [];

function hasSameValue(product, otherProduct, key) {
  return product[key] === otherProduct[key];
}

function exists(product, productArray) {
  for (const existingProduct of productArray) {
    if (hasSameValue(product, existingProduct, ""id"")) return true;
  }
  return false;
}

function getExistingProduct(id, productArray) {
  for (const product of productArray) {
    if (product.id === id) return product;
  }
}

for (const product of newProducts) {
  if (exists(product, products)) {
    const existingProduct = getExistingProduct(product.id, products);
    if (!hasSameValue(product, existingProduct, ""title"")) {
      changes.push(product);
    }
  }
}

for (const product of products) {
  if (!exists(product, newProducts)) {
    changes.push({
      id: product.id,
      removed: true
    });
  }
}

console.log(changes);",2
65130723,"function hidecolumns() {
  var sh = SpreadsheetApp.getActiveSpreadsheet();
  var ss = sh.getSheetByName(""Project Team Resources"");
  var data = ss.getRange(""C5:N10"").getValues();
  data[0].forEach((_,col)=>{                 
     if(data.map(d => d[col]).filter(e=>e!='').length==0 && col>2){
       ss.hideColumns(col+3);
     }
  });
}
",2
65097731,"import React, { Component } from ""react"";

export default class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      a: [""Apple"", ""pear"", ""plum"", ""currant"", ""strawberry""],
      b: [""Amelia"", ""Oliver"", ""Sophie"", ""Alfie"", ""Jacob""],
      c: [""mercedes"", ""bmw"", ""audi"", ""volkswagen"", ""hyundai""],
      index: null
    };
  }

  setIndex = i => {
    console.log(i);
    this.setState({
      index: i
    });
    console.log(this.state.index);
  };
  render() {
    return (
      <div>
        {this.state.index !== null && (
          <div>
            <List
              a={this.state.a[this.state.index]}
              b={this.state.b[this.state.index]}
            />
          </div>
        )}
        <div>
          <ul>
            {this.state.a.map((arr, idx) => (
              <li
                onClick={() => {
                  console.log(""hi"");
                  this.setIndex(idx);
                }}
              >
                {arr}
              </li>
            ))}
          </ul>
        </div>
      </div>
    );
  }
}

class List extends Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <ul>
          <li>{this.props.a}</li>
          <li>{this.props.b}</li>
        </ul>
      </div>
    );
  }
}
",2
65091382,"const mgrs = require(""mgrs"");
const _ = require(""lodash"");

// Some sample users living within a few kms 
let users = [
    { first: 'Andreias', last: 'Aragão', lat: 51.51697, lon: -0.11894 },
    { first: 'Babür', last: 'Erberk', lat: 51.50041, lon: -0.12823 },
    { first: 'William', last: 'Jørgensen', lat: 51.49879, lon: -0.13041 },
    { first: 'Clyde', last: 'Crawford', lat: 51.50928, lon: -0.1226 },
    { first: 'Silvijn', last: 'Werts', lat: 51.49843, lon: -0.12066 },
    { first: 'Jokubas', last: 'Laastad', lat: 51.50517, lon: -0.12312 },
    { first: 'Rebecca', last: 'Lawson', lat: 51.5018, lon: -0.12786 },
    { first: 'Oscar', last: 'Opland', lat: 51.50123, lon: -0.13245 },
    { first: 'Cláudio', last: 'Costa', lat: 51.50354, lon: -0.13123 },
    { first: 'Juan', last: 'Ruiz', lat: 51.50796, lon: -0.12884 }
]

// Add user MGRS grid square
users = users.map(user => {
    // Get MGRS grid location accurate to ~1km
    user.mgrs = mgrs.forward([user.lon, user.lat], 2);
    return user;
})

const usersByLocation = _.groupBy(users, ""mgrs"");
console.log(usersByLocation);

{
    '30UXC9911': [
        {
          first: 'Andreias',
          last: 'Aragão',
          lat: 51.51697,
          lon: -0.11894,
          mgrs: '30UXC9911'
        }
      ],
      '30UXC9909': [
        {
          first: 'Babür',
          last: 'Erberk',
          lat: 51.50041,
          lon: -0.12823,
          mgrs: '30UXC9909'
        },
        {
          first: 'William',
          last: 'Jørgensen',
          lat: 51.49879,
          lon: -0.13041,
          mgrs: '30UXC9909'
        },
        {
          first: 'Silvijn',
          last: 'Werts',
          lat: 51.49843,
          lon: -0.12066,
          mgrs: '30UXC9909'
        },
        {
          first: 'Jokubas',
          last: 'Laastad',
          lat: 51.50517,
          lon: -0.12312,
          mgrs: '30UXC9909'
        },
        {
          first: 'Rebecca',
          last: 'Lawson',
          lat: 51.5018,
          lon: -0.12786,
          mgrs: '30UXC9909'
        },
        {
          first: 'Oscar',
          last: 'Opland',
          lat: 51.50123,
          lon: -0.13245,
          mgrs: '30UXC9909'
        },
        {
          first: 'Cláudio',
          last: 'Costa',
          lat: 51.50354,
          lon: -0.13123,
          mgrs: '30UXC9909'
        }
      ],
      '30UXC9910': [
        {
          first: 'Clyde',
          last: 'Crawford',
          lat: 51.50928,
          lon: -0.1226,
          mgrs: '30UXC9910'
        },
        {
          first: 'Juan',
          last: 'Ruiz',
          lat: 51.50796,
          lon: -0.12884,
          mgrs: '30UXC9910'
        }
      ]
}
",2
65137681,"function makeCircle(circle) {
  container = document.querySelector('#'+circle);

  for(i = 0; i < 30; i++){
    container.innerHTML += '<div class=""item '+circle+' ""></div>';
    if((i % 5) == 0){ 
      document.querySelectorAll('.item.'+circle)[i].style.setProperty(""--width"", 4+""px"");
    }       
    document.querySelectorAll('.item.'+circle)[i].style.transform = ""rotate("" + i * 6 + ""deg)"";     
  }
}

makeCircle('h');
makeCircle('m');
makeCircle('s');
",2
65113108,"
import './App.css';
import Licence from './Licence';

function App() {
  return (
    <>
    <Licence test={""Test123""} />
    </>
  );
}
export default App;

",2
65117205,"export const TaskDate = ({ setTaskDate, showTaskDate, setShowTaskDate }) => {
  return (
    showTaskDate ? (
      <div className=""task-date"" data-testid=""task-date-overlay"">
        <ul className=""task-date__list"">
         ...
        </ul>
      </div>
    ) : null
  );
};
",2
65151820,"Vue.component('mycomp', {
  template: `
  <div>
    <button @click=""$emit('do', { text: 'return object from component'})"">Emit</button>
  </div>
  `
})

new Vue({
  el: ""#app"",
  methods: {
    wrapDo(objectFromComp, myIntegerParameter) {
      console.log(objectFromComp, myIntegerParameter);
    }
  },
});",2
65103977,"import React from ""react"";
import ReactDOM from ""react-dom"";

import App from ""./App"";

ReactDOM.render(<App />, document.getElementById(""root""));

var bImg = prompt(""Which image do you want to set as background image?"");
const bStyle = {
  backgroundImage: `url(${bImg})` // i stored the link here
};

const rootElement = document.getElementById(""root"");
ReactDOM.render(
  <div style={bStyle}>
    // I stored it here but still it won't show up
    <h1>Hello world!!</h1>
  </div>,
  rootElement
);

",2
65147972,"var playerCount = 0;
var computerCount = 0;
var items = [""rock"", ""paper"", ""scissors""];
var playerScore = document.querySelector("".player-score"");
var computerScore = document.querySelector("".computer-score"");
var winner = document.querySelector("".winner"");
var btnRock = document.querySelector("".rock"");
var btnPaper = document.querySelector("".paper"");
var btnScissors = document.querySelector("".scissors"");

function getRandomItem() {
  return items[Math.floor(Math.random() * items.length)];
}

btnRock.onclick = function() {
  var randomItem = getRandomItem();
  if (randomItem === items[2]) {
    playerCount++;
    playerScore.textContent = playerCount;
    winner.textContent = 'Player';
  } else if (randomItem === items[0]) {
    winner.textContent = 'Draw';
  } else {
    computerCount++;
    computerScore.textContent = computerCount;
    winner.textContent = 'Computer';
  }
};

btnPaper.onclick = function() {
  var randomItem = getRandomItem();
  if (randomItem === items[0]) {
    playerCount++;
    playerScore.textContent = playerCount;
    winner.textContent = 'Player';
  } else if (randomItem === items[1]) {
    winner.textContent = 'Draw';
  } else {
    computerCount++;
    computerScore.textContent = computerCount;
    winner.textContent = 'Computer';
  }
};

btnScissors.onclick = function() {
  var randomItem = getRandomItem();
  if (randomItem === items[1]) {
    playerCount++;
    playerScore.textContent = playerCount;
    winner.textContent = 'Player';
  } else if (randomItem === items[2]) {
    winner.textContent = 'Draw';
  } else {
    computerCount++;
    computerScore.textContent = computerCount;
    winner.textContent = 'Computer';
  }
};",2
65125039,"
@Controller()
export class UserController {

    @Get(""/users"")
    getAll(@Req() request: Request, @Res() response: Response) {
        return response.send(""Hello response!"");
    }

}


import ""reflect-metadata"";
import { useExpressServer } from ""routing-controllers"";

let express = require(""express""); // or you can import it if you have installed typings
let app = express(); // your created express server
// app.use() // you can configure it the way you want
useExpressServer(app, { // register created express server in routing-controllers
    controllers: [UserController] // and configure it the way you need (controllers, validation, etc.)
});
app.listen(3000); // run your express server

",2
65091833,"const EL_body = document.querySelector(""body"");
const ELS_fontSize = document.querySelectorAll("".fontSize"");
localStorage.fontSize = localStorage.fontSize || 16; // Read or default to 16px

function changeSize() {
  EL_body.style.fontSize = `${localStorage.fontSize}px`;
}

ELS_fontSize.forEach(el => el.addEventListener(""click"", function() {
  localStorage.fontSize = parseInt(localStorage.fontSize) + parseInt(el.value);
  changeSize();
}));

// Change size on subsequent page load
changeSize();
const EL_body = document.querySelector(""body"");
const ELS_fontSize = document.querySelectorAll(""[name='fontSize']"");
localStorage.fontSize = localStorage.fontSize || 16; // Read or default to 16px

function changeSize() {
  ELS_fontSize.forEach(el => el.checked = el.value === localStorage.fontSize);
  EL_body.style.fontSize = `${localStorage.fontSize}px`;
}

ELS_fontSize.forEach(el => el.addEventListener(""change"", function() {
  localStorage.fontSize = el.value;
  changeSize();
}));

// Change size on subsequent page load
changeSize();

const EL_body = document.querySelector(""body"");
const EL_fontSize = document.querySelector(""#fontSize"");
localStorage.fontSize = localStorage.fontSize || 16; // Read or default to 16px

function changeSize() {
  EL_fontSize.value = localStorage.fontSize; // Update select value;
  EL_body .style.fontSize = `${localStorage.fontSize}px`;
}

EL_fontSize .addEventListener(""change"", function() {
  localStorage.fontSize = this.value;
  changeSize();
});

// Change size on subsequent page load
changeSize(); 
",2
65095422,"var canvas = document.getElementById(""ok"");
var ctx = canvas.getContext(""2d"");
var loggingMachine = document.getElementById(""loggy"");
var score = 0;
const Rg = Math.floor(Math.random() * 480);
function ball(x) {
  this.x = x;
  this.y = 0;
  this.width = 20;
  this.height = 20;
}
var firstBall = new ball(Rg);
function newBall() {
  if (firstBall.y < 480) {
    ctx.clearRect(0, 0, 480, 480);
    ctx.fillRect(firstBall.x, firstBall.y, firstBall.width, firstBall.height);
    firstBall.y++;
  } else {
  
  const playerStart = player.x;
  const playerEnd = player.x + player.width;
  
  const ballStart = firstBall.x;
  const ballEnd = firstBall.x + firstBall.width;
  
  const test1 = ballEnd - playerStart;
  const test2 = ballStart - playerEnd;
  
    if (
      test1 >= 0 && test2 <= 0
    ) {
      alert(""yawwo"");
    }
    firstBall.y = 0;
    firstBall.x = Math.floor(Math.random() * 480);
  }
}
function paddle(x) {
  this.x = x;
  this.y = 470;
  this.width = 70;
  this.height = 20;
}

var player = new paddle(50);
function renderPlayer() {
  ctx.fillRect(player.x, player.y, player.width, player.height);
  document.addEventListener(""keydown"", logKey);

  function logKey(e) {
    if (e.code === ""ArrowLeft"") {
      player.x = player.x - 0.01;
    } else if (e.code === ""ArrowRight"") {
      player.x = player.x + 0.01;
    }
    loggingMachine.innerText = score;
  }
}

function tick() {
  newBall(Rg);
  renderPlayer();
  setTimeout(tick, 5);
}
tick();",2
65110339,"import React from ""react"";
import ""./styles.css"";
import {
  Button,
  Container,
  CssBaseline,
  Grid,
  TextField,
  Typography
} from ""@material-ui/core"";
import { BrowserRouter, Route, Switch, useParams } from ""react-router-dom"";

const BasicTextFields = () => {
  const { rowId } = useParams();
  const testVar = 55;

  const selectedOfficeListRow = [{ id: 1 }, { id: 2 }].find(
    (i) => i.id === parseInt(rowId)
  );

  const handleSubmit = (event) => {
    console.log(rowId, testVar);
    event.preventDefault();
  };

  return (
    <Container component=""main"" maxWidth=""sm"">
      <CssBaseline />
      <div>
        <Typography component=""h1"" variant=""h5"">
          Sign up
        </Typography>
        <form noValidate onSubmit={handleSubmit}>
          <Grid container spacing={2}>
            <Grid item xs={12}>
              <TextField
                autoComplete=""fname""
                name=""firstName""
                variant=""outlined""
                required
                fullWidth
                id=""firstName""
                label=""First Name""
                autoFocus
                defaultValue={selectedOfficeListRow.town}
              />
            </Grid>
          </Grid>
          <Button type=""submit"" fullWidth variant=""contained"" color=""primary"">
            Sign Up
          </Button>
        </form>
      </div>
    </Container>
  );
};

export default function App() {
  return (
    <div className=""App"">
      <h1>Hello CodeSandbox</h1>
      <h2>Start editing to see some magic happen!</h2>
      <BrowserRouter>
        <Switch>
          <Route path=""/:rowId"" component={BasicTextFields} />
        </Switch>
      </BrowserRouter>
    </div>
  );
}

",2
65090951,"const matchesValues = ( array ) => {
  return array.reduce((previousValue, currentValue, currentIndex) => {
    if (currentIndex === 0 || (array[currentIndex - 1] + currentValue) === 10) {
      previousValue.push(currentValue);
    }

    return previousValue;
  }, []);
};

console.log(matchesValues([2,8,5,5,5,6]));",2
65141001,"const SECOND_IN_MS = 1000;
const HOUR_IN_MS = 1000 * 60 * 60;

const addTime = (date, time) => new Date(date.getTime() + time);

const Clock = () => {
  const [timeDate, setTimeDate] = useState(addTime(new Date(), SECOND_IN_MS));

  const updateTimeInfo = (addedTime) => {
    setTimeDate((timeDate) => addTime(timeDate, addedTime));
    //other info omitted, won't affect the code
  };

  useEffect(() => {
    const tickClock = setInterval(() => {
      updateTimeInfo(SECOND_IN_MS);
    }, SECOND_IN_MS);

    return () => clearInterval(tickClock);
  }, []);

  return (
    <>
      <span>
        {timeDate.toLocaleTimeString([], {
          hour: ""2-digit"",
          hour12: true,
          minute: ""2-digit"",
          second: ""2-digit""
        })}
      </span>
      <button type=""button"" onClick={() => updateTimeInfo(HOUR_IN_MS)}>
        +1 hour
      </button>
      <button type=""button"" onClick={() => updateTimeInfo(-HOUR_IN_MS)}>
        -1 hour
      </button>
    </>
  );
};
",2
65084475,"function changeStyle() {
  const elem = document.getElementById(""elem"");
  const logs = document.getElementById(""logs"");
  elem.style.backgroundColor = ""red"";
  elem.style.borderRadius = ""30px"";

  elem.ontransitionend = (e) => {
    if (e.propertyName === ""border-bottom-right-radius"") {
      logs.insertAdjacentText(""beforeend"", ""transition ended"");
    }
  }
}",2
65088860,"class Navbar extends Component {
  constructor() {
    super(); // super allows you to access parent class's methods and allows us to use ""this."" in constructor().
    this.state = {
      clicked: false,
      scrolled: false,
    };
    // Note here too these bindings are necessary to make `this` work in the callback
    // In general, we use binding whenever we use ""setState"" when handling an event
    this.handleSroll = this.handleScroll.bind(this);
    this.handleClick = this.handleClick.bind(this);
  }

  handleScroll = () => {
    const offset = window.scrollY;
    if (offset > 200) {
      this.setState({ scrolled: !this.state.scrolled });
    }
  };

  handleClick = () => {
    this.setState({ clicked: !this.state.clicked });
  };

  render() {
    return (
      <div onScroll={this.handleScroll}>
        {/* Note here this.scroll.scrolled changes to this.state.scrolled */}
        <nav
          className={this.state.scrolled ? ""NavbarItems"" : ""NavbarItems Scroll""}
        >
          <h1 className=""navbar-logo"">
            React <i className=""fab fa-react""></i>
          </h1>
          <div className=""menu-icon"" onClick={this.handleClick}>
            <i
              className={this.state.clicked ? ""fas fa-times"" : ""fas fa-bars""}
            ></i>
          </div>
          <ul className={this.state.clicked ? ""nav-menu active"" : ""nav-menu""}>
            {MenuItems.map((items, index) => {
              return (
                <li key={index}>
                  <a className={items.cName} href={items.url}>
                    {items.title}
                  </a>
                </li>
              );
            })}
          </ul>
          <Button> Contact US </Button>
        </nav>
      </div>
    );
  }
}

export default Navbar;
",2
65120556,"const allData = [];
for (let i = 0; i < allDetails.length; i++) {
    const detail = allDetails[i];
    const cells = [];
    for (let j = 0; j < baseObj.cells.length; j++) {
        const cell = {...baseObj.cells[j]};
        switch (cell.key) {
            case 'id':
                cell.value = detail.id;
                break;
            case 'name':
                cell.value = detail.name;
                break;
        }
        cells.push(cell)
    }
    const row = {objKey: detail.objKey, index: i + 1, cells};
    allData.push(row);
}
",2
65139755,"a {
  text-decoration: none;
  color: black;
}

a div {
  border: 1px solid black;
  width: min-content;
  white-space: nowrap;
  padding: 5px;
}
a {
  text-decoration: none;
  color: black;
}

a div {
  border: 1px solid black;
  width: min-content;
  white-space: nowrap;
  padding: 5px;
}

a:hover div {
  background-color: red;
}
<a class=""hoverMe"" href="""">
  <div class=""somediv1"">
    <div class=""somediv2"">
      <div class=""somediv3"">
        <button class=""changeColor"">Button 1</button>
      </div>
    </div>
  </div>
</a>


<a class=""hoverMe"" href="""">
  <div class=""somediv1"">
    <div class=""somediv2"">
      <div class=""somediv3"">
        <button class=""changeColor"">Button 2</button>
      </div>
    </div>
  </div>
</a>",2
65090923,"import { createStore } from 'vuex';
import axios from 'axios';
export const store = createStore({
    state: {
        todos: []
    },
    getters: {
        todos(state) {
            return state.todos
        }
    },
    mutations: {
        FILL_ITEMS(state, payload) {
            state.todos = payload
        }
    },
    actions: {
        fillItems({ commit }) {
            axios
                .get(""https://jsonplaceholder.typicode.com/todos"")
                .then(res => commit('FILL_ITEMS', res.data))
        }
    }
})
",2
65139355,"let position = 0;
let h3d;
function onfilechange(evt) {
    const selFile = evt.target.files[0];
    const reader = new FileReader();
    reader.onloadend = function (e) {
        h3d = new DataView(e.target.result);
        while (position < h3d.byteLength) {
            if (isOpenBracket(h3d.getUint8(position++))) {
                // we are looking to see if we are starting a closing tag
                // don't increment position here - we just want to peek
                if (isSlash(h3d.getUint8(position))) {
                    while (!isCloseBracket(h3d.getUint8(position++))) {
                        // we don't need the closing tag so we will skip over it
                        // just read forward to the closing braket
                        // after this completes the 'position' will be on the byte representing the closing tag
                    }
                    // go back to the outer while loop
                    continue;
                }
                let tag = readTag(h3d, position);
                switch (tag) {
                    case 'PONTOS':
                    case 'POINTS':
                        const points = readPoints();
                    case 'FACES':
                        const faces = readFaces();
                     
                    // add other tags you want to parse

                }
            }
        }
    };
    reader.readAsArrayBuffer(selFile);
}

document.getElementById('file').addEventListener('change', onfilechange);

function readTag() {
    const tag = [];
    // start reading tag
    // read until we find the closing bracket
    // after this completes the 'position' will be on the byte representing the closing tag
    while (!isCloseBracket(val = h3d.getUint8(position++))) {
        tag.push(val);
    }
    return String.fromCodePoint(...tag);
}

function readPoints() {
    const points = {}; // or use a Map
    // do this until we hit the openning bracket of the closing tag
    while (!isOpenBracket(val = h3d.getUint8(position++))) {
    // the points are an upper case letter followed by 3 - 8 byte numbers
    // so if we hit an uppercase letter read the next 3 - 8 byte sequences as numbers
        if (isChar(val)) {
            let arr = [];
            // we need to read these number as LittleEndian because that is how they are in the file
            arr.push(h3d.getFloat64(position, true));
            position += 8;
            arr.push(h3d.getFloat64(position, true));
            position += 8;
            arr.push(h3d.getFloat64(position, true));
            position += 8;

            points[String.fromCodePoint(val)] = arr;
        }
    }
    return points;
}

function readFaces() {
    // don't know what to do here because I don't know what the format of this data is.
}
// these functions check Ascii values - no need to covert them to strings
function isWhitesapce(value) {
    return value === 32 ||
        value === 9 ||
        value === 10 ||
        value === 11 ||
        value === 12 ||
        value === 13
}

function isOpenBracket(value) {
    return value === 60;
}
function isCloseBracket(value) {
    return value === 62;
}
function isSlash(value) {
    return value === 47;
}
function isChar(value) {
// upper case letters
    return value >= 41 && value <= 90;
}
",2
65096079,"switch (sort) {
    case 'color':
    case 'type':
        newShirtArray = shirts.sort(/* ... */);
        break;

    case 'size':
        newShirtArray = shirts.sort(/* ... */);
        break;
}

case 'color':
case 'type':
    newShirtArray = shirts.sort((s1, s2) => {
        if (s1[sort] > s2[sort]) {
            return 1;
        } else if (s1[sort] < s2[sort]) {
            return -1;
        } else {
           return 0;
        }
    });
",2
65096038,"const minInterval = 5000;       // 5 seconds (for example)
let lastResult = null;          // Last result provided
let nextAvailable = Date.now(); // When the next can be provided
function onceEvery() {
    const now = Date.now();
    if (now < nextAvailable) {
        return lastResult;
    }
    lastResult = /*...calculate result...*/;
    nextAvailable = now + minInterval;
    return lastResult;
}

const minInterval = 5000;       // 5 seconds (for example)
let lastResult = null;          // Last result provided
let nextAvailable = Date.now(); // When the next can be provided
function onceEvery() {
    const now = Date.now();
    if (now < nextAvailable) {
        console.log(Date.now(), ""Too soon, returning last value:"", lastResult);
        return lastResult;
    }
    lastResult = (lastResult || 0) + 1;
    nextAvailable = now + minInterval;
    console.log(Date.now(), ""Calculated new value:"", lastResult);
    return lastResult;
}

// Call it every second or so
setInterval(onceEvery, 1000);",2
65143295,"const [data, setData] = useState('');

const storeData = async (value) => {
  try {
    setData(value);
    await AsyncStorage.setItem('locatie', value);
  } catch (e) {
    console.log(e);
  }
};

const getInfo = async () => {
  const res = await AsyncStorage.getItem('locatie');
  setData(res);
};

useEffect(() => {
  getInfo();
}, []);
",2
65104222,"import asyncio as aio

async main():
    ev = aio.Event()

    def cb(ackdata):
       print(1)
       print(2)
       ev.set()

    await socketio.emit(""eventname"",data,callback=cb)
    await ev.wait()
    print(3)
",2
65141051,"const fetch = require('node-fetch');
var FormData = require('form-data');
let fs = require('fs');
let file = fs.createReadStream('C:/Users/marco/Pictures/programming/Cattura.png');
var formData = new FormData();
formData.append('file', file );
formData.append('email', 'test@test.com' );

// @ts-ignore
fetch('https://srv-store6.gofile.io/uploadFile', {
    method: 'POST',
    body: formData
})
.then(function(res) {
    return res.json();
}).then(function(json) {
    console.log(json);
});
",2
65129619,"var countDate = new Date(""Jan 01, 2021 00:00:00"").getTime();

function newYear() {
  var now = new Date().getTime();
  gap = countDate - now;

  var second = 1000;
  var minute = second * 60;
  var hour = minute * 60;
  var day = hour * 24;

  var d = Math.floor(gap / day);
  var h = Math.floor((gap % day) / hour);
  var m = Math.floor((gap % hour) / minute);
  var s = Math.floor((gap % minute) / second);

  var dayDivs = document.querySelectorAll("".day"");
  var hourDivs = document.querySelectorAll("".hour"");
  var minuteDivs = document.querySelectorAll("".minute"");
  var secondDivs = document.querySelectorAll("".second"");

  for (let i = 0; i < dayDivs.length; i++) {
    dayDivs[i].innerText = d;
    hourDivs[i].innerText = h;
    minuteDivs[i].innerText = m;
    secondDivs[i].innerText = s;
  }
}

setInterval(function() {
  newYear();
}, 1000);
.countdown {
  display: flex;
  justify-content: center;
}

.countdown .separator {
  font-weight: 400;
}

.countdown div {
  position: relative;
  width: 100px;
  height: 100px;
  line-height: 100px;
  text-align: center;
  color: #45deb0;
  margin: 0 -15px;
  font-size: 3em;
  font-weight: 500;
}

.countdown div:before {
  content: attr(data-time);
  position: absolute;
  bottom: -10px;
  left: 0;
  width: 100%;
  height: 35px;
  color: #45deb0;
  font-size: 0.35em;
  line-height: 35px;
  font-weight: 300;
}
<div class=""countdown"">
  <div class=""day"" data-time=""Dagen"">na</div>
  <div class=""separator""><span>:</span></div>
  <div class=""hour"" data-time=""Uren"">na</div>
  <div class=""separator""><span>:</span></div>
  <div class=""minute"" data-time=""Uren"">na</div>
  <div class=""separator""><span>:</span></div>
  <div class=""second"" data-time=""Seconden"">na</div>
</div>


<p>How can I make the second countdown widget(the one in bottom) work with same codes?</p>

<div class=""countdown"">
  <div class=""day"" data-time=""Day"">na</div>
  <div class=""separator""><span>:</span></div>
  <div class=""hour"" data-time=""Hour"">na</div>
  <div class=""separator""><span>:</span></div>
  <div class=""minute"" data-time=""Minute"">na</div>
  <div class=""separator""><span>:</span></div>
  <div class=""second"" data-time=""Second"">na</div>
</div>",3
65116557,"function CurrentExample() {
    return (
        <form onSubmit={(event) => {event.preventDefault(); console.log(""form submit"")}}>
            <input type=""text""/>

            <button onClick={() => console.log(""button click"")}>Click</button>
        </form>
    )
}

const root = document.querySelector(""#root"");
ReactDOM.render(<CurrentExample/>, root);
function FixedExample() {
    return (
        <form onSubmit={(event) => {event.preventDefault(); console.log(""form submit"")}}>
            <input type=""text""/>

            <button type=""button"" onClick={() => console.log(""button click"")}>Click</button>
        </form>
    )
}

const root = document.querySelector(""#root"");
ReactDOM.render(<FixedExample/>, root);",3
65097693,"const transform = (fn) => (obj) =>
  Array.isArray (obj)
    ? obj .map (transform (fn))
  : Object (obj) === obj
    ? Object .fromEntries (Object .entries (obj) 
        .map (([k, v]) => [k, transform (fn) (v)])
      )
  : fn (obj)

const hashObj = transform ((n) => sha256 (String (n)))

const meow = {big: 20, baz: {foo: {cat: 3, bar: 5, qux: [1, 2, 3]}}};
               // added to demonstrate arrays --------^

console .log (hashObj (meow))",3
65122779,"class Complex {
    constructor(real, imaginary) {
        this.real = real;
        this.imaginary = imaginary;
    }
    toString() {
        return this.real + "" + "" + this.imaginary + ""*i"";
    }
}

const z = new Complex(1, 1);
console.log(String(z));",3
65136018,".eqi-container {
  border: 10px solid black;
  display: flex;
  justify-content: space-between;
}

.eqi-container div {
  width: 50px;
  height: 50px;
  background: white;
  border: 10px solid red;
}
.eqi-container div.red {
  background:red;
}",3
65086435,"const people = [
  {
    name: ""Jim"",
    color: ""blue"",
    gender: ""male""
  },
  {
    name: ""Susan"",
    color: ""green"",
    gender: ""female""
  },
  {
    name: ""Sam"",
    color: ""blue"",
    gender: ""male""
  },
  {
    name: ""Eddie"",
    color: ""green"",
    gender: ""male""
  },
  {
    name: ""Eva"",
    color: ""blue"",
    gender: ""female""
  }
];



const deepNest = (arr, [first, ...rest]) => {
  let output = {};
  if (first) {
    let options = [...arr.reduce((set, val) => set.add(val[first]), new Set())].sort(); // Get the options (Set() is a built in thing to remove duplicates), and the sort them alphabetically
    for (let option of options) {
      let val = arr.filter((val) => val[first] === option); // Get the values that have the same value for the option for the query
      output[option] = deepNest(val, rest); // Recursion
    }
  } else {
    output = arr;
  }
  return output;
}

display(deepNest(people, [""gender"", ""color""]), [""gender"", ""color""]);
display(deepNest(people, [""color"", ""gender""]), [""color"", ""gender""]);
display(deepNest(people, [""color"", ""name"", ""gender""]), [""color"", ""name"", ""gender""]);

// My own custom display function, since console.log() makes it look wack
function display(json, query) {
  const div = document.createElement(""div"");
  const h2 = document.createElement(""h2"");
  h2.innerText = `[""${query.join(""\"", \"""")}""]`;
  const pre = document.createElement(""pre"");
  pre.innerText = JSON.stringify(json, null, 2);
  
  div.appendChild(h2);
  div.appendChild(pre);
  
  document.querySelector(""body"").appendChild(div);
}
html,
body {
  background: whitesmoke;
}

pre {
  color: black;
  background: white;
  border: 2px solid black;
  border-radius: 1rem;
  padding: 1rem;
}",3
65143411,"const resolveIcon = (a) => {
    if (a[6] === 3) {
        return a[11];
    }
    return a[12];
}

var marker = L.marker(new L.LatLng(a[9], a[8]), {
   title: title,
   icon: resolveIcon(a),
});
",3
65160917,"const input = [
  'ecl:hzl byr:1926 iyr:2010,pid:221225902 cid:61 hgt:186cm eyr:2021 hcl:#7d3b0c',
  'hcl:#efcc98 hgt:178 pid:433543520,eyr:2020 byr:1926,ecl:blu cid:92,iyr:2010',
  'iyr:2018,eyr:2026,byr:1946 ecl:brn,hcl:#b6652a hgt:158cm,pid:822320101'
]

const output = input.map((string) => {  // for each string in array
  const pairs = string.split(/[\ ,]/);  // split by space or comma
  const object = {};                    // create an object
  for (pair of pairs) {                 // for each pair in string
    const parts = pair.split("":"");      // split by colon
    if (parts.length == 2) {            // if you get 2 parts after splitting
      object[parts[0]] = parts[1];      // use the first part as a key and the second as a value
    }
  }
  return object;
});

console.log(output);",3
65087068,"<!DOCTYPE html>
<html>
<head>
    <script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js""></script>
    <link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"">
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js""></script>
    <script src=""https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""></script>
    <script src=""https://unpkg.com/libphonenumber-js@^1.7.6/bundle/libphonenumber-min.js""></script>
</head>

<body>
    <label for=""inputContactNumber"">Contact Number</label>
        <div class=""input-group mb-3"">
            <div class=""input-group-prepend"">

        
            <select class=""select-country"" class=""btn contact-btn dropdown-toggle"">
            </select>
        </div>
        <input class=""input-phone phone-format"" class=""form-control phone-format"" type=""text"" name=""contactNo"" placeholder=""Enter contact number"" required//>
    </div>


<script type=""text/javascript"">

    const countries = libphonenumber.getCountries();
    const optionList = countries.map( country => `<option>${country}</option>` );
    $("".select-country"").html( optionList );

    $("".phone-format"").keyup(function () {
        const val_old = $(this).val();
        const newString = new libphonenumber.AsYouType($("".select-country"").val()).input(val_old);
        $(this).focus().val(newString);
    });
</script>


</body>
</html>",3
65103667,"<html>

<head>
    <title>
        Change Css
    </title>
    <script lang=""javascript"">
        function colorChanger() {
            var len = document.getElementById(""string"").value.length;
            if (len < 50) {
                swapStyleSheet(""first_50.css"");
            } else if (len > 50 && len < 100) {
                swapStyleSheet(""second_100.css"");
            }
        }

        function swapStyleSheet(strName) {
            document.getElementById(""cssChanger"").href = strName;
        }
    </script>
    <link href=""first_50.css"" id=""cssChanger"" />
</head>

<body>
    <input type=""text"" id=""string"" value=""""></input>
    <input type=""button"" id='style1' value=""Change Css"" onclick=""javascritpt:colorChanger();"">
</body>

</html> ````
",3
65156238,"    const tableLayer = new Konva.Layer();
    
    const scale = 1.0; // position scale factor
    
    const mockData = [
        {
            label: ""45"",
            shape: ""circle"",
            x: 100,
            y: 150,
            w: 100,
            h: 100,
            r: 0
        },
        {
            label: ""46"",
            shape: ""rect"",
            x: 200,
            y: 170,
            w: 150,
            h: 100,
            r: -30
        },
        {
            label: ""47"",
            shape: ""rect"",
            x: 70,
            y: 200,
            w: 50,
            h: 100,
            r: 15
        },
        {
            label: ""48"",
            shape: ""ellipse"",
            x: 400,
            y: 300,
            w: 250,
            h: 150,
            r: 30
        }
    ];


    function createShapeElement( data ) {
        // Create container group
        let element = new Konva.Group( {
            x: data.x * scale,
            y: data.y * scale,
            draggable: true,
            listening: true,
        } );

        // Create background shape
        let shape;
        switch ( data.shape ) {
            case ""circle"": // fall-through
            case ""ellipse"": // fall-through
            case ""longellipse"":
                shape = new Konva.Ellipse( {
                    x: 0,
                    y: 0,
                    radiusX: data.w * 0.5,
                    radiusY: data.h * 0.5,
                    rotation: data.r,
                    fill: ""gray"",
                    stroke: ""black"",
                    strokeWidth: 4,
                    draggable: false,
                    listening: true
                } );
                break;

            default:
                shape = new Konva.Rect( {
                    x: 0,
                    y: 0,
                    offsetX: data.w * 0.5,
                    offsetY: data.h * 0.5,
                    width: data.w,
                    height: data.h,
                    rotation: data.r,
                    fill: ""gray"",
                    stroke: ""black"",
                    strokeWidth: 4,
                    draggable: false,
                    listening: true
                } );
                break;
        } // End switch

        // Create label
        let label = new Konva.Text( {
            x: data.w * -0.5,
            y: data.h * -0.5,
            width: data.w,
            height: data.h,
            text: data.label,
            fontSize: 24,
            fill: ""black"",
            align: ""center"",
            verticalAlign: ""middle"",
            draggable: false,
            listening: false
        } );

        element.add( shape, label );

        return element;
    }


    // Loop your data and call the creation method for each data item.
    mockData.forEach( itemData => {
        tableLayer.add( createShapeElement( itemData ) );
    } );
",3
65155082,"<!DOCTYPE html>
<html lang=""en"">

<head>
  <meta charset=""UTF-8"">
  <title>Video Speed Scrubber</title>
  <style>
    body {
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      background: #4C4C4C url('https://unsplash.it/1500/900?image=1021');
      background-size: cover;
      font-family: sans-serif;
    }
    
    .wrapper {
      width: 850px;
      display: flex;
    }
    
    video {
      box-shadow: 0 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .speed {
      background: #efefef;
      flex: 1;
      display: flex;
      align-items: flex-start;
      margin: 10px;
      border-radius: 50px;
      box-shadow: 0 0 1px 3px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }
    
    .speed-bar {
      width: 100%;
      background: linear-gradient(-170deg, #2376ae 0%, #c16ecf 100%);
      text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.2);
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 2px;
      color: white;
      height: 16.3%;
    }
  </style>
</head>

<body>

  <div class=""wrapper"">
    <video class=""flex"" width=""765"" height=""430"" src=""http://clips.vorwaerts-gmbh.de/VfE_html5.mp4"" loop controls></video>
    <div class=""speed"">
      <div class=""speed-bar"">1×</div>
    </div>
  </div>


</body>

</html>",3
65098077,"redTimeout = () => {
  const timeoutId = setTimeout(() => {
    this.props.redBoxScore();
    this.setState({
      overlayContainer: 'none'
    });

  }, 5000);
  this.setState({ timeoutId });
}
handleTerminate = () => {
  clearTimeout(this.state.timeoutId);
}
",3
65122083,"let site_select = document.getElementById('sites');
let contact_select = document.getElementById('client_contact');
let client_select = document.getElementById('client');

const fetchClientSites = (client) => {
  return fetch('/client-sites/' + client)
    .then(response => response.json())
    .then(function(data) {
      let optionHTML = '';

      for (let csite of data.client_sites) {
        optionHTML += '<option value=""' + csite.id + '"">' + csite.name + '</option>';
      }

      site_select.innerHTML = optionHTML;
    });
};

const fetchContacts = (client) => {
  return fetch('/contacts/' + client)
    .then(response => response.json())
    .then(function(data) {
      let optionHTML = '';

      for (let con of data.contacts) {
        optionHTML += '<option value=""' + con.id + '"">' + con.name + '</option>';
      }

      contact_select.innerHTML = optionHTML;
    });
};

client_select.addEventListener('change', () => {
  const client = client_select.value;

  Promise.all(
    fetchClientSites(client),
    fetchContacts(client),
  );
});

",3
65097949,"var h = window.innerHeight;
var w = window.innerWidth;

function create() {
  var boxPosition = {
    left: Math.random() * w,
    top: Math.random() * h
  };
  
  box = document.querySelector(""#box"")
  
  if(box)box.remove();

  document.write(
    '<div id=""box"" style=""width: 64px; height:64px;background-color:blue; left: ' +
      boxPosition.left +
      ""px; top: "" +
      boxPosition.top +
      'px;position: absolute""></div>'
  );
}

create();
setInterval(create, 5000);",3
65117779,"const btn = document.querySelector('#START')

const randomFunc = [
  multiplication,
  division,
  addition,
  subtraction,
]

btn.addEventListener(
  'click',
  function() {
    randomFunc[Math.floor(Math.random() * randomFunc.length)]();
  }
)

function multiplication() {
  let num1 = Math.floor(Math.random() * 13);
  let num2 = Math.floor(Math.random() * 13);
  let problemResult = num1 * num2;
  console.log(num1, '*', num2, '=', problemResult);
  document.getElementById('mathProblem').innerHTML = (`${num1} * ${num2} =`);
}

function division() {
  let num1 = Math.floor(Math.random() * 13);
  let num2 = Math.floor(Math.random() * 12) + 1;
  let problemResult = (num2 * num1) / num2;
  console.log(num1, '/', num2, '=', problemResult);
  document.getElementById('mathProblem').innerHTML = (`${num1} / ${num2} =`);
}

function addition() {
  let num1 = Math.floor(Math.random() * 13);
  let num2 = Math.floor(Math.random() * 13);
  let problemResult = num1 + num2;
  console.log(num1, '+', num2, '=', problemResult);
  document.getElementById('mathProblem').innerHTML = (`${num1} + ${num2} =`);
}

function subtraction() {
  let num1 = Math.floor(Math.random() * 13);
  let num2 = Math.floor(Math.random() * 13);
  let numList = [num1, num2];
  numList.sort(function(a, b) {
    return b - a
  });
  let problemResult = numList[0] - numList[1];
  console.log(numList[0], '-', numList[1], '=', problemResult);
  document.getElementById('mathProblem').innerHTML =
    (`${numList[0]} - ${numList[1]} =`);
}",3
65142368,"const shelf = [{
  ""categoryPrice"": ""2"",
  ""categoryTitle"": ""Flyer"",
  ""articleList"": [{
    ""id"": ""1"",
    ""articleTitle"": ""Green"",
  }, {
    ""id"": ""2"",
    ""articleTitle"": ""Blue"",
  }],
}, {
  ""categoryPrice"": ""3"",
  ""categoryTitle"": ""Post card"",
  ""articleList"": [{
    ""id"": ""3"",
    ""articleTitle"": ""Purple""
  }, {
    ""id"": ""4"",
    ""articleTitle"": ""Yellow"",
  }]
}]

const findItem = function(shelves, id) {
  return shelves.flatMap((shelf) => shelf.articleList).find((article) => article.id == id) || null;
}

console.log(findItem(shelf, 1));
console.log(findItem(shelf, 3));",3
65131392,"//calculation strategies
class AddStrategy {
  doMaths(a, b) {
    return a + b;
  }
}

class MultiplyByConstantStrategy {
  constructor(x) {
    this.x = x;
  }

  doMaths(a, b) {
    return (a + b) * this.x;
  }
}

//display strategies
class ConsoleDisplayStrategy {
  show(num) {
    console.log(num.toFixed(2))
  }
}

class HTMLDisplayStrategy {
  constructor(elementSelector) {
    this.inputElement = document.querySelector(elementSelector);
  }

  show(num) {
    this.inputElement.value = num;
  }
}

//calculate class
class Calculate {
  constructor(operationHandler, displayHandler) {
    this.operationHandler = operationHandler;
    this.displayHandler = displayHandler;
  }

  calculate(a, b) {
    const result = this.operationHandler.doMaths(a, b);
    this.displayHandler.show(result);
  }
}


/*     usage     */

//calculate the total for a bill + tip
const tip = new Calculate(
  new MultiplyByConstantStrategy(1.15), 
  new HTMLDisplayStrategy(""#totalWithTip"")
);
document.querySelector(""#billTotal"")
  .addEventListener(""click"", () => {
    const coffee = Number(document.querySelector(""#coffeePrice"").value);
    const bagel = Number(document.querySelector(""#bagelPrice"").value);
    
    tip.calculate(coffee, bagel);
  });
  
//just display a calculation on the page
const showAdd = new Calculate(
  new AddStrategy(),
  new HTMLDisplayStrategy(""#addResult"")
);
showAdd.calculate(2, 8);


//print a sum
const printAdd = new Calculate(
  new AddStrategy(),
  new ConsoleDisplayStrategy()
);

document.querySelector(""#printSum"")
  .addEventListener(""click"", () => {
    const a = Number(document.querySelector(""#a"").value);
    const b = Number(document.querySelector(""#b"").value);
    
    printAdd.calculate(a, b);
  });
<pre>MultiplyByConstantStrategy + HTMLDisplayStrategy</pre>

<div>
  <label for=""coffeePrice"">Price for coffee:</label>
  <input id=""coffeePrice"" value=""2"" type=""number"" />
</div>
<div>
  <label for=""bagelPrice"">Price for bagel:</label>
  <input id=""bagelPrice"" value=""8"" type=""number"" />
</div>
<div>
  <label for=""totalWithTip"">You owe:</label>
  <input id=""totalWithTip"" readonly/>
</div>
<button id=""billTotal"">Bill please!</button>

<hr/>

<pre>AddStrategy + HTMLDisplayStrategy</pre>

<div>
  <label for=""addResult"">2 + 8 = </label>
  <input id=""addResult"" readonly/>
</div>

<hr/>

<pre>AddStrategy + ConsoleDisplayStrategy</pre>

<div>
  <input id=""a"" value=""2"" type=""number"" />
  +
  <input id=""b"" value=""8"" type=""number"" />
</div>
<button id=""printSum"">print the sum</button>",3
65136063,"/// <reference types=""@cypress/fiddle"" />

const test = {
  html: `
    <p class=""text-lg""></p>
    <script>
      setTimeout(() => {
        const url = 'http://example/student/details.php?viewDetails=project&stdCount=1&sectionID=1&openHash=5fc8329a76e73&ajaxCall=true';
        window.fetch(url, { method: 'POST'});
      }, 1000);
    </script>
  `,
  test: `
  cy.intercept({
    method: 'POST',
    url: '/student/details.php',
    query: {
      viewDetails: 'project',   // whatever query parts you care about
      stdCount: '1',
      sectionID: '1'
    }
  }, {})                 // Added an empty stub here, as my url does not actually exist
  .as('getStudentTabDetails');
  cy.wait('@getStudentTabDetails')
  `
}

it('', () => {
  cy.runExample(test)
});
",3
65104785,"var requiredClass = document.getElementsByClassName(""tp-cu-po"");

// function for mouseover
function titlep(elem) {
  const aVal = document.getElementById('in02').textContent;
  const elemVal = elem.textContent.replace(/[^0-9]/g, '');
  elem.style=""font-weight: bold;color: #0064ff;""
  elem.title = Number(aVal) * Number(elemVal);
};

// function for mouseleave
function un_titlep(elem) {
  const aVal = document.getElementById('in02').textContent;
  const elemVal = elem.textContent.replace(/[^0-9]/g, '');
  elem.style=""font-weight: unser;color: black;"" // set this to whatever you want it to be
  
}

for(var j = 0; j < requiredClass.length; j++){
    // when you mouse over
    requiredClass[j].addEventListener(""mouseover"", function(){
        titlep(this);
    });
    // when you leave
    requiredClass[j].addEventListener(""mouseout"", function(){
        un_titlep(this);
    });
}
",3
65135796,".taskbox {
  width: 230px;
  padding: 15px;
  left: 100%;
  position: absolute;
  top: 25px;
  background-color: black;
  color: white;
  font-family: courier new;
  font-size: 20px;
  animation: slide-from-right .4s 2s forwards; /* x = 2s */
}

@keyframes slide-from-right {
  to {
    left: calc(100% - 230px - 30px - 25px);
    /* 100% = total width, 230px = element width, 30px = left and right padding, 25px = distance from right border */
  }
}",3
65116126,"let users=[{""firstName"":""John"", ""lastName"":""Doe""},
  {""firstName"":""Anna"", ""lastName"":""Smith""},
  {""firstName"":""Peter"", ""lastName"":""Jones""}];

const [selectedUser, setselectedUser] = useState(undefined);

setselectedUser({...users[0]}); // <-- I changed this

var a = selectedUser;
a.firstName = ""XYZ""
setselectedUser(a);
",3
65136145,"const current = [
{ studentName: 'Name', ItemNumber: 1, Score: 0 }, 
{ studentName: 'Name', ItemNumber: 2, Score: 1 }]

const map = current.reduce((map, { studentName, ItemNumber, ...props }) => {
  // collect by studentName
  return map.set(studentName, {
    ...(map.get(studentName) ?? {}), // merge any previously found entries
    ...Object.fromEntries(Object.entries(props).map(([ key, val ]) =>
      [ `Item${ItemNumber}${key}`, val ]))
  })
}, new Map())

const needed = Array.from(map, ([ studentName, data ]) => ({
  studentName,
  ...data
}))

console.info(needed)",3
65090674,"const data = [ 
{ fieldname: 'files0', originalname: 'Screenshot from 2020-05-23 01-52-30.png', },
{ fieldname: 'files0', originalname: 'Screenshot from 2020-05-22 08-44-05.png', },
{ fieldname: 'files1', originalname: 'Screenshot from 2020-05-30 11-36-42.png', },
{ fieldname: 'files1', originalname: 'Screenshot from 2020-05-30 11-36-36.png', },
{ fieldname: 'files1', originalname: 'Screenshot from 2020-05-30 11-36-31.png', }],
arr = data.reduce((acc, cur) => {
  const idx = cur.fieldname.replace(""files"",""""); // get 0, 1
  if (acc[idx]) acc[idx].push(cur); // if already there, just push
  else acc[idx] = [cur];            // otherwise initialise
  return acc;
},[]) 

console.log(arr)",3
65099671,"function add() {
  var input1 = parseInt(document.getElementById(""t1"").value);
  var input2 = parseInt(document.getElementById(""t2"").value);
  var result = input1 + input2;
  document.getElementById('add-result').textContent = result;
}

function divide() {
  var input1 = parseInt(document.getElementById(""t3"").value);
  var input2 = parseInt(document.getElementById(""t4"").value);
  var result = Math.floor(input1 / input2);
  var remainder = input1 % input2
  document.getElementById('divide-result').textContent = result;
  document.getElementById('divide-remainder').textContent = remainder;
}

function multiply() {
  var input1 = parseInt(document.getElementById(""t5"").value);
  var input2 = parseInt(document.getElementById(""t6"").value);
  var result = input1 * input2;
  document.getElementById('multiply-result').textContent = result;
}

function subtract() {
  var input1 = parseInt(document.getElementById(""t7"").value);
  var input2 = parseInt(document.getElementById(""t8"").value);
  var result = input1 - input2;
  document.getElementById('subtract-result').textContent = result;
}
<div>
  <h1>Addition</h1>
  <input type=""text"" id=""t1"" name=""t1""> +
  <input type=""text"" id=""t2"" name=""t2"">
  <input type=""button"" id=""add"" value=""="" onClick=""add();"">
  <span id=""add-result""></span>
</div>
<div>
  <h1>Subtraction</h1>
  <input type=""text"" id=""t7"" name=""t7""> -
  <input type=""text"" id=""t8"" name=""t8"">
  <input type=""button"" id=""subtract"" value=""="" onClick=""subtract();"">
  <span id=""subtract-result""></span>
</div>
<div>
  <h1>Multiplication</h1>
  <input type=""text"" id=""t5"" name=""t5""> *
  <input type=""text"" id=""t6"" name=""t6"">
  <input type=""button"" id=""multiply"" value=""="" onClick=""multiply();"">
  <span id=""multiply-result""></span>
</div>
<div>
  <h1>Division</h1>
  <input type=""text"" id=""t3"" name=""t3""> ÷
  <input type=""text"" id=""t4"" name=""t4"">
  <input type=""button"" id=""divide"" value=""="" onClick=""divide();"">
  <span id=""divide-result""></span> | 
  <span id=""divide-remainder""></span>
</div>
function add() {
  var input1 = parseInt(document.getElementById(""t1"").value);
  var input2 = parseInt(document.getElementById(""t2"").value);
  var result = input1 + input2;
  document.getElementById('add-result').innerHTML = `<i style=""color: blue"">${result}</i>`;
}

function divide() {
  var input1 = parseInt(document.getElementById(""t3"").value);
  var input2 = parseInt(document.getElementById(""t4"").value);
  var result = Math.floor(input1 / input2);
  var remainder = input1 % input2
  document.getElementById('divide-result').innerHTML = `<i style=""color: blue"">${result}</i>`;
  document.getElementById('divide-remainder').innerHTML = `<i style=""color: blue"">${remainder}</i>`;
}

function multiply() {
  var input1 = parseInt(document.getElementById(""t5"").value);
  var input2 = parseInt(document.getElementById(""t6"").value);
  var result = input1 * input2;
  document.getElementById('multiply-result').innerHTML = `<i style=""color: blue"">${result}</i>`;
}

function subtract() {
  var input1 = parseInt(document.getElementById(""t7"").value);
  var input2 = parseInt(document.getElementById(""t8"").value);
  var result = input1 - input2;
  document.getElementById('subtract-result').innerHTML = `<i style=""color: blue"">${result}</i>`;
}
<div>
  <h1>Addition</h1>
  <input type=""text"" id=""t1"" name=""t1""> +
  <input type=""text"" id=""t2"" name=""t2"">
  <input type=""button"" id=""add"" value=""="" onClick=""add();"">
  <span id=""add-result""></span>
</div>
<div>
  <h1>Subtraction</h1>
  <input type=""text"" id=""t7"" name=""t7""> -
  <input type=""text"" id=""t8"" name=""t8"">
  <input type=""button"" id=""subtract"" value=""="" onClick=""subtract();"">
  <span id=""subtract-result""></span>
</div>
<div>
  <h1>Multiplication</h1>
  <input type=""text"" id=""t5"" name=""t5""> *
  <input type=""text"" id=""t6"" name=""t6"">
  <input type=""button"" id=""multiply"" value=""="" onClick=""multiply();"">
  <span id=""multiply-result""></span>
</div>
<div>
  <h1>Division</h1>
  <input type=""text"" id=""t3"" name=""t3""> ÷
  <input type=""text"" id=""t4"" name=""t4"">
  <input type=""button"" id=""divide"" value=""="" onClick=""divide();"">
  <span id=""divide-result""></span> |
  <span id=""divide-remainder""></span>
</div>",3
65145259,"const snippets = [{
    id: 1,
    title: ""Loop through an array"",
    tags: [""array"", ""map"", ""foreach""]
},
{
    id: 2,
    title: ""Loop through another array"",
    tags: [""foo"", ""bar"", ""ham""]
}
];

ReactDOM.render(
  <div>
    {snippets.map(snippet => (
        <p key={snippet.id}>
          <div>
            <strong>{snippet.title}</strong>
          </div>
          
          {snippet.tags.map(tag => (
            <button>{tag}</button>
          ))}
        </p>
      ))}
  </div>,
  document.getElementById('root')
);",3
65087204,"{Searchfile.filter((ids) => user.favorite.includes(ids._id)).map(
  (item, index) => (
    <div
      className=""row-queue""
      key={index}
      // onClick={() => handleClick(item, index)}
    >
      <div className=""column1-queue"">{index + 1}</div>
      <div className=""column2-queue"">{item.title}</div>
      <div className=""column3-queue"">{item.singer}</div>
    </div>
  )
)}
",3
65093606,"$(function(){
  
    // Create a new circle once.
    var circle=$('<div class=""circle""></div>');
    var container=$('<div class=""container""></div>');
    
    // Retrieve the body and add on click parameter.
    var body = $('body');
    body.append(circle);
    body.append(container);
    body.click(function(e){
    
          // Move circle here.
          circle.css('top', e.pageY - 15);
          circle.css('left', e.pageX - 15)
          if (circle.css('display') == 'none')
            circle.css('display', 'block');
          
          // Move container here.
          container.css('top', e.pageY + 20);
          container.css('left', e.pageX - 15);
          if (container.css('display') == 'none') {
            container.css('display', 'block');
            container.click(function(e) {
              e.stopPropagation(); // Prevents moving circle when clicking on the container.
            })
          }
    })
  })
html, body {
  width: 100%;
  height: 100%;
  background-color: grey;
}

.circle {
  display: none;
  position: absolute;
  width: 30px;
  height: 30px;
  background-color: blue;
  border-radius: 20px;
}
.container {
  display: none;
  position: absolute;
  background: white;
  border: 1px solid black;
  height: 200px;
  width: 300px;
  border-radius: 20px;
}",3
65106445,"function filterFunction() {
  let isInputAvail = false;
  var input, filter, ul, li, a, i;
  input = document.getElementById(""myInput"");
  filter = input.value.toLowerCase();
  if (filter.length > 0) {
    document.getElementById(""myDropdown"").classList.add(""show"");
  } else {
    document.getElementById(""myDropdown"").classList.remove(""show"");
  }
  div = document.getElementById(""myDropdown"");
  a = div.getElementsByTagName(""a"");
  for (i = 0; i < a.length; i++) {
    txtValue = a[i].innerText;
    filter = filter.replace(/\s/g, '')
    txtValue = txtValue.replace(/\s/g, '')
    if (txtValue.toLowerCase().indexOf(filter) > -1) {
      isInputAvail = true;
      a[i].style.display = ""block"";
    } else {
      a[i].style.display = ""none"";
    }
  }
  if (!isInputAvail) {
    document.getElementById(""noMatches"").classList.add('show');
  } else {
    document.getElementById(""noMatches"").classList.remove('show');
  }
}
body {
  margin: 0;
}

* {
  box-sizing: border-box;
}

.s01 {
  min-height: 100vh;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
  justify-content: center;
  -ms-flex-align: center;
  align-items: center;
  font-family: 'Poppins', sans-serif;
  background: url(""../images/Search_001.png"");
  background-size: cover;
  background-position: center center;
  padding: 15px;
}

.div {
  display: none;
  background-color: #0000D6;
}

.dropbtn {
  padding: 16px;
  font-size: 16px;
  border: none;
  cursor: pointer;
  border-radius: 10px;
}

input {
  background: url(""images/search/searchicon.png"") top left no-repeat;
  padding-left: 25px;
}

#myInput {
  box-sizing: border-box;
  background-position: 14px 12px;
  background-repeat: no-repeat;
  color: #000000;
  font-size: 18px;
  font-family: Tahoma, Geneva, sans-serif;
  padding: 14px 20px 12px 45px;
  border: 3px solid #000000;
  border-radius: 10px;
  background-color: #C4C6C3;
}

#myInput:focus {
  outline: none;
  border-color: #171313;
  background-color: #FFFFFF;
  border: 5px solid #000000;
  color: #000000;
}

.dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-content {
  max-height: 215px;
  display: none;
  position: absolute; 
  width:100%;
  background-color: #A3A3A3;
  min-width: 230px;
  overflow-y: scroll;
  border: none;
  z-index: 1;
  border-radius: 10px;
}

.dropdown-content a {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

.dropdown a:hover {
  background-color: #ddd;
}

.show {
  display: block;
}
<div class=""s01"">

  <div class=""dropdown"">
    <input type=""text"" class=""dropbtn"" placeholder=""Search Here..."" id=""myInput"" onInput=""filterFunction()"">
    <div id=""myDropdown"" class=""dropdown-content"">
      <a href="""" target=""_parent"">Search 1</a>
      <a href="""" target=""_parent"">Search 2</a>
      <a href="""" target=""_parent"">Search 3</a>
      <a href="""" target=""_parent"">Search 1</a>
      <a href="""" target=""_parent"">Search 1</a>
      <a href="""" target=""_parent"">Search 5</a>
      <a href="""" target=""_parent"">Search 5</a>
      <a href="""" target=""_parent"">Search 5</a>
    </div>
    <div id=""noMatches"" class=""dropdown-content"">
      <a href="""" target=""_parent""><b>No Matches?</b> Perform custom search</a>
    </div>
  </div>
</div>",3
65107860,"const myArray = [{ 'a': {'x': ['Bob', 'Rob', 'Mike'], 'y': [4, 5, 6],'name': 'a' }},{'b': {'x': ['Kris', 'Elen', 'Hanna'],'y': [10, 11, 12],'name': 'b'}}];

const switchKey = (obj, key1, key2) => {
  const {[key1]: a, [key2]: b} = obj;
  //swap here
  return {...obj, [key1]: b, [key2]: a}
}

const switched = myArray.map(o => {
  let [key, value] = Object.entries(o)[0];
  return {[key] : switchKey(value, ""x"", ""y"")};
});
console.log(switched);",4
65156234,"const arr1 = [
  {id: 1, favorite: false}, 
  {id: 2, favorite: false}, 
  {id: 3, favorite: false}
];
const arr2 = [1, 3];

const res = arr1.map(e => 
  ({...e, favorite: arr2.includes(e.id)})
);

console.log(res);",4
65153608,"var x = 10;
var y = 7;
var destX = 5;
var destY = 5;
function simulate() {
    while (x !== destX && y !== destY) {
        move();
    }
    console.log(""arrived"")
}
function move() {
        if (x !== destX) {
            if (destY > y) {
                y = y + 1;
            } else {
                y = y - 1;
            }
        } else {
            if (destX > x) {
                x = x + 1;
            } else {
                x = x - 1;
            }
        }
}
simulate();
",4
65103995,"import Component from '@glimmer/component';
import { action } from '@ember/object';

export default class AuctionFormComponent extends Component {
    @action 
    selectProduct(event) {
        // This `updateProduct` has to be implemented in parent class 
        // which mutates the `auction` object.
        this.args.updateProduct(event.target.value); // -> `on` modifier will capture the native event
    }

    @action 
    save(auction) {
        auction.save();
    }
}
",4
65085060,"* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
html {
    scroll-behavior: smooth;
}
body {
    min-height: 200vh;
    background-color: #d7a4d9;
    overflow: hidden;
}
h3 {
    color: #3F69CA
}

 /* Preloader Code */ 

  .preload {
    position: fixed;
    top: 0;
    width: 100%;
    height: 100vh;
    background: #77b3d4;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: opacity 0.5 ease;
    z-index: 9999;
  }
  
  .cloud1,
  .cloud2,
  .cloud3{
    height: 100px;
    position: absolute;
    right: 0%;
    z-index: -1;
  }
  
  .cloud1 {
    top: 25%;
    transform: translate(100%, -25%);
    animation: clouds 3s ease infinite;
  }
  
  .cloud2 {
    top: 50%;
    transform: translate(100%, -50%);
    animation: clouds 3s ease infinite 2s;
  }
  
  .cloud3 {
    top: 75%;
    transform: translate(100%, -75%);
    animation: clouds 3s ease infinite 4s;
  }

  
  .airplane {
    height: 200px;
    animation: airplane 1s ease infinite alternate;
  }
  
  @keyframes airplane {
    from {
      transform: translateY(0px);
    }
    to {
      transform: translateY(50px);
    }
  }
  
  @keyframes clouds {
    from {
      right: 0%;
    }
    to {
      right: 130%;
    }
  }
  
  .preload .land {
    position: absolute;
    top: 75%;
    transform: translateY(-75%);
    color: white;
    font-size: 30px;
    font-family: sans-serif;
  }

/* Navbar */

header {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: 0.6s;
    padding: 40px 100px;
    z-index: 9990;
    font-family: ""Hind"";
}
header.sticky {
    padding: 5px 100px;
    background: #F5F5F5;
    font-family: ""Hind"";
}
header .logo {
    position: relative;
    font-weight: 700;
    color: #F5F5F5;
    text-decoration: none;
    font-size: 2em;
    text-transform: uppercase;
    letter-spacing: 2px;
    transition: 0.6s;
    font-family: ""Hind"";
}
header ul {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: ""Hind"";
}
header ul li {
    position: relative;
    list-style: none;
    font-family: ""Hind"";
}
header ul li a {
    position: relative;
    margin: 0 15px;
    text-decoration: none;
    color: #F5F5F5;
    letter-spacing: 2px;
    font-weight: 500px;
    transition: 0.6s;
    font-family: ""Hind"";
    font-size: 20px;
}
header ul li a:hover {
    text-decoration: underline;
    color: black;
}
header.sticky .logo, header.sticky ul li a {
    color: #000;
    font-family: ""Hind"";
}
.dropdown {
    position: relative;
    display: inline-block;
}
.dropdown-content {
    display: none;
    position: absolute;
    background-color: #f1f1f1;
    max-width: 100px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
}
.dropdown-content a {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
}
.dropdown:hover .dropdown-content {
    display: block;
}
.ddtext1 {
    position: relative;
    left: -5px;
}
.ddtext1:hover {
    color: #00B800;
}
.ddtext2 {
    position: relative;
    left: -15px;
}
.ddtext2:hover {
    color: #14adb3
}
.ddtext3 {
    position: relative;
    left: -20px;
}
.ddtext3:hover {
    color: #E0A800;
}
.information {
    background: linear-gradient( rgb(24, 23, 23, 0.4), rgb(24, 23, 23, 0.4)), url(""blackbg.jpg"");
    background-size: cover;
    height: 100vh;
}
.name {
    position: relative;
    top: 300px;
    right: 200px;
    text-align: center;
    color: #20A4F3;
    font-family: ""Hind"";
    animation: fadeIn ease 4s;
    font-size: 80px;
}
.text {
    position: relative;
    top: 300px;
    text-align: center;
    font-family: ""Hind"";
    text-transform: uppercase;
}
.text h1 {
    font-size: 50px;
    color: #222;
}
.text span {
    font-size: 50px;
    animation: light 2s linear infinite;
}
/* Carousel */

#slider {
    overflow: hidden;
}
#slider figure {
    position: relative;
    width: 500%;
    margin: 0;
    left: 0;
    animation: 25s slider infinite;
}
#slider figure img {
    width: 20%;
    float: left;
}
@keyframes slider {
    0% {
        left: 0;
    }
    20% {
        left: 0;
    }
    25% {
        left: -100%;
    }
    45% {
        left: -100%;
    }
    50% {
        left: -200%;
    }
    70% {
        left: -200%;
    }
    75% {
        left: -300%;
    }
    95% {
        left: -300%;
    }
    100% {
        left: -400%;
    }
}
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""></script>
<!DOCTYPE html>
<html>
  <head>
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width"">
    <title>Home</title>
    <link href=""style.css"" rel=""stylesheet"" type=""text/css"" />
    <link href=""https://fonts.googleapis.com/css2?family=Hind&display=swap"" rel=""stylesheet"">
  </head>
  <body>
   <div class = ""load"">
      <div class=""preload"">
        <img class=""airplane"" src=""https://uce0f26a244f3c0cca3e7d07a830.previews.dropboxusercontent.com/p/thumb/AA-n6na-kOCtw8Bb8oYMYS7ujTjaqw6NiVJNq9sN_9JhpI8IQpbBvBOqyHRHI_05vuXhm-wajT-mh3XDkby6-4ModecGbJfeDEhXSRXt964rcuz4HhhTPGfQb0WJEEQuL0UuRXmzMm57ErG0SqIdWwLad21j_AglpMM8xfsMhXC-NzLfAoH7O9xsXhpzshhB3dsWYG--obRcwjaCpRh7eDxmxvRrXfa86VS3cmyh0a69vAPc8C6GFSje2oYY-M7Qykor8-mgfLHjLk3V42CvKyhiawUJKzcLwiNkyAW_veON8JZ0iBOcAGlL9429_3TcjwPTJQpn2Vk64ZfTjtBtZhDgtki9HqYz7CUCYeMAZIaEAQ/p.png?size=178x178&size_mode=1"" alt=""airplane"" />
        <h3 class = ""land"">Landing on the website...</h3>
        <img src=""https://uced21f913a097d93229a4d305a6.previews.dropboxusercontent.com/p/thumb/AA-h9fXSjZiT_JeqBnoUIIjfqcAs8QJIGSX9cUfQv2MKpJvn4EEnaxZGTgfUHiP2sgqoFLtVMOddWJLpjovKwNycGuBsSTPvfVi4-rT4Vl7pI55sfCwYAwFhRpYTuDarv0cYMXvt_rqNuN5XO63h_Ko44v4vGPs0WNlD_UrD-59-5xSYd4ve5BGwwXqI8U1iOb1ieoqSRPsv6CZApkWlD4GERrmewKAwnubLsONTyT3SG60kHd490r9pBmHkjok6a4YD4fcviIMsFJl25THm7JmEYkK-LbMamygbnpPXOc_p3VX-WhkS7w1Pz97e5XqrpM9VoxXulwMZhRpDcun6-lHNO0J7ehREbwLJzjfluce3Cw/p.png?size=178x178&size_mode=1"" alt=""cloud1"" class=""cloud1"" />
        <img src=""https://uced21f913a097d93229a4d305a6.previews.dropboxusercontent.com/p/thumb/AA-h9fXSjZiT_JeqBnoUIIjfqcAs8QJIGSX9cUfQv2MKpJvn4EEnaxZGTgfUHiP2sgqoFLtVMOddWJLpjovKwNycGuBsSTPvfVi4-rT4Vl7pI55sfCwYAwFhRpYTuDarv0cYMXvt_rqNuN5XO63h_Ko44v4vGPs0WNlD_UrD-59-5xSYd4ve5BGwwXqI8U1iOb1ieoqSRPsv6CZApkWlD4GERrmewKAwnubLsONTyT3SG60kHd490r9pBmHkjok6a4YD4fcviIMsFJl25THm7JmEYkK-LbMamygbnpPXOc_p3VX-WhkS7w1Pz97e5XqrpM9VoxXulwMZhRpDcun6-lHNO0J7ehREbwLJzjfluce3Cw/p.png?size=178x178&size_mode=1"" alt=""cloud2"" class=""cloud2"" />
        <img src=""https://uced21f913a097d93229a4d305a6.previews.dropboxusercontent.com/p/thumb/AA-h9fXSjZiT_JeqBnoUIIjfqcAs8QJIGSX9cUfQv2MKpJvn4EEnaxZGTgfUHiP2sgqoFLtVMOddWJLpjovKwNycGuBsSTPvfVi4-rT4Vl7pI55sfCwYAwFhRpYTuDarv0cYMXvt_rqNuN5XO63h_Ko44v4vGPs0WNlD_UrD-59-5xSYd4ve5BGwwXqI8U1iOb1ieoqSRPsv6CZApkWlD4GERrmewKAwnubLsONTyT3SG60kHd490r9pBmHkjok6a4YD4fcviIMsFJl25THm7JmEYkK-LbMamygbnpPXOc_p3VX-WhkS7w1Pz97e5XqrpM9VoxXulwMZhRpDcun6-lHNO0J7ehREbwLJzjfluce3Cw/p.png?size=178x178&size_mode=1"" alt=""cloud3"" class=""cloud3"" />
      </div>
   </div>
    <!--Navbar-->
    <header>
      <a class="""" href=""#""></a>
      <ul>
        <li>
          <a href=""index.html"">Home</a>
        </li>
        <li>
          <div class=""dropdown"">
            <a class=""dropbtn"" href=""gallery.html"">Gallery</a>
            <div class=""dropdown-content"">
              <a class=""ddtext1"" href=""asia.html"">Asia</a> <a class=""ddtext2"" href=""europe.html"">Europe</a> <a class=""ddtext3"" href=""na.html"">America</a>
            </div>
          </div>
        </li>
        <li>
          <a href=""contact.html"">Contact</a>
        </li>
      </ul>
    </header>
    
  <!--Home Page-->
    <div id=""information"">
        <div id=""slider"">
    <figure>
      <img src=""https://c4.wallpaperflare.com/wallpaper/906/767/707/polygon-triangles-geometric-patterns-wallpaper-preview.jpg"">
      <img src=""https://c4.wallpaperflare.com/wallpaper/906/767/707/polygon-triangles-geometric-patterns-wallpaper-preview.jpg"">
      <img src=""https://c4.wallpaperflare.com/wallpaper/906/767/707/polygon-triangles-geometric-patterns-wallpaper-preview.jpg"">
      <img src=""https://c4.wallpaperflare.com/wallpaper/906/767/707/polygon-triangles-geometric-patterns-wallpaper-preview.jpg"">
      <img src=""https://c4.wallpaperflare.com/wallpaper/906/767/707/polygon-triangles-geometric-patterns-wallpaper-preview.jpg"">
    </figure>
  </div>
    </div>

    <script src=""script.js""></script>
  </body>
</html>",4
65103480,"<html>
<head>
    <style>

        .image1 {
            position: relative;
            border: 1px solid red;
        }

        .image2 {
            position: absolute;
            border: 1px solid green;
        }
    </style>
</head>
<body>
    <img class=""image2""  src=""https://via.placeholder.com/150"" onclick=""myFunction(this)"">
    <img class=""image2""  src=""https://via.placeholder.com/170"" onclick=""myFunction(this)"">
    <img class=""image2""  src=""https://via.placeholder.com/190"" onclick=""myFunction(this)"">
    <img class=""image2""  src=""https://via.placeholder.com/210"" onclick=""myFunction(this)"">
    <img class=""image1""  src=""https://via.placeholder.com/230"" onclick=""myFunction(this)"">
</body>
<script>
    function myFunction(img) {
        img.style.display = ""none"";
    }
</script>

</html>",4
65127376,"let umbrellaCount = ""1""
let siteStatus = """"
let servicesRendered = ""1""
let afterServiceStatus = undefined

const fields = {
  ""Umbrella Count"": umbrellaCount,
  ""Site Status"": siteStatus,
  ""Services Rendered"": servicesRendered,
  ""After Service Status"": afterServiceStatus
}

console.log(JSON.stringify(fields, null, 2))

var emptyFields = [];
Object.keys(fields).forEach((key) => {
  if (fields[key] === """" || fields[key] === undefined) {
    emptyFields.push(key);
  }
});

console.log(emptyFields)

if (!emptyFields.length) {
  console.log(true);
} else {
  console.log(false);
}",4
65140021,"const x1 = ['US', 'UK', 'China'];
const y1 = [1, 2, 3];
const name1 = 'CO2';

const x2 = ['US', 'UK', 'China'];
const y2 = [4, 5, 6];
const name2 = 'GHG';

const result = x1.map((country, index) => ({
  country,
  [name1]: y1[index],
  [name2]: y2[index]
}));

console.log(result);",4
65086828,"const tests = [
    {
        str: ""(Value1==6) and or not (Value2==0)?1:0"",
        expect: [""Value1"", ""Value2""]
    },
    {
        str: ""Value_1"",
        expect: [""Value_1""]
    },
    {
        str: ""(Value_1 * Value_2)"",
        expect: [""Value_1"", ""Value_2""]
    },
    {
        str: ""Value_Machine_Outcome==4?1:0"",
        expect: [""Value_Machine_Outcome""] // Note I put this in an array
    }
];

const regex = /(?!and|or|not)\b[A-Z]\w*/gi;
for (const {str, expect} of tests) {
    const result = str.match(regex);
    const good = result.length === expect.length && result.every((v, i) => v === expect[i]);
    console.log(JSON.stringify(result), good ? ""Ok"" : ""<== ERROR"");
}
const paragraph = '(Value1==6) and (Value2==0)?1:0';
const regex = /\(([^=]+)/g;
const found = [];
let match;
while (!!(match = regex.exec(paragraph))) {
    found.push(match[1]);
}

console.log(found);

// expected output: Array [""Value1"", ""Value2""]
const paragraph = '(Value_1==6) and (Value_2==0)?1:0';
const regex = /\(([^=]+)/g;
const found = [];
let match;
while (!!(match = regex.exec(paragraph))) {
    found.push(match[1]);
}

console.log(found);

// expected output: Array [""Value1"", ""Value2""]",4
65091855,"var totalSeconds = 0; // reset this to zero when you reset as below
var secondsLabel = document.getElementById(""seconds"");
var minutesLabel = document.getElementById(""minutes"");
document.getElementById(""reset"").addEventListener(""click"",resertTimer);

setInterval(setTime, 1000);

function setTime(){
    ++totalSeconds;
    secondsLabel.innerHTML = pad(totalSeconds%60);
    minutesLabel.innerHTML = pad(parseInt(totalSeconds/60));
}

function pad(val){
    var valString = val + """";
    if(valString.length < 2)
    {
        return ""0"" + valString;
    }
    else
    {
        return valString;
    }
}

// reset() function
function resertTimer(){
    document.getElementById(""minutes"").innerHTML = ""00"";
    document.getElementById(""seconds"").innerHTML = ""00"";
    totalSeconds = 0
}",4
65101768,"// Create end vectors
var v1 = new THREE.Vector3(1, 3, 5);
var v2 = new THREE.Vector3(7, 8, 10);

// Get midpoint
var mid = new THREE.Vector3();
mid.addVectors(v1, v2);
mid.multiplyScalar(0.5);

// Nest child object inside parent
var parent = new THREE.Object3D();
var child = new THREE.Object3D();
parent.add(child);

// Set child position to any point in the XY plane with radius = 1
// This is a point in your ""disc""
child.position.set(0, 1, 0);

// Move parent to midpoint
parent.position.copy(mid);

// Rotate parent to look towards end of the line
// This makes the ""disc"" perpendicular to the line
parent.lookAt(v1);

// Get world position of child 
var discPoint = new THREE.Vector3();
child.getWorldPosition(discPoint);
console.log(discPoint);
",4
65092937,"{
for(var i =0; i< selectrows.length; i++){
   const action = { ...Action }
   action[""trackid""] = selectrows[i].innerText.replace(/(^\d+)(.+$)/i, '$1');

   researchService.postExecuteAction(action)
     .then(function(result){
     },function error(result){
     });
}
}
",-1
65100950,"// zoo.js

const empty = _ =>
  new Map
  
const fromString = (s = """") =>
  new Map
    ( s
        .split("", "")
        .map(_ => _.split("" is ""))
        .map(([ k, _ ]) => [ k, Number(_) ])
    )
  
const toString = (t = empty()) =>
  Array.from
    ( t.entries()
    , ([ animal, qty ]) => `${animal} is ${qty}` 
    )
    .join("", "")
  
const add = (t = empty(), a = """", q = 0) =>
  t.has(a)
    ? t.set(a, t.get(a) + q)
    : t.set(a, q)

export { add, empty, fromString, toString }

// main.js

import { fromString, add, toString } from ""./zoo.js""

const input =
  'Dog is 5, Cat is 7, Rabbit is 2'

const result =
  toString(add(fromString(input), ""Dog"", 3))
  
console.log(result)

// main.js

import { empty, add, toString } from ""./zoo.js""

const z =
  empty()

add(z, ""dog"", 1)
add(z, ""cat"", 2)
add(z, ""rabbit"", 3)
add(z, ""mouse"", 4)
add(z, ""dog"", 5)
add(z, ""rabbit"", 6)
  
console.log(toString(z))

// zoo.js
const empty = _ =>
  new Map
  
const fromString = (s = """") =>
  new Map
    ( s
        .split("", "")
        .map(_ => _.split("" is ""))
        .map(([ k, _ ]) => [ k, Number(_) ])
    )
  
const toString = (t = empty()) =>
  Array.from
    ( t.entries()
    , ([ animal, qty ]) => `${animal} is ${qty}` 
    )
    .join("", "")
  
const add = (t = empty(), a = """", q = 0) =>
  t.has(a)
    ? t.set(a, t.get(a) + q)
    : t.set(a, q)

// main.js
const input =
  'Dog is 5, Cat is 7, Rabbit is 2'

const result =
  toString(add(fromString(input), ""Dog"", 3))
  
console.log(result)",-1
65098968,"const sharp = require(""sharp"");

const originalFilename = ""image.jpg"";


const image = sharp(originalFilename);

// this is just a placeholder
const imageWidth = 500;

image
  .extract({ left: 0, top: 0, width: imageWidth, height: 25000 })
  .toFile(""top.jpg"", function(err) {
    // Save the top of the image to a file named ""top.jpg""
  });

image
  .extract({ left: 0, top: 25000, width: imageWidth, height: 25000 })
  .toFile(""bottom.jpg"", function(err) {
    // Save the bottom of the image to a file named ""bottom.jpg""
  });
",-1
